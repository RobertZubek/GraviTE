
freeEthernet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c98  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08005e48  08005e48  00015e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ed0  08005ed0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005ed0  08005ed0  00015ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ed8  08005ed8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ed8  08005ed8  00015ed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005edc  08005edc  00015edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005ee0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00004fa4  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004fb4  20004fb4  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001ecc4  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003d38  00000000  00000000  0003ed47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001960  00000000  00000000  00042a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000013c1  00000000  00000000  000443e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00006fe2  00000000  00000000  000457a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001b86c  00000000  00000000  0004c783  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f8d5a  00000000  00000000  00067fef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006ce8  00000000  00000000  00160d4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  00167a34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000010 	.word	0x20000010
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005e30 	.word	0x08005e30

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000014 	.word	0x20000014
 80001ec:	08005e30 	.word	0x08005e30

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000200:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000204:	f000 b970 	b.w	80004e8 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	460d      	mov	r5, r1
 8000228:	4604      	mov	r4, r0
 800022a:	460f      	mov	r7, r1
 800022c:	2b00      	cmp	r3, #0
 800022e:	d14a      	bne.n	80002c6 <__udivmoddi4+0xa6>
 8000230:	428a      	cmp	r2, r1
 8000232:	4694      	mov	ip, r2
 8000234:	d965      	bls.n	8000302 <__udivmoddi4+0xe2>
 8000236:	fab2 f382 	clz	r3, r2
 800023a:	b143      	cbz	r3, 800024e <__udivmoddi4+0x2e>
 800023c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000240:	f1c3 0220 	rsb	r2, r3, #32
 8000244:	409f      	lsls	r7, r3
 8000246:	fa20 f202 	lsr.w	r2, r0, r2
 800024a:	4317      	orrs	r7, r2
 800024c:	409c      	lsls	r4, r3
 800024e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000252:	fa1f f58c 	uxth.w	r5, ip
 8000256:	fbb7 f1fe 	udiv	r1, r7, lr
 800025a:	0c22      	lsrs	r2, r4, #16
 800025c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000260:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000264:	fb01 f005 	mul.w	r0, r1, r5
 8000268:	4290      	cmp	r0, r2
 800026a:	d90a      	bls.n	8000282 <__udivmoddi4+0x62>
 800026c:	eb1c 0202 	adds.w	r2, ip, r2
 8000270:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000274:	f080 811c 	bcs.w	80004b0 <__udivmoddi4+0x290>
 8000278:	4290      	cmp	r0, r2
 800027a:	f240 8119 	bls.w	80004b0 <__udivmoddi4+0x290>
 800027e:	3902      	subs	r1, #2
 8000280:	4462      	add	r2, ip
 8000282:	1a12      	subs	r2, r2, r0
 8000284:	b2a4      	uxth	r4, r4
 8000286:	fbb2 f0fe 	udiv	r0, r2, lr
 800028a:	fb0e 2210 	mls	r2, lr, r0, r2
 800028e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000292:	fb00 f505 	mul.w	r5, r0, r5
 8000296:	42a5      	cmp	r5, r4
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x90>
 800029a:	eb1c 0404 	adds.w	r4, ip, r4
 800029e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002a2:	f080 8107 	bcs.w	80004b4 <__udivmoddi4+0x294>
 80002a6:	42a5      	cmp	r5, r4
 80002a8:	f240 8104 	bls.w	80004b4 <__udivmoddi4+0x294>
 80002ac:	4464      	add	r4, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b4:	1b64      	subs	r4, r4, r5
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11e      	cbz	r6, 80002c2 <__udivmoddi4+0xa2>
 80002ba:	40dc      	lsrs	r4, r3
 80002bc:	2300      	movs	r3, #0
 80002be:	e9c6 4300 	strd	r4, r3, [r6]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d908      	bls.n	80002dc <__udivmoddi4+0xbc>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80ed 	beq.w	80004aa <__udivmoddi4+0x28a>
 80002d0:	2100      	movs	r1, #0
 80002d2:	e9c6 0500 	strd	r0, r5, [r6]
 80002d6:	4608      	mov	r0, r1
 80002d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002dc:	fab3 f183 	clz	r1, r3
 80002e0:	2900      	cmp	r1, #0
 80002e2:	d149      	bne.n	8000378 <__udivmoddi4+0x158>
 80002e4:	42ab      	cmp	r3, r5
 80002e6:	d302      	bcc.n	80002ee <__udivmoddi4+0xce>
 80002e8:	4282      	cmp	r2, r0
 80002ea:	f200 80f8 	bhi.w	80004de <__udivmoddi4+0x2be>
 80002ee:	1a84      	subs	r4, r0, r2
 80002f0:	eb65 0203 	sbc.w	r2, r5, r3
 80002f4:	2001      	movs	r0, #1
 80002f6:	4617      	mov	r7, r2
 80002f8:	2e00      	cmp	r6, #0
 80002fa:	d0e2      	beq.n	80002c2 <__udivmoddi4+0xa2>
 80002fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000300:	e7df      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000302:	b902      	cbnz	r2, 8000306 <__udivmoddi4+0xe6>
 8000304:	deff      	udf	#255	; 0xff
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	2b00      	cmp	r3, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x210>
 8000310:	1a8a      	subs	r2, r1, r2
 8000312:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000316:	fa1f fe8c 	uxth.w	lr, ip
 800031a:	2101      	movs	r1, #1
 800031c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000320:	fb07 2015 	mls	r0, r7, r5, r2
 8000324:	0c22      	lsrs	r2, r4, #16
 8000326:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800032a:	fb0e f005 	mul.w	r0, lr, r5
 800032e:	4290      	cmp	r0, r2
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x124>
 8000332:	eb1c 0202 	adds.w	r2, ip, r2
 8000336:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4290      	cmp	r0, r2
 800033e:	f200 80cb 	bhi.w	80004d8 <__udivmoddi4+0x2b8>
 8000342:	4645      	mov	r5, r8
 8000344:	1a12      	subs	r2, r2, r0
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb2 f0f7 	udiv	r0, r2, r7
 800034c:	fb07 2210 	mls	r2, r7, r0, r2
 8000350:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000354:	fb0e fe00 	mul.w	lr, lr, r0
 8000358:	45a6      	cmp	lr, r4
 800035a:	d908      	bls.n	800036e <__udivmoddi4+0x14e>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x14c>
 8000366:	45a6      	cmp	lr, r4
 8000368:	f200 80bb 	bhi.w	80004e2 <__udivmoddi4+0x2c2>
 800036c:	4610      	mov	r0, r2
 800036e:	eba4 040e 	sub.w	r4, r4, lr
 8000372:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000376:	e79f      	b.n	80002b8 <__udivmoddi4+0x98>
 8000378:	f1c1 0720 	rsb	r7, r1, #32
 800037c:	408b      	lsls	r3, r1
 800037e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000382:	ea4c 0c03 	orr.w	ip, ip, r3
 8000386:	fa05 f401 	lsl.w	r4, r5, r1
 800038a:	fa20 f307 	lsr.w	r3, r0, r7
 800038e:	40fd      	lsrs	r5, r7
 8000390:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000394:	4323      	orrs	r3, r4
 8000396:	fbb5 f8f9 	udiv	r8, r5, r9
 800039a:	fa1f fe8c 	uxth.w	lr, ip
 800039e:	fb09 5518 	mls	r5, r9, r8, r5
 80003a2:	0c1c      	lsrs	r4, r3, #16
 80003a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a8:	fb08 f50e 	mul.w	r5, r8, lr
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	fa02 f201 	lsl.w	r2, r2, r1
 80003b2:	fa00 f001 	lsl.w	r0, r0, r1
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1c 0404 	adds.w	r4, ip, r4
 80003bc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003c0:	f080 8088 	bcs.w	80004d4 <__udivmoddi4+0x2b4>
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	f240 8085 	bls.w	80004d4 <__udivmoddi4+0x2b4>
 80003ca:	f1a8 0802 	sub.w	r8, r8, #2
 80003ce:	4464      	add	r4, ip
 80003d0:	1b64      	subs	r4, r4, r5
 80003d2:	b29d      	uxth	r5, r3
 80003d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d8:	fb09 4413 	mls	r4, r9, r3, r4
 80003dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e4:	45a6      	cmp	lr, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003f0:	d26c      	bcs.n	80004cc <__udivmoddi4+0x2ac>
 80003f2:	45a6      	cmp	lr, r4
 80003f4:	d96a      	bls.n	80004cc <__udivmoddi4+0x2ac>
 80003f6:	3b02      	subs	r3, #2
 80003f8:	4464      	add	r4, ip
 80003fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000402:	eba4 040e 	sub.w	r4, r4, lr
 8000406:	42ac      	cmp	r4, r5
 8000408:	46c8      	mov	r8, r9
 800040a:	46ae      	mov	lr, r5
 800040c:	d356      	bcc.n	80004bc <__udivmoddi4+0x29c>
 800040e:	d053      	beq.n	80004b8 <__udivmoddi4+0x298>
 8000410:	b156      	cbz	r6, 8000428 <__udivmoddi4+0x208>
 8000412:	ebb0 0208 	subs.w	r2, r0, r8
 8000416:	eb64 040e 	sbc.w	r4, r4, lr
 800041a:	fa04 f707 	lsl.w	r7, r4, r7
 800041e:	40ca      	lsrs	r2, r1
 8000420:	40cc      	lsrs	r4, r1
 8000422:	4317      	orrs	r7, r2
 8000424:	e9c6 7400 	strd	r7, r4, [r6]
 8000428:	4618      	mov	r0, r3
 800042a:	2100      	movs	r1, #0
 800042c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000430:	f1c3 0120 	rsb	r1, r3, #32
 8000434:	fa02 fc03 	lsl.w	ip, r2, r3
 8000438:	fa20 f201 	lsr.w	r2, r0, r1
 800043c:	fa25 f101 	lsr.w	r1, r5, r1
 8000440:	409d      	lsls	r5, r3
 8000442:	432a      	orrs	r2, r5
 8000444:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000450:	fb07 1510 	mls	r5, r7, r0, r1
 8000454:	0c11      	lsrs	r1, r2, #16
 8000456:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800045a:	fb00 f50e 	mul.w	r5, r0, lr
 800045e:	428d      	cmp	r5, r1
 8000460:	fa04 f403 	lsl.w	r4, r4, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x258>
 8000466:	eb1c 0101 	adds.w	r1, ip, r1
 800046a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800046e:	d22f      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 8000470:	428d      	cmp	r5, r1
 8000472:	d92d      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 8000474:	3802      	subs	r0, #2
 8000476:	4461      	add	r1, ip
 8000478:	1b49      	subs	r1, r1, r5
 800047a:	b292      	uxth	r2, r2
 800047c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000480:	fb07 1115 	mls	r1, r7, r5, r1
 8000484:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000488:	fb05 f10e 	mul.w	r1, r5, lr
 800048c:	4291      	cmp	r1, r2
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x282>
 8000490:	eb1c 0202 	adds.w	r2, ip, r2
 8000494:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000498:	d216      	bcs.n	80004c8 <__udivmoddi4+0x2a8>
 800049a:	4291      	cmp	r1, r2
 800049c:	d914      	bls.n	80004c8 <__udivmoddi4+0x2a8>
 800049e:	3d02      	subs	r5, #2
 80004a0:	4462      	add	r2, ip
 80004a2:	1a52      	subs	r2, r2, r1
 80004a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a8:	e738      	b.n	800031c <__udivmoddi4+0xfc>
 80004aa:	4631      	mov	r1, r6
 80004ac:	4630      	mov	r0, r6
 80004ae:	e708      	b.n	80002c2 <__udivmoddi4+0xa2>
 80004b0:	4639      	mov	r1, r7
 80004b2:	e6e6      	b.n	8000282 <__udivmoddi4+0x62>
 80004b4:	4610      	mov	r0, r2
 80004b6:	e6fb      	b.n	80002b0 <__udivmoddi4+0x90>
 80004b8:	4548      	cmp	r0, r9
 80004ba:	d2a9      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004bc:	ebb9 0802 	subs.w	r8, r9, r2
 80004c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c4:	3b01      	subs	r3, #1
 80004c6:	e7a3      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c8:	4645      	mov	r5, r8
 80004ca:	e7ea      	b.n	80004a2 <__udivmoddi4+0x282>
 80004cc:	462b      	mov	r3, r5
 80004ce:	e794      	b.n	80003fa <__udivmoddi4+0x1da>
 80004d0:	4640      	mov	r0, r8
 80004d2:	e7d1      	b.n	8000478 <__udivmoddi4+0x258>
 80004d4:	46d0      	mov	r8, sl
 80004d6:	e77b      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d8:	3d02      	subs	r5, #2
 80004da:	4462      	add	r2, ip
 80004dc:	e732      	b.n	8000344 <__udivmoddi4+0x124>
 80004de:	4608      	mov	r0, r1
 80004e0:	e70a      	b.n	80002f8 <__udivmoddi4+0xd8>
 80004e2:	4464      	add	r4, ip
 80004e4:	3802      	subs	r0, #2
 80004e6:	e742      	b.n	800036e <__udivmoddi4+0x14e>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f0:	f000 fb80 	bl	8000bf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f4:	f000 f828 	bl	8000548 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f8:	f000 f8e8 	bl	80006cc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80004fc:	f000 f88e 	bl	800061c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000500:	f000 f8b6 	bl	8000670 <MX_USB_OTG_FS_PCD_Init>
  //uint32_t count = 0;

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000504:	f002 fe3c 	bl	8003180 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Ping */
  PingHandle = osThreadNew(sendPing, NULL, &Ping_attributes);
 8000508:	4a09      	ldr	r2, [pc, #36]	; (8000530 <main+0x44>)
 800050a:	2100      	movs	r1, #0
 800050c:	4809      	ldr	r0, [pc, #36]	; (8000534 <main+0x48>)
 800050e:	f002 fe81 	bl	8003214 <osThreadNew>
 8000512:	4603      	mov	r3, r0
 8000514:	4a08      	ldr	r2, [pc, #32]	; (8000538 <main+0x4c>)
 8000516:	6013      	str	r3, [r2, #0]

  /* creation of Blink */
  BlinkHandle = osThreadNew(blinkLED, NULL, &Blink_attributes);
 8000518:	4a08      	ldr	r2, [pc, #32]	; (800053c <main+0x50>)
 800051a:	2100      	movs	r1, #0
 800051c:	4808      	ldr	r0, [pc, #32]	; (8000540 <main+0x54>)
 800051e:	f002 fe79 	bl	8003214 <osThreadNew>
 8000522:	4603      	mov	r3, r0
 8000524:	4a07      	ldr	r2, [pc, #28]	; (8000544 <main+0x58>)
 8000526:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000528:	f002 fe4e 	bl	80031c8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800052c:	e7fe      	b.n	800052c <main+0x40>
 800052e:	bf00      	nop
 8000530:	08005e70 	.word	0x08005e70
 8000534:	08000829 	.word	0x08000829
 8000538:	20000558 	.word	0x20000558
 800053c:	08005e94 	.word	0x08005e94
 8000540:	08000835 	.word	0x08000835
 8000544:	2000055c 	.word	0x2000055c

08000548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b094      	sub	sp, #80	; 0x50
 800054c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054e:	f107 0320 	add.w	r3, r7, #32
 8000552:	2230      	movs	r2, #48	; 0x30
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f005 fc30 	bl	8005dbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800055c:	f107 030c 	add.w	r3, r7, #12
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
 8000566:	609a      	str	r2, [r3, #8]
 8000568:	60da      	str	r2, [r3, #12]
 800056a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800056c:	2300      	movs	r3, #0
 800056e:	60bb      	str	r3, [r7, #8]
 8000570:	4b28      	ldr	r3, [pc, #160]	; (8000614 <SystemClock_Config+0xcc>)
 8000572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000574:	4a27      	ldr	r2, [pc, #156]	; (8000614 <SystemClock_Config+0xcc>)
 8000576:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800057a:	6413      	str	r3, [r2, #64]	; 0x40
 800057c:	4b25      	ldr	r3, [pc, #148]	; (8000614 <SystemClock_Config+0xcc>)
 800057e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000584:	60bb      	str	r3, [r7, #8]
 8000586:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000588:	2300      	movs	r3, #0
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	4b22      	ldr	r3, [pc, #136]	; (8000618 <SystemClock_Config+0xd0>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a21      	ldr	r2, [pc, #132]	; (8000618 <SystemClock_Config+0xd0>)
 8000592:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000596:	6013      	str	r3, [r2, #0]
 8000598:	4b1f      	ldr	r3, [pc, #124]	; (8000618 <SystemClock_Config+0xd0>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005a0:	607b      	str	r3, [r7, #4]
 80005a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005a4:	2301      	movs	r3, #1
 80005a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005a8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ae:	2302      	movs	r3, #2
 80005b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005b8:	2304      	movs	r3, #4
 80005ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005bc:	23a8      	movs	r3, #168	; 0xa8
 80005be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c0:	2302      	movs	r3, #2
 80005c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005c4:	2307      	movs	r3, #7
 80005c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c8:	f107 0320 	add.w	r3, r7, #32
 80005cc:	4618      	mov	r0, r3
 80005ce:	f001 f82b 	bl	8001628 <HAL_RCC_OscConfig>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005d8:	f000 f956 	bl	8000888 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005dc:	230f      	movs	r3, #15
 80005de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e0:	2302      	movs	r3, #2
 80005e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e4:	2300      	movs	r3, #0
 80005e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005e8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005f4:	f107 030c 	add.w	r3, r7, #12
 80005f8:	2105      	movs	r1, #5
 80005fa:	4618      	mov	r0, r3
 80005fc:	f001 fa8c 	bl	8001b18 <HAL_RCC_ClockConfig>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000606:	f000 f93f 	bl	8000888 <Error_Handler>
  }
}
 800060a:	bf00      	nop
 800060c:	3750      	adds	r7, #80	; 0x50
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40023800 	.word	0x40023800
 8000618:	40007000 	.word	0x40007000

0800061c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000620:	4b11      	ldr	r3, [pc, #68]	; (8000668 <MX_USART3_UART_Init+0x4c>)
 8000622:	4a12      	ldr	r2, [pc, #72]	; (800066c <MX_USART3_UART_Init+0x50>)
 8000624:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000626:	4b10      	ldr	r3, [pc, #64]	; (8000668 <MX_USART3_UART_Init+0x4c>)
 8000628:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800062c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800062e:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <MX_USART3_UART_Init+0x4c>)
 8000630:	2200      	movs	r2, #0
 8000632:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000634:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <MX_USART3_UART_Init+0x4c>)
 8000636:	2200      	movs	r2, #0
 8000638:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800063a:	4b0b      	ldr	r3, [pc, #44]	; (8000668 <MX_USART3_UART_Init+0x4c>)
 800063c:	2200      	movs	r2, #0
 800063e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000640:	4b09      	ldr	r3, [pc, #36]	; (8000668 <MX_USART3_UART_Init+0x4c>)
 8000642:	220c      	movs	r2, #12
 8000644:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000646:	4b08      	ldr	r3, [pc, #32]	; (8000668 <MX_USART3_UART_Init+0x4c>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800064c:	4b06      	ldr	r3, [pc, #24]	; (8000668 <MX_USART3_UART_Init+0x4c>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000652:	4805      	ldr	r0, [pc, #20]	; (8000668 <MX_USART3_UART_Init+0x4c>)
 8000654:	f001 ff54 	bl	8002500 <HAL_UART_Init>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800065e:	f000 f913 	bl	8000888 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000662:	bf00      	nop
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	2000002c 	.word	0x2000002c
 800066c:	40004800 	.word	0x40004800

08000670 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000674:	4b14      	ldr	r3, [pc, #80]	; (80006c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000676:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800067a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800067c:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800067e:	2204      	movs	r2, #4
 8000680:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000682:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000684:	2202      	movs	r2, #2
 8000686:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000688:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800068a:	2200      	movs	r2, #0
 800068c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800068e:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000690:	2202      	movs	r2, #2
 8000692:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000694:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000696:	2201      	movs	r2, #1
 8000698:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800069a:	4b0b      	ldr	r3, [pc, #44]	; (80006c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800069c:	2200      	movs	r2, #0
 800069e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80006a0:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80006a6:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006a8:	2201      	movs	r2, #1
 80006aa:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80006ac:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80006b2:	4805      	ldr	r0, [pc, #20]	; (80006c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006b4:	f000 fea9 	bl	800140a <HAL_PCD_Init>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80006be:	f000 f8e3 	bl	8000888 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000074 	.word	0x20000074

080006cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b08c      	sub	sp, #48	; 0x30
 80006d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d2:	f107 031c 	add.w	r3, r7, #28
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
 80006e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	61bb      	str	r3, [r7, #24]
 80006e6:	4b4c      	ldr	r3, [pc, #304]	; (8000818 <MX_GPIO_Init+0x14c>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a4b      	ldr	r2, [pc, #300]	; (8000818 <MX_GPIO_Init+0x14c>)
 80006ec:	f043 0304 	orr.w	r3, r3, #4
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b49      	ldr	r3, [pc, #292]	; (8000818 <MX_GPIO_Init+0x14c>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f003 0304 	and.w	r3, r3, #4
 80006fa:	61bb      	str	r3, [r7, #24]
 80006fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	617b      	str	r3, [r7, #20]
 8000702:	4b45      	ldr	r3, [pc, #276]	; (8000818 <MX_GPIO_Init+0x14c>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4a44      	ldr	r2, [pc, #272]	; (8000818 <MX_GPIO_Init+0x14c>)
 8000708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
 800070e:	4b42      	ldr	r3, [pc, #264]	; (8000818 <MX_GPIO_Init+0x14c>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000716:	617b      	str	r3, [r7, #20]
 8000718:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	613b      	str	r3, [r7, #16]
 800071e:	4b3e      	ldr	r3, [pc, #248]	; (8000818 <MX_GPIO_Init+0x14c>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a3d      	ldr	r2, [pc, #244]	; (8000818 <MX_GPIO_Init+0x14c>)
 8000724:	f043 0301 	orr.w	r3, r3, #1
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b3b      	ldr	r3, [pc, #236]	; (8000818 <MX_GPIO_Init+0x14c>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	613b      	str	r3, [r7, #16]
 8000734:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	60fb      	str	r3, [r7, #12]
 800073a:	4b37      	ldr	r3, [pc, #220]	; (8000818 <MX_GPIO_Init+0x14c>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a36      	ldr	r2, [pc, #216]	; (8000818 <MX_GPIO_Init+0x14c>)
 8000740:	f043 0302 	orr.w	r3, r3, #2
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4b34      	ldr	r3, [pc, #208]	; (8000818 <MX_GPIO_Init+0x14c>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f003 0302 	and.w	r3, r3, #2
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	60bb      	str	r3, [r7, #8]
 8000756:	4b30      	ldr	r3, [pc, #192]	; (8000818 <MX_GPIO_Init+0x14c>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a2f      	ldr	r2, [pc, #188]	; (8000818 <MX_GPIO_Init+0x14c>)
 800075c:	f043 0308 	orr.w	r3, r3, #8
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b2d      	ldr	r3, [pc, #180]	; (8000818 <MX_GPIO_Init+0x14c>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0308 	and.w	r3, r3, #8
 800076a:	60bb      	str	r3, [r7, #8]
 800076c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	607b      	str	r3, [r7, #4]
 8000772:	4b29      	ldr	r3, [pc, #164]	; (8000818 <MX_GPIO_Init+0x14c>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a28      	ldr	r2, [pc, #160]	; (8000818 <MX_GPIO_Init+0x14c>)
 8000778:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b26      	ldr	r3, [pc, #152]	; (8000818 <MX_GPIO_Init+0x14c>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LD3_Pin|LED2_Pin, GPIO_PIN_RESET);
 800078a:	2200      	movs	r2, #0
 800078c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000790:	4822      	ldr	r0, [pc, #136]	; (800081c <MX_GPIO_Init+0x150>)
 8000792:	f000 fe07 	bl	80013a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	2140      	movs	r1, #64	; 0x40
 800079a:	4821      	ldr	r0, [pc, #132]	; (8000820 <MX_GPIO_Init+0x154>)
 800079c:	f000 fe02 	bl	80013a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80007a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007a6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80007b0:	f107 031c 	add.w	r3, r7, #28
 80007b4:	4619      	mov	r1, r3
 80007b6:	481b      	ldr	r0, [pc, #108]	; (8000824 <MX_GPIO_Init+0x158>)
 80007b8:	f000 fc48 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LD3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LD3_Pin|LED2_Pin;
 80007bc:	f244 0381 	movw	r3, #16513	; 0x4081
 80007c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c2:	2301      	movs	r3, #1
 80007c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ca:	2300      	movs	r3, #0
 80007cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ce:	f107 031c 	add.w	r3, r7, #28
 80007d2:	4619      	mov	r1, r3
 80007d4:	4811      	ldr	r0, [pc, #68]	; (800081c <MX_GPIO_Init+0x150>)
 80007d6:	f000 fc39 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80007da:	2340      	movs	r3, #64	; 0x40
 80007dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007de:	2301      	movs	r3, #1
 80007e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e6:	2300      	movs	r3, #0
 80007e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007ea:	f107 031c 	add.w	r3, r7, #28
 80007ee:	4619      	mov	r1, r3
 80007f0:	480b      	ldr	r0, [pc, #44]	; (8000820 <MX_GPIO_Init+0x154>)
 80007f2:	f000 fc2b 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80007f6:	2380      	movs	r3, #128	; 0x80
 80007f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007fa:	2300      	movs	r3, #0
 80007fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000802:	f107 031c 	add.w	r3, r7, #28
 8000806:	4619      	mov	r1, r3
 8000808:	4805      	ldr	r0, [pc, #20]	; (8000820 <MX_GPIO_Init+0x154>)
 800080a:	f000 fc1f 	bl	800104c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800080e:	bf00      	nop
 8000810:	3730      	adds	r7, #48	; 0x30
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40023800 	.word	0x40023800
 800081c:	40020400 	.word	0x40020400
 8000820:	40021800 	.word	0x40021800
 8000824:	40020800 	.word	0x40020800

08000828 <sendPing>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_sendPing */
void sendPing(void *argument)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */


  for(;;)
 8000830:	e7fe      	b.n	8000830 <sendPing+0x8>
	...

08000834 <blinkLED>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_blinkLED */
void blinkLED(void *argument)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN blinkLED */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800083c:	2101      	movs	r1, #1
 800083e:	4808      	ldr	r0, [pc, #32]	; (8000860 <blinkLED+0x2c>)
 8000840:	f000 fdc9 	bl	80013d6 <HAL_GPIO_TogglePin>
    osDelay(1000);
 8000844:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000848:	f002 fd76 	bl	8003338 <osDelay>
    HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 800084c:	2180      	movs	r1, #128	; 0x80
 800084e:	4804      	ldr	r0, [pc, #16]	; (8000860 <blinkLED+0x2c>)
 8000850:	f000 fdc1 	bl	80013d6 <HAL_GPIO_TogglePin>
    osDelay(1000);
 8000854:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000858:	f002 fd6e 	bl	8003338 <osDelay>
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800085c:	e7ee      	b.n	800083c <blinkLED+0x8>
 800085e:	bf00      	nop
 8000860:	40020400 	.word	0x40020400

08000864 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a04      	ldr	r2, [pc, #16]	; (8000884 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d101      	bne.n	800087a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000876:	f000 f9df 	bl	8000c38 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800087a:	bf00      	nop
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40001000 	.word	0x40001000

08000888 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800088c:	b672      	cpsid	i
}
 800088e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000890:	e7fe      	b.n	8000890 <Error_Handler+0x8>
	...

08000894 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	607b      	str	r3, [r7, #4]
 800089e:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <HAL_MspInit+0x54>)
 80008a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a2:	4a11      	ldr	r2, [pc, #68]	; (80008e8 <HAL_MspInit+0x54>)
 80008a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008a8:	6453      	str	r3, [r2, #68]	; 0x44
 80008aa:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <HAL_MspInit+0x54>)
 80008ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	603b      	str	r3, [r7, #0]
 80008ba:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <HAL_MspInit+0x54>)
 80008bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008be:	4a0a      	ldr	r2, [pc, #40]	; (80008e8 <HAL_MspInit+0x54>)
 80008c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c4:	6413      	str	r3, [r2, #64]	; 0x40
 80008c6:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <HAL_MspInit+0x54>)
 80008c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ce:	603b      	str	r3, [r7, #0]
 80008d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008d2:	2200      	movs	r2, #0
 80008d4:	210f      	movs	r1, #15
 80008d6:	f06f 0001 	mvn.w	r0, #1
 80008da:	f000 faa9 	bl	8000e30 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40023800 	.word	0x40023800

080008ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08a      	sub	sp, #40	; 0x28
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f4:	f107 0314 	add.w	r3, r7, #20
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
 8000902:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a19      	ldr	r2, [pc, #100]	; (8000970 <HAL_UART_MspInit+0x84>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d12c      	bne.n	8000968 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	613b      	str	r3, [r7, #16]
 8000912:	4b18      	ldr	r3, [pc, #96]	; (8000974 <HAL_UART_MspInit+0x88>)
 8000914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000916:	4a17      	ldr	r2, [pc, #92]	; (8000974 <HAL_UART_MspInit+0x88>)
 8000918:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800091c:	6413      	str	r3, [r2, #64]	; 0x40
 800091e:	4b15      	ldr	r3, [pc, #84]	; (8000974 <HAL_UART_MspInit+0x88>)
 8000920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000922:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000926:	613b      	str	r3, [r7, #16]
 8000928:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	4b11      	ldr	r3, [pc, #68]	; (8000974 <HAL_UART_MspInit+0x88>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a10      	ldr	r2, [pc, #64]	; (8000974 <HAL_UART_MspInit+0x88>)
 8000934:	f043 0308 	orr.w	r3, r3, #8
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <HAL_UART_MspInit+0x88>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f003 0308 	and.w	r3, r3, #8
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000946:	f44f 7340 	mov.w	r3, #768	; 0x300
 800094a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094c:	2302      	movs	r3, #2
 800094e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000954:	2303      	movs	r3, #3
 8000956:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000958:	2307      	movs	r3, #7
 800095a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800095c:	f107 0314 	add.w	r3, r7, #20
 8000960:	4619      	mov	r1, r3
 8000962:	4805      	ldr	r0, [pc, #20]	; (8000978 <HAL_UART_MspInit+0x8c>)
 8000964:	f000 fb72 	bl	800104c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000968:	bf00      	nop
 800096a:	3728      	adds	r7, #40	; 0x28
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	40004800 	.word	0x40004800
 8000974:	40023800 	.word	0x40023800
 8000978:	40020c00 	.word	0x40020c00

0800097c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b08a      	sub	sp, #40	; 0x28
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800099c:	d13f      	bne.n	8000a1e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	613b      	str	r3, [r7, #16]
 80009a2:	4b21      	ldr	r3, [pc, #132]	; (8000a28 <HAL_PCD_MspInit+0xac>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	4a20      	ldr	r2, [pc, #128]	; (8000a28 <HAL_PCD_MspInit+0xac>)
 80009a8:	f043 0301 	orr.w	r3, r3, #1
 80009ac:	6313      	str	r3, [r2, #48]	; 0x30
 80009ae:	4b1e      	ldr	r3, [pc, #120]	; (8000a28 <HAL_PCD_MspInit+0xac>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	f003 0301 	and.w	r3, r3, #1
 80009b6:	613b      	str	r3, [r7, #16]
 80009b8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80009ba:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80009be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c0:	2302      	movs	r3, #2
 80009c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c8:	2303      	movs	r3, #3
 80009ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009cc:	230a      	movs	r3, #10
 80009ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	4619      	mov	r1, r3
 80009d6:	4815      	ldr	r0, [pc, #84]	; (8000a2c <HAL_PCD_MspInit+0xb0>)
 80009d8:	f000 fb38 	bl	800104c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80009dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e2:	2300      	movs	r3, #0
 80009e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80009ea:	f107 0314 	add.w	r3, r7, #20
 80009ee:	4619      	mov	r1, r3
 80009f0:	480e      	ldr	r0, [pc, #56]	; (8000a2c <HAL_PCD_MspInit+0xb0>)
 80009f2:	f000 fb2b 	bl	800104c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80009f6:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <HAL_PCD_MspInit+0xac>)
 80009f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009fa:	4a0b      	ldr	r2, [pc, #44]	; (8000a28 <HAL_PCD_MspInit+0xac>)
 80009fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a00:	6353      	str	r3, [r2, #52]	; 0x34
 8000a02:	2300      	movs	r3, #0
 8000a04:	60fb      	str	r3, [r7, #12]
 8000a06:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <HAL_PCD_MspInit+0xac>)
 8000a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0a:	4a07      	ldr	r2, [pc, #28]	; (8000a28 <HAL_PCD_MspInit+0xac>)
 8000a0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a10:	6453      	str	r3, [r2, #68]	; 0x44
 8000a12:	4b05      	ldr	r3, [pc, #20]	; (8000a28 <HAL_PCD_MspInit+0xac>)
 8000a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000a1e:	bf00      	nop
 8000a20:	3728      	adds	r7, #40	; 0x28
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40023800 	.word	0x40023800
 8000a2c:	40020000 	.word	0x40020000

08000a30 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08e      	sub	sp, #56	; 0x38
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a40:	2300      	movs	r3, #0
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	4b33      	ldr	r3, [pc, #204]	; (8000b14 <HAL_InitTick+0xe4>)
 8000a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a48:	4a32      	ldr	r2, [pc, #200]	; (8000b14 <HAL_InitTick+0xe4>)
 8000a4a:	f043 0310 	orr.w	r3, r3, #16
 8000a4e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a50:	4b30      	ldr	r3, [pc, #192]	; (8000b14 <HAL_InitTick+0xe4>)
 8000a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a54:	f003 0310 	and.w	r3, r3, #16
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a5c:	f107 0210 	add.w	r2, r7, #16
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	4611      	mov	r1, r2
 8000a66:	4618      	mov	r0, r3
 8000a68:	f001 fa76 	bl	8001f58 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a6c:	6a3b      	ldr	r3, [r7, #32]
 8000a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d103      	bne.n	8000a7e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a76:	f001 fa47 	bl	8001f08 <HAL_RCC_GetPCLK1Freq>
 8000a7a:	6378      	str	r0, [r7, #52]	; 0x34
 8000a7c:	e004      	b.n	8000a88 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a7e:	f001 fa43 	bl	8001f08 <HAL_RCC_GetPCLK1Freq>
 8000a82:	4603      	mov	r3, r0
 8000a84:	005b      	lsls	r3, r3, #1
 8000a86:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a8a:	4a23      	ldr	r2, [pc, #140]	; (8000b18 <HAL_InitTick+0xe8>)
 8000a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8000a90:	0c9b      	lsrs	r3, r3, #18
 8000a92:	3b01      	subs	r3, #1
 8000a94:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a96:	4b21      	ldr	r3, [pc, #132]	; (8000b1c <HAL_InitTick+0xec>)
 8000a98:	4a21      	ldr	r2, [pc, #132]	; (8000b20 <HAL_InitTick+0xf0>)
 8000a9a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a9c:	4b1f      	ldr	r3, [pc, #124]	; (8000b1c <HAL_InitTick+0xec>)
 8000a9e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000aa2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000aa4:	4a1d      	ldr	r2, [pc, #116]	; (8000b1c <HAL_InitTick+0xec>)
 8000aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aa8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000aaa:	4b1c      	ldr	r3, [pc, #112]	; (8000b1c <HAL_InitTick+0xec>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab0:	4b1a      	ldr	r3, [pc, #104]	; (8000b1c <HAL_InitTick+0xec>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ab6:	4b19      	ldr	r3, [pc, #100]	; (8000b1c <HAL_InitTick+0xec>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000abc:	4817      	ldr	r0, [pc, #92]	; (8000b1c <HAL_InitTick+0xec>)
 8000abe:	f001 fa7d 	bl	8001fbc <HAL_TIM_Base_Init>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000ac8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d11b      	bne.n	8000b08 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000ad0:	4812      	ldr	r0, [pc, #72]	; (8000b1c <HAL_InitTick+0xec>)
 8000ad2:	f001 facd 	bl	8002070 <HAL_TIM_Base_Start_IT>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000adc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d111      	bne.n	8000b08 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ae4:	2036      	movs	r0, #54	; 0x36
 8000ae6:	f000 f9bf 	bl	8000e68 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2b0f      	cmp	r3, #15
 8000aee:	d808      	bhi.n	8000b02 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000af0:	2200      	movs	r2, #0
 8000af2:	6879      	ldr	r1, [r7, #4]
 8000af4:	2036      	movs	r0, #54	; 0x36
 8000af6:	f000 f99b 	bl	8000e30 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000afa:	4a0a      	ldr	r2, [pc, #40]	; (8000b24 <HAL_InitTick+0xf4>)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	6013      	str	r3, [r2, #0]
 8000b00:	e002      	b.n	8000b08 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000b02:	2301      	movs	r3, #1
 8000b04:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b08:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3738      	adds	r7, #56	; 0x38
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40023800 	.word	0x40023800
 8000b18:	431bde83 	.word	0x431bde83
 8000b1c:	20000560 	.word	0x20000560
 8000b20:	40001000 	.word	0x40001000
 8000b24:	20000004 	.word	0x20000004

08000b28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b2c:	e7fe      	b.n	8000b2c <NMI_Handler+0x4>

08000b2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b32:	e7fe      	b.n	8000b32 <HardFault_Handler+0x4>

08000b34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <MemManage_Handler+0x4>

08000b3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b3e:	e7fe      	b.n	8000b3e <BusFault_Handler+0x4>

08000b40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <UsageFault_Handler+0x4>

08000b46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr

08000b54 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b58:	4802      	ldr	r0, [pc, #8]	; (8000b64 <TIM6_DAC_IRQHandler+0x10>)
 8000b5a:	f001 faf9 	bl	8002150 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	20000560 	.word	0x20000560

08000b68 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000b6c:	4802      	ldr	r0, [pc, #8]	; (8000b78 <ETH_IRQHandler+0x10>)
 8000b6e:	f000 f989 	bl	8000e84 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	200005b4 	.word	0x200005b4

08000b7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <SystemInit+0x20>)
 8000b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b86:	4a05      	ldr	r2, [pc, #20]	; (8000b9c <SystemInit+0x20>)
 8000b88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	e000ed00 	.word	0xe000ed00

08000ba0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000ba0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bd8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ba4:	f7ff ffea 	bl	8000b7c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ba8:	480c      	ldr	r0, [pc, #48]	; (8000bdc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000baa:	490d      	ldr	r1, [pc, #52]	; (8000be0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bac:	4a0d      	ldr	r2, [pc, #52]	; (8000be4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bb0:	e002      	b.n	8000bb8 <LoopCopyDataInit>

08000bb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bb6:	3304      	adds	r3, #4

08000bb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bbc:	d3f9      	bcc.n	8000bb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bbe:	4a0a      	ldr	r2, [pc, #40]	; (8000be8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bc0:	4c0a      	ldr	r4, [pc, #40]	; (8000bec <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bc4:	e001      	b.n	8000bca <LoopFillZerobss>

08000bc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bc8:	3204      	adds	r2, #4

08000bca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bcc:	d3fb      	bcc.n	8000bc6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000bce:	f005 f8fd 	bl	8005dcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bd2:	f7ff fc8b 	bl	80004ec <main>
  bx  lr    
 8000bd6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000bd8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000bdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000be0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000be4:	08005ee0 	.word	0x08005ee0
  ldr r2, =_sbss
 8000be8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000bec:	20004fb4 	.word	0x20004fb4

08000bf0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bf0:	e7fe      	b.n	8000bf0 <ADC_IRQHandler>
	...

08000bf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bf8:	4b0e      	ldr	r3, [pc, #56]	; (8000c34 <HAL_Init+0x40>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a0d      	ldr	r2, [pc, #52]	; (8000c34 <HAL_Init+0x40>)
 8000bfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c04:	4b0b      	ldr	r3, [pc, #44]	; (8000c34 <HAL_Init+0x40>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a0a      	ldr	r2, [pc, #40]	; (8000c34 <HAL_Init+0x40>)
 8000c0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c10:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <HAL_Init+0x40>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a07      	ldr	r2, [pc, #28]	; (8000c34 <HAL_Init+0x40>)
 8000c16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c1c:	2003      	movs	r0, #3
 8000c1e:	f000 f8fc 	bl	8000e1a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c22:	200f      	movs	r0, #15
 8000c24:	f7ff ff04 	bl	8000a30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c28:	f7ff fe34 	bl	8000894 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c2c:	2300      	movs	r3, #0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40023c00 	.word	0x40023c00

08000c38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c3c:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <HAL_IncTick+0x20>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	461a      	mov	r2, r3
 8000c42:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <HAL_IncTick+0x24>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4413      	add	r3, r2
 8000c48:	4a04      	ldr	r2, [pc, #16]	; (8000c5c <HAL_IncTick+0x24>)
 8000c4a:	6013      	str	r3, [r2, #0]
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	20000008 	.word	0x20000008
 8000c5c:	200005a8 	.word	0x200005a8

08000c60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  return uwTick;
 8000c64:	4b03      	ldr	r3, [pc, #12]	; (8000c74 <HAL_GetTick+0x14>)
 8000c66:	681b      	ldr	r3, [r3, #0]
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	200005a8 	.word	0x200005a8

08000c78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c80:	f7ff ffee 	bl	8000c60 <HAL_GetTick>
 8000c84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c90:	d005      	beq.n	8000c9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c92:	4b0a      	ldr	r3, [pc, #40]	; (8000cbc <HAL_Delay+0x44>)
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	461a      	mov	r2, r3
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c9e:	bf00      	nop
 8000ca0:	f7ff ffde 	bl	8000c60 <HAL_GetTick>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	68bb      	ldr	r3, [r7, #8]
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	68fa      	ldr	r2, [r7, #12]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d8f7      	bhi.n	8000ca0 <HAL_Delay+0x28>
  {
  }
}
 8000cb0:	bf00      	nop
 8000cb2:	bf00      	nop
 8000cb4:	3710      	adds	r7, #16
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20000008 	.word	0x20000008

08000cc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	f003 0307 	and.w	r3, r3, #7
 8000cce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cd0:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cd6:	68ba      	ldr	r2, [r7, #8]
 8000cd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cdc:	4013      	ands	r3, r2
 8000cde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ce8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cf2:	4a04      	ldr	r2, [pc, #16]	; (8000d04 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	60d3      	str	r3, [r2, #12]
}
 8000cf8:	bf00      	nop
 8000cfa:	3714      	adds	r7, #20
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d0c:	4b04      	ldr	r3, [pc, #16]	; (8000d20 <__NVIC_GetPriorityGrouping+0x18>)
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	0a1b      	lsrs	r3, r3, #8
 8000d12:	f003 0307 	and.w	r3, r3, #7
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	db0b      	blt.n	8000d4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	f003 021f 	and.w	r2, r3, #31
 8000d3c:	4907      	ldr	r1, [pc, #28]	; (8000d5c <__NVIC_EnableIRQ+0x38>)
 8000d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d42:	095b      	lsrs	r3, r3, #5
 8000d44:	2001      	movs	r0, #1
 8000d46:	fa00 f202 	lsl.w	r2, r0, r2
 8000d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d4e:	bf00      	nop
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	e000e100 	.word	0xe000e100

08000d60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	6039      	str	r1, [r7, #0]
 8000d6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	db0a      	blt.n	8000d8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	b2da      	uxtb	r2, r3
 8000d78:	490c      	ldr	r1, [pc, #48]	; (8000dac <__NVIC_SetPriority+0x4c>)
 8000d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7e:	0112      	lsls	r2, r2, #4
 8000d80:	b2d2      	uxtb	r2, r2
 8000d82:	440b      	add	r3, r1
 8000d84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d88:	e00a      	b.n	8000da0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	b2da      	uxtb	r2, r3
 8000d8e:	4908      	ldr	r1, [pc, #32]	; (8000db0 <__NVIC_SetPriority+0x50>)
 8000d90:	79fb      	ldrb	r3, [r7, #7]
 8000d92:	f003 030f 	and.w	r3, r3, #15
 8000d96:	3b04      	subs	r3, #4
 8000d98:	0112      	lsls	r2, r2, #4
 8000d9a:	b2d2      	uxtb	r2, r2
 8000d9c:	440b      	add	r3, r1
 8000d9e:	761a      	strb	r2, [r3, #24]
}
 8000da0:	bf00      	nop
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	e000e100 	.word	0xe000e100
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b089      	sub	sp, #36	; 0x24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	f003 0307 	and.w	r3, r3, #7
 8000dc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	f1c3 0307 	rsb	r3, r3, #7
 8000dce:	2b04      	cmp	r3, #4
 8000dd0:	bf28      	it	cs
 8000dd2:	2304      	movcs	r3, #4
 8000dd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	3304      	adds	r3, #4
 8000dda:	2b06      	cmp	r3, #6
 8000ddc:	d902      	bls.n	8000de4 <NVIC_EncodePriority+0x30>
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	3b03      	subs	r3, #3
 8000de2:	e000      	b.n	8000de6 <NVIC_EncodePriority+0x32>
 8000de4:	2300      	movs	r3, #0
 8000de6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000dec:	69bb      	ldr	r3, [r7, #24]
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	43da      	mvns	r2, r3
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	401a      	ands	r2, r3
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dfc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	fa01 f303 	lsl.w	r3, r1, r3
 8000e06:	43d9      	mvns	r1, r3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e0c:	4313      	orrs	r3, r2
         );
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3724      	adds	r7, #36	; 0x24
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr

08000e1a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b082      	sub	sp, #8
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f7ff ff4c 	bl	8000cc0 <__NVIC_SetPriorityGrouping>
}
 8000e28:	bf00      	nop
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	607a      	str	r2, [r7, #4]
 8000e3c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e42:	f7ff ff61 	bl	8000d08 <__NVIC_GetPriorityGrouping>
 8000e46:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e48:	687a      	ldr	r2, [r7, #4]
 8000e4a:	68b9      	ldr	r1, [r7, #8]
 8000e4c:	6978      	ldr	r0, [r7, #20]
 8000e4e:	f7ff ffb1 	bl	8000db4 <NVIC_EncodePriority>
 8000e52:	4602      	mov	r2, r0
 8000e54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e58:	4611      	mov	r1, r2
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff ff80 	bl	8000d60 <__NVIC_SetPriority>
}
 8000e60:	bf00      	nop
 8000e62:	3718      	adds	r7, #24
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff ff54 	bl	8000d24 <__NVIC_EnableIRQ>
}
 8000e7c:	bf00      	nop
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000e94:	695b      	ldr	r3, [r3, #20]
 8000e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e9a:	2b40      	cmp	r3, #64	; 0x40
 8000e9c:	d112      	bne.n	8000ec4 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000ea6:	69db      	ldr	r3, [r3, #28]
 8000ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000eac:	2b40      	cmp	r3, #64	; 0x40
 8000eae:	d109      	bne.n	8000ec4 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000eb8:	461a      	mov	r2, r3
 8000eba:	4b50      	ldr	r3, [pc, #320]	; (8000ffc <HAL_ETH_IRQHandler+0x178>)
 8000ebc:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f002 f8e2 	bl	8003088 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000ecc:	695b      	ldr	r3, [r3, #20]
 8000ece:	f003 0301 	and.w	r3, r3, #1
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d113      	bne.n	8000efe <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000ede:	69db      	ldr	r3, [r3, #28]
 8000ee0:	f003 0301 	and.w	r3, r3, #1
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d10a      	bne.n	8000efe <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8000ef6:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f002 f8d5 	bl	80030a8 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f06:	695b      	ldr	r3, [r3, #20]
 8000f08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000f10:	d14c      	bne.n	8000fac <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f1a:	69db      	ldr	r3, [r3, #28]
 8000f1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000f24:	d142      	bne.n	8000fac <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f2c:	f043 0208 	orr.w	r2, r3, #8
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f3e:	695b      	ldr	r3, [r3, #20]
 8000f40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f48:	d11a      	bne.n	8000f80 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f52:	695a      	ldr	r2, [r3, #20]
 8000f54:	4b2a      	ldr	r3, [pc, #168]	; (8001000 <HAL_ETH_IRQHandler+0x17c>)
 8000f56:	4013      	ands	r3, r2
 8000f58:	687a      	ldr	r2, [r7, #4]
 8000f5a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f66:	69db      	ldr	r3, [r3, #28]
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	6812      	ldr	r2, [r2, #0]
 8000f6c:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8000f70:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8000f74:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	22e0      	movs	r2, #224	; 0xe0
 8000f7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8000f7e:	e012      	b.n	8000fa6 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f88:	695a      	ldr	r2, [r3, #20]
 8000f8a:	f248 6380 	movw	r3, #34432	; 0x8680
 8000f8e:	4013      	ands	r3, r2
 8000f90:	687a      	ldr	r2, [r7, #4]
 8000f92:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	f248 6380 	movw	r3, #34432	; 0x8680
 8000fa4:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f002 f88e 	bl	80030c8 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fb2:	f003 0308 	and.w	r3, r3, #8
 8000fb6:	2b08      	cmp	r3, #8
 8000fb8:	d10e      	bne.n	8000fd8 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fc0:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f000 f81c 	bl	8001008 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8000fd8:	4b0a      	ldr	r3, [pc, #40]	; (8001004 <HAL_ETH_IRQHandler+0x180>)
 8000fda:	695b      	ldr	r3, [r3, #20]
 8000fdc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d006      	beq.n	8000ff2 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8000fe4:	4b07      	ldr	r3, [pc, #28]	; (8001004 <HAL_ETH_IRQHandler+0x180>)
 8000fe6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000fea:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f000 f815 	bl	800101c <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	00010040 	.word	0x00010040
 8001000:	007e2000 	.word	0x007e2000
 8001004:	40013c00 	.word	0x40013c00

08001008 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001010:	bf00      	nop
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001024:	bf00      	nop
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 800103e:	4618      	mov	r0, r3
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
	...

0800104c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800104c:	b480      	push	{r7}
 800104e:	b089      	sub	sp, #36	; 0x24
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001056:	2300      	movs	r3, #0
 8001058:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800105a:	2300      	movs	r3, #0
 800105c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800105e:	2300      	movs	r3, #0
 8001060:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001062:	2300      	movs	r3, #0
 8001064:	61fb      	str	r3, [r7, #28]
 8001066:	e177      	b.n	8001358 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001068:	2201      	movs	r2, #1
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	697a      	ldr	r2, [r7, #20]
 8001078:	4013      	ands	r3, r2
 800107a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	429a      	cmp	r2, r3
 8001082:	f040 8166 	bne.w	8001352 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f003 0303 	and.w	r3, r3, #3
 800108e:	2b01      	cmp	r3, #1
 8001090:	d005      	beq.n	800109e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800109a:	2b02      	cmp	r3, #2
 800109c:	d130      	bne.n	8001100 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	2203      	movs	r2, #3
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	43db      	mvns	r3, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4013      	ands	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	68da      	ldr	r2, [r3, #12]
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010d4:	2201      	movs	r2, #1
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	43db      	mvns	r3, r3
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	4013      	ands	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	091b      	lsrs	r3, r3, #4
 80010ea:	f003 0201 	and.w	r2, r3, #1
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f003 0303 	and.w	r3, r3, #3
 8001108:	2b03      	cmp	r3, #3
 800110a:	d017      	beq.n	800113c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	2203      	movs	r2, #3
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	43db      	mvns	r3, r3
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	4013      	ands	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	689a      	ldr	r2, [r3, #8]
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4313      	orrs	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f003 0303 	and.w	r3, r3, #3
 8001144:	2b02      	cmp	r3, #2
 8001146:	d123      	bne.n	8001190 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	08da      	lsrs	r2, r3, #3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3208      	adds	r2, #8
 8001150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001154:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	f003 0307 	and.w	r3, r3, #7
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	220f      	movs	r2, #15
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	43db      	mvns	r3, r3
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	4013      	ands	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	691a      	ldr	r2, [r3, #16]
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	f003 0307 	and.w	r3, r3, #7
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	4313      	orrs	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	08da      	lsrs	r2, r3, #3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	3208      	adds	r2, #8
 800118a:	69b9      	ldr	r1, [r7, #24]
 800118c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	2203      	movs	r2, #3
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	43db      	mvns	r3, r3
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4013      	ands	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f003 0203 	and.w	r2, r3, #3
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	f000 80c0 	beq.w	8001352 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	4b66      	ldr	r3, [pc, #408]	; (8001370 <HAL_GPIO_Init+0x324>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011da:	4a65      	ldr	r2, [pc, #404]	; (8001370 <HAL_GPIO_Init+0x324>)
 80011dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011e0:	6453      	str	r3, [r2, #68]	; 0x44
 80011e2:	4b63      	ldr	r3, [pc, #396]	; (8001370 <HAL_GPIO_Init+0x324>)
 80011e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011ee:	4a61      	ldr	r2, [pc, #388]	; (8001374 <HAL_GPIO_Init+0x328>)
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	089b      	lsrs	r3, r3, #2
 80011f4:	3302      	adds	r3, #2
 80011f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	f003 0303 	and.w	r3, r3, #3
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	220f      	movs	r2, #15
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	43db      	mvns	r3, r3
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	4013      	ands	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a58      	ldr	r2, [pc, #352]	; (8001378 <HAL_GPIO_Init+0x32c>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d037      	beq.n	800128a <HAL_GPIO_Init+0x23e>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a57      	ldr	r2, [pc, #348]	; (800137c <HAL_GPIO_Init+0x330>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d031      	beq.n	8001286 <HAL_GPIO_Init+0x23a>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a56      	ldr	r2, [pc, #344]	; (8001380 <HAL_GPIO_Init+0x334>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d02b      	beq.n	8001282 <HAL_GPIO_Init+0x236>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a55      	ldr	r2, [pc, #340]	; (8001384 <HAL_GPIO_Init+0x338>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d025      	beq.n	800127e <HAL_GPIO_Init+0x232>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a54      	ldr	r2, [pc, #336]	; (8001388 <HAL_GPIO_Init+0x33c>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d01f      	beq.n	800127a <HAL_GPIO_Init+0x22e>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a53      	ldr	r2, [pc, #332]	; (800138c <HAL_GPIO_Init+0x340>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d019      	beq.n	8001276 <HAL_GPIO_Init+0x22a>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a52      	ldr	r2, [pc, #328]	; (8001390 <HAL_GPIO_Init+0x344>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d013      	beq.n	8001272 <HAL_GPIO_Init+0x226>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a51      	ldr	r2, [pc, #324]	; (8001394 <HAL_GPIO_Init+0x348>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d00d      	beq.n	800126e <HAL_GPIO_Init+0x222>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a50      	ldr	r2, [pc, #320]	; (8001398 <HAL_GPIO_Init+0x34c>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d007      	beq.n	800126a <HAL_GPIO_Init+0x21e>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a4f      	ldr	r2, [pc, #316]	; (800139c <HAL_GPIO_Init+0x350>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d101      	bne.n	8001266 <HAL_GPIO_Init+0x21a>
 8001262:	2309      	movs	r3, #9
 8001264:	e012      	b.n	800128c <HAL_GPIO_Init+0x240>
 8001266:	230a      	movs	r3, #10
 8001268:	e010      	b.n	800128c <HAL_GPIO_Init+0x240>
 800126a:	2308      	movs	r3, #8
 800126c:	e00e      	b.n	800128c <HAL_GPIO_Init+0x240>
 800126e:	2307      	movs	r3, #7
 8001270:	e00c      	b.n	800128c <HAL_GPIO_Init+0x240>
 8001272:	2306      	movs	r3, #6
 8001274:	e00a      	b.n	800128c <HAL_GPIO_Init+0x240>
 8001276:	2305      	movs	r3, #5
 8001278:	e008      	b.n	800128c <HAL_GPIO_Init+0x240>
 800127a:	2304      	movs	r3, #4
 800127c:	e006      	b.n	800128c <HAL_GPIO_Init+0x240>
 800127e:	2303      	movs	r3, #3
 8001280:	e004      	b.n	800128c <HAL_GPIO_Init+0x240>
 8001282:	2302      	movs	r3, #2
 8001284:	e002      	b.n	800128c <HAL_GPIO_Init+0x240>
 8001286:	2301      	movs	r3, #1
 8001288:	e000      	b.n	800128c <HAL_GPIO_Init+0x240>
 800128a:	2300      	movs	r3, #0
 800128c:	69fa      	ldr	r2, [r7, #28]
 800128e:	f002 0203 	and.w	r2, r2, #3
 8001292:	0092      	lsls	r2, r2, #2
 8001294:	4093      	lsls	r3, r2
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	4313      	orrs	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800129c:	4935      	ldr	r1, [pc, #212]	; (8001374 <HAL_GPIO_Init+0x328>)
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	089b      	lsrs	r3, r3, #2
 80012a2:	3302      	adds	r3, #2
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012aa:	4b3d      	ldr	r3, [pc, #244]	; (80013a0 <HAL_GPIO_Init+0x354>)
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	43db      	mvns	r3, r3
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	4013      	ands	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d003      	beq.n	80012ce <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012ce:	4a34      	ldr	r2, [pc, #208]	; (80013a0 <HAL_GPIO_Init+0x354>)
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012d4:	4b32      	ldr	r3, [pc, #200]	; (80013a0 <HAL_GPIO_Init+0x354>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	43db      	mvns	r3, r3
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	4013      	ands	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d003      	beq.n	80012f8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012f8:	4a29      	ldr	r2, [pc, #164]	; (80013a0 <HAL_GPIO_Init+0x354>)
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012fe:	4b28      	ldr	r3, [pc, #160]	; (80013a0 <HAL_GPIO_Init+0x354>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	43db      	mvns	r3, r3
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	4013      	ands	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d003      	beq.n	8001322 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	4313      	orrs	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001322:	4a1f      	ldr	r2, [pc, #124]	; (80013a0 <HAL_GPIO_Init+0x354>)
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001328:	4b1d      	ldr	r3, [pc, #116]	; (80013a0 <HAL_GPIO_Init+0x354>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	43db      	mvns	r3, r3
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	4013      	ands	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d003      	beq.n	800134c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	4313      	orrs	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800134c:	4a14      	ldr	r2, [pc, #80]	; (80013a0 <HAL_GPIO_Init+0x354>)
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	3301      	adds	r3, #1
 8001356:	61fb      	str	r3, [r7, #28]
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	2b0f      	cmp	r3, #15
 800135c:	f67f ae84 	bls.w	8001068 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001360:	bf00      	nop
 8001362:	bf00      	nop
 8001364:	3724      	adds	r7, #36	; 0x24
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	40023800 	.word	0x40023800
 8001374:	40013800 	.word	0x40013800
 8001378:	40020000 	.word	0x40020000
 800137c:	40020400 	.word	0x40020400
 8001380:	40020800 	.word	0x40020800
 8001384:	40020c00 	.word	0x40020c00
 8001388:	40021000 	.word	0x40021000
 800138c:	40021400 	.word	0x40021400
 8001390:	40021800 	.word	0x40021800
 8001394:	40021c00 	.word	0x40021c00
 8001398:	40022000 	.word	0x40022000
 800139c:	40022400 	.word	0x40022400
 80013a0:	40013c00 	.word	0x40013c00

080013a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	460b      	mov	r3, r1
 80013ae:	807b      	strh	r3, [r7, #2]
 80013b0:	4613      	mov	r3, r2
 80013b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013b4:	787b      	ldrb	r3, [r7, #1]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d003      	beq.n	80013c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013ba:	887a      	ldrh	r2, [r7, #2]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013c0:	e003      	b.n	80013ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013c2:	887b      	ldrh	r3, [r7, #2]
 80013c4:	041a      	lsls	r2, r3, #16
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	619a      	str	r2, [r3, #24]
}
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr

080013d6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013d6:	b480      	push	{r7}
 80013d8:	b085      	sub	sp, #20
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
 80013de:	460b      	mov	r3, r1
 80013e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	695b      	ldr	r3, [r3, #20]
 80013e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013e8:	887a      	ldrh	r2, [r7, #2]
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	4013      	ands	r3, r2
 80013ee:	041a      	lsls	r2, r3, #16
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	43d9      	mvns	r1, r3
 80013f4:	887b      	ldrh	r3, [r7, #2]
 80013f6:	400b      	ands	r3, r1
 80013f8:	431a      	orrs	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	619a      	str	r2, [r3, #24]
}
 80013fe:	bf00      	nop
 8001400:	3714      	adds	r7, #20
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr

0800140a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	b086      	sub	sp, #24
 800140e:	af02      	add	r7, sp, #8
 8001410:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d101      	bne.n	800141c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e101      	b.n	8001620 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8001428:	b2db      	uxtb	r3, r3
 800142a:	2b00      	cmp	r3, #0
 800142c:	d106      	bne.n	800143c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2200      	movs	r2, #0
 8001432:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f7ff faa0 	bl	800097c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2203      	movs	r2, #3
 8001440:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800144a:	d102      	bne.n	8001452 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2200      	movs	r2, #0
 8001450:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4618      	mov	r0, r3
 8001458:	f001 fb7a 	bl	8002b50 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6818      	ldr	r0, [r3, #0]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	7c1a      	ldrb	r2, [r3, #16]
 8001464:	f88d 2000 	strb.w	r2, [sp]
 8001468:	3304      	adds	r3, #4
 800146a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800146c:	f001 fb0c 	bl	8002a88 <USB_CoreInit>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d005      	beq.n	8001482 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2202      	movs	r2, #2
 800147a:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e0ce      	b.n	8001620 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2100      	movs	r1, #0
 8001488:	4618      	mov	r0, r3
 800148a:	f001 fb72 	bl	8002b72 <USB_SetCurrentMode>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d005      	beq.n	80014a0 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2202      	movs	r2, #2
 8001498:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e0bf      	b.n	8001620 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014a0:	2300      	movs	r3, #0
 80014a2:	73fb      	strb	r3, [r7, #15]
 80014a4:	e04a      	b.n	800153c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80014a6:	7bfa      	ldrb	r2, [r7, #15]
 80014a8:	6879      	ldr	r1, [r7, #4]
 80014aa:	4613      	mov	r3, r2
 80014ac:	00db      	lsls	r3, r3, #3
 80014ae:	4413      	add	r3, r2
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	440b      	add	r3, r1
 80014b4:	3315      	adds	r3, #21
 80014b6:	2201      	movs	r2, #1
 80014b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80014ba:	7bfa      	ldrb	r2, [r7, #15]
 80014bc:	6879      	ldr	r1, [r7, #4]
 80014be:	4613      	mov	r3, r2
 80014c0:	00db      	lsls	r3, r3, #3
 80014c2:	4413      	add	r3, r2
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	440b      	add	r3, r1
 80014c8:	3314      	adds	r3, #20
 80014ca:	7bfa      	ldrb	r2, [r7, #15]
 80014cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80014ce:	7bfa      	ldrb	r2, [r7, #15]
 80014d0:	7bfb      	ldrb	r3, [r7, #15]
 80014d2:	b298      	uxth	r0, r3
 80014d4:	6879      	ldr	r1, [r7, #4]
 80014d6:	4613      	mov	r3, r2
 80014d8:	00db      	lsls	r3, r3, #3
 80014da:	4413      	add	r3, r2
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	440b      	add	r3, r1
 80014e0:	332e      	adds	r3, #46	; 0x2e
 80014e2:	4602      	mov	r2, r0
 80014e4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80014e6:	7bfa      	ldrb	r2, [r7, #15]
 80014e8:	6879      	ldr	r1, [r7, #4]
 80014ea:	4613      	mov	r3, r2
 80014ec:	00db      	lsls	r3, r3, #3
 80014ee:	4413      	add	r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	440b      	add	r3, r1
 80014f4:	3318      	adds	r3, #24
 80014f6:	2200      	movs	r2, #0
 80014f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80014fa:	7bfa      	ldrb	r2, [r7, #15]
 80014fc:	6879      	ldr	r1, [r7, #4]
 80014fe:	4613      	mov	r3, r2
 8001500:	00db      	lsls	r3, r3, #3
 8001502:	4413      	add	r3, r2
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	440b      	add	r3, r1
 8001508:	331c      	adds	r3, #28
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800150e:	7bfa      	ldrb	r2, [r7, #15]
 8001510:	6879      	ldr	r1, [r7, #4]
 8001512:	4613      	mov	r3, r2
 8001514:	00db      	lsls	r3, r3, #3
 8001516:	4413      	add	r3, r2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	440b      	add	r3, r1
 800151c:	3320      	adds	r3, #32
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001522:	7bfa      	ldrb	r2, [r7, #15]
 8001524:	6879      	ldr	r1, [r7, #4]
 8001526:	4613      	mov	r3, r2
 8001528:	00db      	lsls	r3, r3, #3
 800152a:	4413      	add	r3, r2
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	440b      	add	r3, r1
 8001530:	3324      	adds	r3, #36	; 0x24
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001536:	7bfb      	ldrb	r3, [r7, #15]
 8001538:	3301      	adds	r3, #1
 800153a:	73fb      	strb	r3, [r7, #15]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	791b      	ldrb	r3, [r3, #4]
 8001540:	7bfa      	ldrb	r2, [r7, #15]
 8001542:	429a      	cmp	r2, r3
 8001544:	d3af      	bcc.n	80014a6 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001546:	2300      	movs	r3, #0
 8001548:	73fb      	strb	r3, [r7, #15]
 800154a:	e044      	b.n	80015d6 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800154c:	7bfa      	ldrb	r2, [r7, #15]
 800154e:	6879      	ldr	r1, [r7, #4]
 8001550:	4613      	mov	r3, r2
 8001552:	00db      	lsls	r3, r3, #3
 8001554:	4413      	add	r3, r2
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	440b      	add	r3, r1
 800155a:	f203 2355 	addw	r3, r3, #597	; 0x255
 800155e:	2200      	movs	r2, #0
 8001560:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001562:	7bfa      	ldrb	r2, [r7, #15]
 8001564:	6879      	ldr	r1, [r7, #4]
 8001566:	4613      	mov	r3, r2
 8001568:	00db      	lsls	r3, r3, #3
 800156a:	4413      	add	r3, r2
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	440b      	add	r3, r1
 8001570:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8001574:	7bfa      	ldrb	r2, [r7, #15]
 8001576:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001578:	7bfa      	ldrb	r2, [r7, #15]
 800157a:	6879      	ldr	r1, [r7, #4]
 800157c:	4613      	mov	r3, r2
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	4413      	add	r3, r2
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	440b      	add	r3, r1
 8001586:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800158a:	2200      	movs	r2, #0
 800158c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800158e:	7bfa      	ldrb	r2, [r7, #15]
 8001590:	6879      	ldr	r1, [r7, #4]
 8001592:	4613      	mov	r3, r2
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	4413      	add	r3, r2
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	440b      	add	r3, r1
 800159c:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80015a4:	7bfa      	ldrb	r2, [r7, #15]
 80015a6:	6879      	ldr	r1, [r7, #4]
 80015a8:	4613      	mov	r3, r2
 80015aa:	00db      	lsls	r3, r3, #3
 80015ac:	4413      	add	r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	440b      	add	r3, r1
 80015b2:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80015ba:	7bfa      	ldrb	r2, [r7, #15]
 80015bc:	6879      	ldr	r1, [r7, #4]
 80015be:	4613      	mov	r3, r2
 80015c0:	00db      	lsls	r3, r3, #3
 80015c2:	4413      	add	r3, r2
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	440b      	add	r3, r1
 80015c8:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015d0:	7bfb      	ldrb	r3, [r7, #15]
 80015d2:	3301      	adds	r3, #1
 80015d4:	73fb      	strb	r3, [r7, #15]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	791b      	ldrb	r3, [r3, #4]
 80015da:	7bfa      	ldrb	r2, [r7, #15]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d3b5      	bcc.n	800154c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6818      	ldr	r0, [r3, #0]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	7c1a      	ldrb	r2, [r3, #16]
 80015e8:	f88d 2000 	strb.w	r2, [sp]
 80015ec:	3304      	adds	r3, #4
 80015ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015f0:	f001 fb0c 	bl	8002c0c <USB_DevInit>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d005      	beq.n	8001606 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2202      	movs	r2, #2
 80015fe:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e00c      	b.n	8001620 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2200      	movs	r2, #0
 800160a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2201      	movs	r2, #1
 8001610:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4618      	mov	r0, r3
 800161a:	f001 fcd4 	bl	8002fc6 <USB_DevDisconnect>

  return HAL_OK;
 800161e:	2300      	movs	r3, #0
}
 8001620:	4618      	mov	r0, r3
 8001622:	3710      	adds	r7, #16
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d101      	bne.n	800163a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e267      	b.n	8001b0a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	2b00      	cmp	r3, #0
 8001644:	d075      	beq.n	8001732 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001646:	4b88      	ldr	r3, [pc, #544]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	f003 030c 	and.w	r3, r3, #12
 800164e:	2b04      	cmp	r3, #4
 8001650:	d00c      	beq.n	800166c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001652:	4b85      	ldr	r3, [pc, #532]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800165a:	2b08      	cmp	r3, #8
 800165c:	d112      	bne.n	8001684 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800165e:	4b82      	ldr	r3, [pc, #520]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001666:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800166a:	d10b      	bne.n	8001684 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800166c:	4b7e      	ldr	r3, [pc, #504]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d05b      	beq.n	8001730 <HAL_RCC_OscConfig+0x108>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d157      	bne.n	8001730 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e242      	b.n	8001b0a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800168c:	d106      	bne.n	800169c <HAL_RCC_OscConfig+0x74>
 800168e:	4b76      	ldr	r3, [pc, #472]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a75      	ldr	r2, [pc, #468]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 8001694:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001698:	6013      	str	r3, [r2, #0]
 800169a:	e01d      	b.n	80016d8 <HAL_RCC_OscConfig+0xb0>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016a4:	d10c      	bne.n	80016c0 <HAL_RCC_OscConfig+0x98>
 80016a6:	4b70      	ldr	r3, [pc, #448]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a6f      	ldr	r2, [pc, #444]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 80016ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016b0:	6013      	str	r3, [r2, #0]
 80016b2:	4b6d      	ldr	r3, [pc, #436]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a6c      	ldr	r2, [pc, #432]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 80016b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016bc:	6013      	str	r3, [r2, #0]
 80016be:	e00b      	b.n	80016d8 <HAL_RCC_OscConfig+0xb0>
 80016c0:	4b69      	ldr	r3, [pc, #420]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a68      	ldr	r2, [pc, #416]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 80016c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016ca:	6013      	str	r3, [r2, #0]
 80016cc:	4b66      	ldr	r3, [pc, #408]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a65      	ldr	r2, [pc, #404]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 80016d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d013      	beq.n	8001708 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e0:	f7ff fabe 	bl	8000c60 <HAL_GetTick>
 80016e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016e6:	e008      	b.n	80016fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016e8:	f7ff faba 	bl	8000c60 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b64      	cmp	r3, #100	; 0x64
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e207      	b.n	8001b0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016fa:	4b5b      	ldr	r3, [pc, #364]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d0f0      	beq.n	80016e8 <HAL_RCC_OscConfig+0xc0>
 8001706:	e014      	b.n	8001732 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001708:	f7ff faaa 	bl	8000c60 <HAL_GetTick>
 800170c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800170e:	e008      	b.n	8001722 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001710:	f7ff faa6 	bl	8000c60 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	2b64      	cmp	r3, #100	; 0x64
 800171c:	d901      	bls.n	8001722 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e1f3      	b.n	8001b0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001722:	4b51      	ldr	r3, [pc, #324]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d1f0      	bne.n	8001710 <HAL_RCC_OscConfig+0xe8>
 800172e:	e000      	b.n	8001732 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001730:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d063      	beq.n	8001806 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800173e:	4b4a      	ldr	r3, [pc, #296]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	f003 030c 	and.w	r3, r3, #12
 8001746:	2b00      	cmp	r3, #0
 8001748:	d00b      	beq.n	8001762 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800174a:	4b47      	ldr	r3, [pc, #284]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001752:	2b08      	cmp	r3, #8
 8001754:	d11c      	bne.n	8001790 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001756:	4b44      	ldr	r3, [pc, #272]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d116      	bne.n	8001790 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001762:	4b41      	ldr	r3, [pc, #260]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	2b00      	cmp	r3, #0
 800176c:	d005      	beq.n	800177a <HAL_RCC_OscConfig+0x152>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	68db      	ldr	r3, [r3, #12]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d001      	beq.n	800177a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e1c7      	b.n	8001b0a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800177a:	4b3b      	ldr	r3, [pc, #236]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	691b      	ldr	r3, [r3, #16]
 8001786:	00db      	lsls	r3, r3, #3
 8001788:	4937      	ldr	r1, [pc, #220]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 800178a:	4313      	orrs	r3, r2
 800178c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800178e:	e03a      	b.n	8001806 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d020      	beq.n	80017da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001798:	4b34      	ldr	r3, [pc, #208]	; (800186c <HAL_RCC_OscConfig+0x244>)
 800179a:	2201      	movs	r2, #1
 800179c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800179e:	f7ff fa5f 	bl	8000c60 <HAL_GetTick>
 80017a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017a4:	e008      	b.n	80017b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017a6:	f7ff fa5b 	bl	8000c60 <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d901      	bls.n	80017b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e1a8      	b.n	8001b0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017b8:	4b2b      	ldr	r3, [pc, #172]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0302 	and.w	r3, r3, #2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d0f0      	beq.n	80017a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017c4:	4b28      	ldr	r3, [pc, #160]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	691b      	ldr	r3, [r3, #16]
 80017d0:	00db      	lsls	r3, r3, #3
 80017d2:	4925      	ldr	r1, [pc, #148]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 80017d4:	4313      	orrs	r3, r2
 80017d6:	600b      	str	r3, [r1, #0]
 80017d8:	e015      	b.n	8001806 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017da:	4b24      	ldr	r3, [pc, #144]	; (800186c <HAL_RCC_OscConfig+0x244>)
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e0:	f7ff fa3e 	bl	8000c60 <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017e6:	e008      	b.n	80017fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017e8:	f7ff fa3a 	bl	8000c60 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e187      	b.n	8001b0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017fa:	4b1b      	ldr	r3, [pc, #108]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1f0      	bne.n	80017e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0308 	and.w	r3, r3, #8
 800180e:	2b00      	cmp	r3, #0
 8001810:	d036      	beq.n	8001880 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	695b      	ldr	r3, [r3, #20]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d016      	beq.n	8001848 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800181a:	4b15      	ldr	r3, [pc, #84]	; (8001870 <HAL_RCC_OscConfig+0x248>)
 800181c:	2201      	movs	r2, #1
 800181e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001820:	f7ff fa1e 	bl	8000c60 <HAL_GetTick>
 8001824:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001826:	e008      	b.n	800183a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001828:	f7ff fa1a 	bl	8000c60 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b02      	cmp	r3, #2
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e167      	b.n	8001b0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800183a:	4b0b      	ldr	r3, [pc, #44]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 800183c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	2b00      	cmp	r3, #0
 8001844:	d0f0      	beq.n	8001828 <HAL_RCC_OscConfig+0x200>
 8001846:	e01b      	b.n	8001880 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001848:	4b09      	ldr	r3, [pc, #36]	; (8001870 <HAL_RCC_OscConfig+0x248>)
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800184e:	f7ff fa07 	bl	8000c60 <HAL_GetTick>
 8001852:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001854:	e00e      	b.n	8001874 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001856:	f7ff fa03 	bl	8000c60 <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	2b02      	cmp	r3, #2
 8001862:	d907      	bls.n	8001874 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e150      	b.n	8001b0a <HAL_RCC_OscConfig+0x4e2>
 8001868:	40023800 	.word	0x40023800
 800186c:	42470000 	.word	0x42470000
 8001870:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001874:	4b88      	ldr	r3, [pc, #544]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 8001876:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001878:	f003 0302 	and.w	r3, r3, #2
 800187c:	2b00      	cmp	r3, #0
 800187e:	d1ea      	bne.n	8001856 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0304 	and.w	r3, r3, #4
 8001888:	2b00      	cmp	r3, #0
 800188a:	f000 8097 	beq.w	80019bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800188e:	2300      	movs	r3, #0
 8001890:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001892:	4b81      	ldr	r3, [pc, #516]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d10f      	bne.n	80018be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	60bb      	str	r3, [r7, #8]
 80018a2:	4b7d      	ldr	r3, [pc, #500]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	4a7c      	ldr	r2, [pc, #496]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 80018a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018ac:	6413      	str	r3, [r2, #64]	; 0x40
 80018ae:	4b7a      	ldr	r3, [pc, #488]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b6:	60bb      	str	r3, [r7, #8]
 80018b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018ba:	2301      	movs	r3, #1
 80018bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018be:	4b77      	ldr	r3, [pc, #476]	; (8001a9c <HAL_RCC_OscConfig+0x474>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d118      	bne.n	80018fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018ca:	4b74      	ldr	r3, [pc, #464]	; (8001a9c <HAL_RCC_OscConfig+0x474>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a73      	ldr	r2, [pc, #460]	; (8001a9c <HAL_RCC_OscConfig+0x474>)
 80018d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018d6:	f7ff f9c3 	bl	8000c60 <HAL_GetTick>
 80018da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018dc:	e008      	b.n	80018f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018de:	f7ff f9bf 	bl	8000c60 <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d901      	bls.n	80018f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e10c      	b.n	8001b0a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018f0:	4b6a      	ldr	r3, [pc, #424]	; (8001a9c <HAL_RCC_OscConfig+0x474>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d0f0      	beq.n	80018de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	2b01      	cmp	r3, #1
 8001902:	d106      	bne.n	8001912 <HAL_RCC_OscConfig+0x2ea>
 8001904:	4b64      	ldr	r3, [pc, #400]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 8001906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001908:	4a63      	ldr	r2, [pc, #396]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 800190a:	f043 0301 	orr.w	r3, r3, #1
 800190e:	6713      	str	r3, [r2, #112]	; 0x70
 8001910:	e01c      	b.n	800194c <HAL_RCC_OscConfig+0x324>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	2b05      	cmp	r3, #5
 8001918:	d10c      	bne.n	8001934 <HAL_RCC_OscConfig+0x30c>
 800191a:	4b5f      	ldr	r3, [pc, #380]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 800191c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800191e:	4a5e      	ldr	r2, [pc, #376]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 8001920:	f043 0304 	orr.w	r3, r3, #4
 8001924:	6713      	str	r3, [r2, #112]	; 0x70
 8001926:	4b5c      	ldr	r3, [pc, #368]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 8001928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800192a:	4a5b      	ldr	r2, [pc, #364]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	6713      	str	r3, [r2, #112]	; 0x70
 8001932:	e00b      	b.n	800194c <HAL_RCC_OscConfig+0x324>
 8001934:	4b58      	ldr	r3, [pc, #352]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 8001936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001938:	4a57      	ldr	r2, [pc, #348]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 800193a:	f023 0301 	bic.w	r3, r3, #1
 800193e:	6713      	str	r3, [r2, #112]	; 0x70
 8001940:	4b55      	ldr	r3, [pc, #340]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 8001942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001944:	4a54      	ldr	r2, [pc, #336]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 8001946:	f023 0304 	bic.w	r3, r3, #4
 800194a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d015      	beq.n	8001980 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001954:	f7ff f984 	bl	8000c60 <HAL_GetTick>
 8001958:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800195a:	e00a      	b.n	8001972 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800195c:	f7ff f980 	bl	8000c60 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	f241 3288 	movw	r2, #5000	; 0x1388
 800196a:	4293      	cmp	r3, r2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e0cb      	b.n	8001b0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001972:	4b49      	ldr	r3, [pc, #292]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 8001974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	2b00      	cmp	r3, #0
 800197c:	d0ee      	beq.n	800195c <HAL_RCC_OscConfig+0x334>
 800197e:	e014      	b.n	80019aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001980:	f7ff f96e 	bl	8000c60 <HAL_GetTick>
 8001984:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001986:	e00a      	b.n	800199e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001988:	f7ff f96a 	bl	8000c60 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	f241 3288 	movw	r2, #5000	; 0x1388
 8001996:	4293      	cmp	r3, r2
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e0b5      	b.n	8001b0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800199e:	4b3e      	ldr	r3, [pc, #248]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 80019a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d1ee      	bne.n	8001988 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019aa:	7dfb      	ldrb	r3, [r7, #23]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d105      	bne.n	80019bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019b0:	4b39      	ldr	r3, [pc, #228]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 80019b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b4:	4a38      	ldr	r2, [pc, #224]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 80019b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	f000 80a1 	beq.w	8001b08 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019c6:	4b34      	ldr	r3, [pc, #208]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f003 030c 	and.w	r3, r3, #12
 80019ce:	2b08      	cmp	r3, #8
 80019d0:	d05c      	beq.n	8001a8c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	699b      	ldr	r3, [r3, #24]
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d141      	bne.n	8001a5e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019da:	4b31      	ldr	r3, [pc, #196]	; (8001aa0 <HAL_RCC_OscConfig+0x478>)
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e0:	f7ff f93e 	bl	8000c60 <HAL_GetTick>
 80019e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019e6:	e008      	b.n	80019fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019e8:	f7ff f93a 	bl	8000c60 <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e087      	b.n	8001b0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019fa:	4b27      	ldr	r3, [pc, #156]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1f0      	bne.n	80019e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	69da      	ldr	r2, [r3, #28]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6a1b      	ldr	r3, [r3, #32]
 8001a0e:	431a      	orrs	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a14:	019b      	lsls	r3, r3, #6
 8001a16:	431a      	orrs	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a1c:	085b      	lsrs	r3, r3, #1
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	041b      	lsls	r3, r3, #16
 8001a22:	431a      	orrs	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a28:	061b      	lsls	r3, r3, #24
 8001a2a:	491b      	ldr	r1, [pc, #108]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a30:	4b1b      	ldr	r3, [pc, #108]	; (8001aa0 <HAL_RCC_OscConfig+0x478>)
 8001a32:	2201      	movs	r2, #1
 8001a34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a36:	f7ff f913 	bl	8000c60 <HAL_GetTick>
 8001a3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a3c:	e008      	b.n	8001a50 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a3e:	f7ff f90f 	bl	8000c60 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e05c      	b.n	8001b0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a50:	4b11      	ldr	r3, [pc, #68]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d0f0      	beq.n	8001a3e <HAL_RCC_OscConfig+0x416>
 8001a5c:	e054      	b.n	8001b08 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a5e:	4b10      	ldr	r3, [pc, #64]	; (8001aa0 <HAL_RCC_OscConfig+0x478>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a64:	f7ff f8fc 	bl	8000c60 <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a6a:	e008      	b.n	8001a7e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a6c:	f7ff f8f8 	bl	8000c60 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e045      	b.n	8001b0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a7e:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d1f0      	bne.n	8001a6c <HAL_RCC_OscConfig+0x444>
 8001a8a:	e03d      	b.n	8001b08 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d107      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e038      	b.n	8001b0a <HAL_RCC_OscConfig+0x4e2>
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	40007000 	.word	0x40007000
 8001aa0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001aa4:	4b1b      	ldr	r3, [pc, #108]	; (8001b14 <HAL_RCC_OscConfig+0x4ec>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	699b      	ldr	r3, [r3, #24]
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d028      	beq.n	8001b04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d121      	bne.n	8001b04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d11a      	bne.n	8001b04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ace:	68fa      	ldr	r2, [r7, #12]
 8001ad0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ada:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d111      	bne.n	8001b04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aea:	085b      	lsrs	r3, r3, #1
 8001aec:	3b01      	subs	r3, #1
 8001aee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d107      	bne.n	8001b04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001afe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d001      	beq.n	8001b08 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e000      	b.n	8001b0a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3718      	adds	r7, #24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	40023800 	.word	0x40023800

08001b18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d101      	bne.n	8001b2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e0cc      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b2c:	4b68      	ldr	r3, [pc, #416]	; (8001cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 030f 	and.w	r3, r3, #15
 8001b34:	683a      	ldr	r2, [r7, #0]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d90c      	bls.n	8001b54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b3a:	4b65      	ldr	r3, [pc, #404]	; (8001cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b3c:	683a      	ldr	r2, [r7, #0]
 8001b3e:	b2d2      	uxtb	r2, r2
 8001b40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b42:	4b63      	ldr	r3, [pc, #396]	; (8001cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 030f 	and.w	r3, r3, #15
 8001b4a:	683a      	ldr	r2, [r7, #0]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d001      	beq.n	8001b54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e0b8      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0302 	and.w	r3, r3, #2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d020      	beq.n	8001ba2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0304 	and.w	r3, r3, #4
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d005      	beq.n	8001b78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b6c:	4b59      	ldr	r3, [pc, #356]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	4a58      	ldr	r2, [pc, #352]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0308 	and.w	r3, r3, #8
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d005      	beq.n	8001b90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b84:	4b53      	ldr	r3, [pc, #332]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	4a52      	ldr	r2, [pc, #328]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b90:	4b50      	ldr	r3, [pc, #320]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	494d      	ldr	r1, [pc, #308]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d044      	beq.n	8001c38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d107      	bne.n	8001bc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bb6:	4b47      	ldr	r3, [pc, #284]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d119      	bne.n	8001bf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e07f      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d003      	beq.n	8001bd6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bd2:	2b03      	cmp	r3, #3
 8001bd4:	d107      	bne.n	8001be6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bd6:	4b3f      	ldr	r3, [pc, #252]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d109      	bne.n	8001bf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e06f      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001be6:	4b3b      	ldr	r3, [pc, #236]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d101      	bne.n	8001bf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e067      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bf6:	4b37      	ldr	r3, [pc, #220]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f023 0203 	bic.w	r2, r3, #3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	4934      	ldr	r1, [pc, #208]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c04:	4313      	orrs	r3, r2
 8001c06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c08:	f7ff f82a 	bl	8000c60 <HAL_GetTick>
 8001c0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c0e:	e00a      	b.n	8001c26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c10:	f7ff f826 	bl	8000c60 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e04f      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c26:	4b2b      	ldr	r3, [pc, #172]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f003 020c 	and.w	r2, r3, #12
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d1eb      	bne.n	8001c10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c38:	4b25      	ldr	r3, [pc, #148]	; (8001cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 030f 	and.w	r3, r3, #15
 8001c40:	683a      	ldr	r2, [r7, #0]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d20c      	bcs.n	8001c60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c46:	4b22      	ldr	r3, [pc, #136]	; (8001cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c48:	683a      	ldr	r2, [r7, #0]
 8001c4a:	b2d2      	uxtb	r2, r2
 8001c4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c4e:	4b20      	ldr	r3, [pc, #128]	; (8001cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 030f 	and.w	r3, r3, #15
 8001c56:	683a      	ldr	r2, [r7, #0]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d001      	beq.n	8001c60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e032      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0304 	and.w	r3, r3, #4
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d008      	beq.n	8001c7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c6c:	4b19      	ldr	r3, [pc, #100]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	4916      	ldr	r1, [pc, #88]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0308 	and.w	r3, r3, #8
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d009      	beq.n	8001c9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c8a:	4b12      	ldr	r3, [pc, #72]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	490e      	ldr	r1, [pc, #56]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c9e:	f000 f821 	bl	8001ce4 <HAL_RCC_GetSysClockFreq>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	4b0b      	ldr	r3, [pc, #44]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	091b      	lsrs	r3, r3, #4
 8001caa:	f003 030f 	and.w	r3, r3, #15
 8001cae:	490a      	ldr	r1, [pc, #40]	; (8001cd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001cb0:	5ccb      	ldrb	r3, [r1, r3]
 8001cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8001cb6:	4a09      	ldr	r2, [pc, #36]	; (8001cdc <HAL_RCC_ClockConfig+0x1c4>)
 8001cb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001cba:	4b09      	ldr	r3, [pc, #36]	; (8001ce0 <HAL_RCC_ClockConfig+0x1c8>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7fe feb6 	bl	8000a30 <HAL_InitTick>

  return HAL_OK;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40023c00 	.word	0x40023c00
 8001cd4:	40023800 	.word	0x40023800
 8001cd8:	08005eb8 	.word	0x08005eb8
 8001cdc:	20000000 	.word	0x20000000
 8001ce0:	20000004 	.word	0x20000004

08001ce4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ce4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ce8:	b094      	sub	sp, #80	; 0x50
 8001cea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001cec:	2300      	movs	r3, #0
 8001cee:	647b      	str	r3, [r7, #68]	; 0x44
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cfc:	4b79      	ldr	r3, [pc, #484]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f003 030c 	and.w	r3, r3, #12
 8001d04:	2b08      	cmp	r3, #8
 8001d06:	d00d      	beq.n	8001d24 <HAL_RCC_GetSysClockFreq+0x40>
 8001d08:	2b08      	cmp	r3, #8
 8001d0a:	f200 80e1 	bhi.w	8001ed0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d002      	beq.n	8001d18 <HAL_RCC_GetSysClockFreq+0x34>
 8001d12:	2b04      	cmp	r3, #4
 8001d14:	d003      	beq.n	8001d1e <HAL_RCC_GetSysClockFreq+0x3a>
 8001d16:	e0db      	b.n	8001ed0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d18:	4b73      	ldr	r3, [pc, #460]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d1a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001d1c:	e0db      	b.n	8001ed6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d1e:	4b73      	ldr	r3, [pc, #460]	; (8001eec <HAL_RCC_GetSysClockFreq+0x208>)
 8001d20:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d22:	e0d8      	b.n	8001ed6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d24:	4b6f      	ldr	r3, [pc, #444]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d2c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d2e:	4b6d      	ldr	r3, [pc, #436]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d063      	beq.n	8001e02 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d3a:	4b6a      	ldr	r3, [pc, #424]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	099b      	lsrs	r3, r3, #6
 8001d40:	2200      	movs	r2, #0
 8001d42:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d44:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d4c:	633b      	str	r3, [r7, #48]	; 0x30
 8001d4e:	2300      	movs	r3, #0
 8001d50:	637b      	str	r3, [r7, #52]	; 0x34
 8001d52:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001d56:	4622      	mov	r2, r4
 8001d58:	462b      	mov	r3, r5
 8001d5a:	f04f 0000 	mov.w	r0, #0
 8001d5e:	f04f 0100 	mov.w	r1, #0
 8001d62:	0159      	lsls	r1, r3, #5
 8001d64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d68:	0150      	lsls	r0, r2, #5
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	4621      	mov	r1, r4
 8001d70:	1a51      	subs	r1, r2, r1
 8001d72:	6139      	str	r1, [r7, #16]
 8001d74:	4629      	mov	r1, r5
 8001d76:	eb63 0301 	sbc.w	r3, r3, r1
 8001d7a:	617b      	str	r3, [r7, #20]
 8001d7c:	f04f 0200 	mov.w	r2, #0
 8001d80:	f04f 0300 	mov.w	r3, #0
 8001d84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d88:	4659      	mov	r1, fp
 8001d8a:	018b      	lsls	r3, r1, #6
 8001d8c:	4651      	mov	r1, sl
 8001d8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d92:	4651      	mov	r1, sl
 8001d94:	018a      	lsls	r2, r1, #6
 8001d96:	4651      	mov	r1, sl
 8001d98:	ebb2 0801 	subs.w	r8, r2, r1
 8001d9c:	4659      	mov	r1, fp
 8001d9e:	eb63 0901 	sbc.w	r9, r3, r1
 8001da2:	f04f 0200 	mov.w	r2, #0
 8001da6:	f04f 0300 	mov.w	r3, #0
 8001daa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001dae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001db2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001db6:	4690      	mov	r8, r2
 8001db8:	4699      	mov	r9, r3
 8001dba:	4623      	mov	r3, r4
 8001dbc:	eb18 0303 	adds.w	r3, r8, r3
 8001dc0:	60bb      	str	r3, [r7, #8]
 8001dc2:	462b      	mov	r3, r5
 8001dc4:	eb49 0303 	adc.w	r3, r9, r3
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	f04f 0200 	mov.w	r2, #0
 8001dce:	f04f 0300 	mov.w	r3, #0
 8001dd2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001dd6:	4629      	mov	r1, r5
 8001dd8:	024b      	lsls	r3, r1, #9
 8001dda:	4621      	mov	r1, r4
 8001ddc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001de0:	4621      	mov	r1, r4
 8001de2:	024a      	lsls	r2, r1, #9
 8001de4:	4610      	mov	r0, r2
 8001de6:	4619      	mov	r1, r3
 8001de8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dea:	2200      	movs	r2, #0
 8001dec:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001df0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001df4:	f7fe f9fc 	bl	80001f0 <__aeabi_uldivmod>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e00:	e058      	b.n	8001eb4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e02:	4b38      	ldr	r3, [pc, #224]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	099b      	lsrs	r3, r3, #6
 8001e08:	2200      	movs	r2, #0
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	4611      	mov	r1, r2
 8001e0e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001e12:	623b      	str	r3, [r7, #32]
 8001e14:	2300      	movs	r3, #0
 8001e16:	627b      	str	r3, [r7, #36]	; 0x24
 8001e18:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001e1c:	4642      	mov	r2, r8
 8001e1e:	464b      	mov	r3, r9
 8001e20:	f04f 0000 	mov.w	r0, #0
 8001e24:	f04f 0100 	mov.w	r1, #0
 8001e28:	0159      	lsls	r1, r3, #5
 8001e2a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e2e:	0150      	lsls	r0, r2, #5
 8001e30:	4602      	mov	r2, r0
 8001e32:	460b      	mov	r3, r1
 8001e34:	4641      	mov	r1, r8
 8001e36:	ebb2 0a01 	subs.w	sl, r2, r1
 8001e3a:	4649      	mov	r1, r9
 8001e3c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e40:	f04f 0200 	mov.w	r2, #0
 8001e44:	f04f 0300 	mov.w	r3, #0
 8001e48:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001e4c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001e50:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001e54:	ebb2 040a 	subs.w	r4, r2, sl
 8001e58:	eb63 050b 	sbc.w	r5, r3, fp
 8001e5c:	f04f 0200 	mov.w	r2, #0
 8001e60:	f04f 0300 	mov.w	r3, #0
 8001e64:	00eb      	lsls	r3, r5, #3
 8001e66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e6a:	00e2      	lsls	r2, r4, #3
 8001e6c:	4614      	mov	r4, r2
 8001e6e:	461d      	mov	r5, r3
 8001e70:	4643      	mov	r3, r8
 8001e72:	18e3      	adds	r3, r4, r3
 8001e74:	603b      	str	r3, [r7, #0]
 8001e76:	464b      	mov	r3, r9
 8001e78:	eb45 0303 	adc.w	r3, r5, r3
 8001e7c:	607b      	str	r3, [r7, #4]
 8001e7e:	f04f 0200 	mov.w	r2, #0
 8001e82:	f04f 0300 	mov.w	r3, #0
 8001e86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e8a:	4629      	mov	r1, r5
 8001e8c:	028b      	lsls	r3, r1, #10
 8001e8e:	4621      	mov	r1, r4
 8001e90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e94:	4621      	mov	r1, r4
 8001e96:	028a      	lsls	r2, r1, #10
 8001e98:	4610      	mov	r0, r2
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	61bb      	str	r3, [r7, #24]
 8001ea2:	61fa      	str	r2, [r7, #28]
 8001ea4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ea8:	f7fe f9a2 	bl	80001f0 <__aeabi_uldivmod>
 8001eac:	4602      	mov	r2, r0
 8001eae:	460b      	mov	r3, r1
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001eb4:	4b0b      	ldr	r3, [pc, #44]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	0c1b      	lsrs	r3, r3, #16
 8001eba:	f003 0303 	and.w	r3, r3, #3
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001ec4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001ec6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ecc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ece:	e002      	b.n	8001ed6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ed0:	4b05      	ldr	r3, [pc, #20]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ed2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ed4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ed6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3750      	adds	r7, #80	; 0x50
 8001edc:	46bd      	mov	sp, r7
 8001ede:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ee2:	bf00      	nop
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	00f42400 	.word	0x00f42400
 8001eec:	007a1200 	.word	0x007a1200

08001ef0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ef4:	4b03      	ldr	r3, [pc, #12]	; (8001f04 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	20000000 	.word	0x20000000

08001f08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f0c:	f7ff fff0 	bl	8001ef0 <HAL_RCC_GetHCLKFreq>
 8001f10:	4602      	mov	r2, r0
 8001f12:	4b05      	ldr	r3, [pc, #20]	; (8001f28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	0a9b      	lsrs	r3, r3, #10
 8001f18:	f003 0307 	and.w	r3, r3, #7
 8001f1c:	4903      	ldr	r1, [pc, #12]	; (8001f2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f1e:	5ccb      	ldrb	r3, [r1, r3]
 8001f20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	08005ec8 	.word	0x08005ec8

08001f30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f34:	f7ff ffdc 	bl	8001ef0 <HAL_RCC_GetHCLKFreq>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	4b05      	ldr	r3, [pc, #20]	; (8001f50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	0b5b      	lsrs	r3, r3, #13
 8001f40:	f003 0307 	and.w	r3, r3, #7
 8001f44:	4903      	ldr	r1, [pc, #12]	; (8001f54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f46:	5ccb      	ldrb	r3, [r1, r3]
 8001f48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40023800 	.word	0x40023800
 8001f54:	08005ec8 	.word	0x08005ec8

08001f58 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	220f      	movs	r2, #15
 8001f66:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001f68:	4b12      	ldr	r3, [pc, #72]	; (8001fb4 <HAL_RCC_GetClockConfig+0x5c>)
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f003 0203 	and.w	r2, r3, #3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001f74:	4b0f      	ldr	r3, [pc, #60]	; (8001fb4 <HAL_RCC_GetClockConfig+0x5c>)
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001f80:	4b0c      	ldr	r3, [pc, #48]	; (8001fb4 <HAL_RCC_GetClockConfig+0x5c>)
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001f8c:	4b09      	ldr	r3, [pc, #36]	; (8001fb4 <HAL_RCC_GetClockConfig+0x5c>)
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	08db      	lsrs	r3, r3, #3
 8001f92:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001f9a:	4b07      	ldr	r3, [pc, #28]	; (8001fb8 <HAL_RCC_GetClockConfig+0x60>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 020f 	and.w	r2, r3, #15
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	601a      	str	r2, [r3, #0]
}
 8001fa6:	bf00      	nop
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	40023800 	.word	0x40023800
 8001fb8:	40023c00 	.word	0x40023c00

08001fbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d101      	bne.n	8001fce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e041      	b.n	8002052 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d106      	bne.n	8001fe8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 f839 	bl	800205a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2202      	movs	r2, #2
 8001fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	3304      	adds	r3, #4
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4610      	mov	r0, r2
 8001ffc:	f000 f9c0 	bl	8002380 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800205a:	b480      	push	{r7}
 800205c:	b083      	sub	sp, #12
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002062:	bf00      	nop
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
	...

08002070 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800207e:	b2db      	uxtb	r3, r3
 8002080:	2b01      	cmp	r3, #1
 8002082:	d001      	beq.n	8002088 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e04e      	b.n	8002126 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2202      	movs	r2, #2
 800208c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	68da      	ldr	r2, [r3, #12]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f042 0201 	orr.w	r2, r2, #1
 800209e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a23      	ldr	r2, [pc, #140]	; (8002134 <HAL_TIM_Base_Start_IT+0xc4>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d022      	beq.n	80020f0 <HAL_TIM_Base_Start_IT+0x80>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020b2:	d01d      	beq.n	80020f0 <HAL_TIM_Base_Start_IT+0x80>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a1f      	ldr	r2, [pc, #124]	; (8002138 <HAL_TIM_Base_Start_IT+0xc8>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d018      	beq.n	80020f0 <HAL_TIM_Base_Start_IT+0x80>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a1e      	ldr	r2, [pc, #120]	; (800213c <HAL_TIM_Base_Start_IT+0xcc>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d013      	beq.n	80020f0 <HAL_TIM_Base_Start_IT+0x80>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a1c      	ldr	r2, [pc, #112]	; (8002140 <HAL_TIM_Base_Start_IT+0xd0>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d00e      	beq.n	80020f0 <HAL_TIM_Base_Start_IT+0x80>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a1b      	ldr	r2, [pc, #108]	; (8002144 <HAL_TIM_Base_Start_IT+0xd4>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d009      	beq.n	80020f0 <HAL_TIM_Base_Start_IT+0x80>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a19      	ldr	r2, [pc, #100]	; (8002148 <HAL_TIM_Base_Start_IT+0xd8>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d004      	beq.n	80020f0 <HAL_TIM_Base_Start_IT+0x80>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a18      	ldr	r2, [pc, #96]	; (800214c <HAL_TIM_Base_Start_IT+0xdc>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d111      	bne.n	8002114 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f003 0307 	and.w	r3, r3, #7
 80020fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2b06      	cmp	r3, #6
 8002100:	d010      	beq.n	8002124 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f042 0201 	orr.w	r2, r2, #1
 8002110:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002112:	e007      	b.n	8002124 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f042 0201 	orr.w	r2, r2, #1
 8002122:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3714      	adds	r7, #20
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	40010000 	.word	0x40010000
 8002138:	40000400 	.word	0x40000400
 800213c:	40000800 	.word	0x40000800
 8002140:	40000c00 	.word	0x40000c00
 8002144:	40010400 	.word	0x40010400
 8002148:	40014000 	.word	0x40014000
 800214c:	40001800 	.word	0x40001800

08002150 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d020      	beq.n	80021b4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	f003 0302 	and.w	r3, r3, #2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d01b      	beq.n	80021b4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f06f 0202 	mvn.w	r2, #2
 8002184:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2201      	movs	r2, #1
 800218a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	f003 0303 	and.w	r3, r3, #3
 8002196:	2b00      	cmp	r3, #0
 8002198:	d003      	beq.n	80021a2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f000 f8d2 	bl	8002344 <HAL_TIM_IC_CaptureCallback>
 80021a0:	e005      	b.n	80021ae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f000 f8c4 	bl	8002330 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f000 f8d5 	bl	8002358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	f003 0304 	and.w	r3, r3, #4
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d020      	beq.n	8002200 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	f003 0304 	and.w	r3, r3, #4
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d01b      	beq.n	8002200 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f06f 0204 	mvn.w	r2, #4
 80021d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2202      	movs	r2, #2
 80021d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d003      	beq.n	80021ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f000 f8ac 	bl	8002344 <HAL_TIM_IC_CaptureCallback>
 80021ec:	e005      	b.n	80021fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 f89e 	bl	8002330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f000 f8af 	bl	8002358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	f003 0308 	and.w	r3, r3, #8
 8002206:	2b00      	cmp	r3, #0
 8002208:	d020      	beq.n	800224c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f003 0308 	and.w	r3, r3, #8
 8002210:	2b00      	cmp	r3, #0
 8002212:	d01b      	beq.n	800224c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f06f 0208 	mvn.w	r2, #8
 800221c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2204      	movs	r2, #4
 8002222:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	69db      	ldr	r3, [r3, #28]
 800222a:	f003 0303 	and.w	r3, r3, #3
 800222e:	2b00      	cmp	r3, #0
 8002230:	d003      	beq.n	800223a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f000 f886 	bl	8002344 <HAL_TIM_IC_CaptureCallback>
 8002238:	e005      	b.n	8002246 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f000 f878 	bl	8002330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f000 f889 	bl	8002358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	f003 0310 	and.w	r3, r3, #16
 8002252:	2b00      	cmp	r3, #0
 8002254:	d020      	beq.n	8002298 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	f003 0310 	and.w	r3, r3, #16
 800225c:	2b00      	cmp	r3, #0
 800225e:	d01b      	beq.n	8002298 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f06f 0210 	mvn.w	r2, #16
 8002268:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2208      	movs	r2, #8
 800226e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	69db      	ldr	r3, [r3, #28]
 8002276:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800227a:	2b00      	cmp	r3, #0
 800227c:	d003      	beq.n	8002286 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f000 f860 	bl	8002344 <HAL_TIM_IC_CaptureCallback>
 8002284:	e005      	b.n	8002292 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 f852 	bl	8002330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f000 f863 	bl	8002358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	f003 0301 	and.w	r3, r3, #1
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d00c      	beq.n	80022bc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	f003 0301 	and.w	r3, r3, #1
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d007      	beq.n	80022bc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f06f 0201 	mvn.w	r2, #1
 80022b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f7fe fad4 	bl	8000864 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d00c      	beq.n	80022e0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d007      	beq.n	80022e0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80022d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 f906 	bl	80024ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d00c      	beq.n	8002304 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d007      	beq.n	8002304 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 f834 	bl	800236c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	f003 0320 	and.w	r3, r3, #32
 800230a:	2b00      	cmp	r3, #0
 800230c:	d00c      	beq.n	8002328 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f003 0320 	and.w	r3, r3, #32
 8002314:	2b00      	cmp	r3, #0
 8002316:	d007      	beq.n	8002328 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f06f 0220 	mvn.w	r2, #32
 8002320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 f8d8 	bl	80024d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002328:	bf00      	nop
 800232a:	3710      	adds	r7, #16
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002338:	bf00      	nop
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002360:	bf00      	nop
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4a46      	ldr	r2, [pc, #280]	; (80024ac <TIM_Base_SetConfig+0x12c>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d013      	beq.n	80023c0 <TIM_Base_SetConfig+0x40>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800239e:	d00f      	beq.n	80023c0 <TIM_Base_SetConfig+0x40>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4a43      	ldr	r2, [pc, #268]	; (80024b0 <TIM_Base_SetConfig+0x130>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d00b      	beq.n	80023c0 <TIM_Base_SetConfig+0x40>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	4a42      	ldr	r2, [pc, #264]	; (80024b4 <TIM_Base_SetConfig+0x134>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d007      	beq.n	80023c0 <TIM_Base_SetConfig+0x40>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	4a41      	ldr	r2, [pc, #260]	; (80024b8 <TIM_Base_SetConfig+0x138>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d003      	beq.n	80023c0 <TIM_Base_SetConfig+0x40>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	4a40      	ldr	r2, [pc, #256]	; (80024bc <TIM_Base_SetConfig+0x13c>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d108      	bne.n	80023d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	68fa      	ldr	r2, [r7, #12]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a35      	ldr	r2, [pc, #212]	; (80024ac <TIM_Base_SetConfig+0x12c>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d02b      	beq.n	8002432 <TIM_Base_SetConfig+0xb2>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023e0:	d027      	beq.n	8002432 <TIM_Base_SetConfig+0xb2>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a32      	ldr	r2, [pc, #200]	; (80024b0 <TIM_Base_SetConfig+0x130>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d023      	beq.n	8002432 <TIM_Base_SetConfig+0xb2>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a31      	ldr	r2, [pc, #196]	; (80024b4 <TIM_Base_SetConfig+0x134>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d01f      	beq.n	8002432 <TIM_Base_SetConfig+0xb2>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a30      	ldr	r2, [pc, #192]	; (80024b8 <TIM_Base_SetConfig+0x138>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d01b      	beq.n	8002432 <TIM_Base_SetConfig+0xb2>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a2f      	ldr	r2, [pc, #188]	; (80024bc <TIM_Base_SetConfig+0x13c>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d017      	beq.n	8002432 <TIM_Base_SetConfig+0xb2>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a2e      	ldr	r2, [pc, #184]	; (80024c0 <TIM_Base_SetConfig+0x140>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d013      	beq.n	8002432 <TIM_Base_SetConfig+0xb2>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a2d      	ldr	r2, [pc, #180]	; (80024c4 <TIM_Base_SetConfig+0x144>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d00f      	beq.n	8002432 <TIM_Base_SetConfig+0xb2>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a2c      	ldr	r2, [pc, #176]	; (80024c8 <TIM_Base_SetConfig+0x148>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d00b      	beq.n	8002432 <TIM_Base_SetConfig+0xb2>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a2b      	ldr	r2, [pc, #172]	; (80024cc <TIM_Base_SetConfig+0x14c>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d007      	beq.n	8002432 <TIM_Base_SetConfig+0xb2>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a2a      	ldr	r2, [pc, #168]	; (80024d0 <TIM_Base_SetConfig+0x150>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d003      	beq.n	8002432 <TIM_Base_SetConfig+0xb2>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a29      	ldr	r2, [pc, #164]	; (80024d4 <TIM_Base_SetConfig+0x154>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d108      	bne.n	8002444 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002438:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	68fa      	ldr	r2, [r7, #12]
 8002440:	4313      	orrs	r3, r2
 8002442:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	695b      	ldr	r3, [r3, #20]
 800244e:	4313      	orrs	r3, r2
 8002450:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	68fa      	ldr	r2, [r7, #12]
 8002456:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	689a      	ldr	r2, [r3, #8]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a10      	ldr	r2, [pc, #64]	; (80024ac <TIM_Base_SetConfig+0x12c>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d003      	beq.n	8002478 <TIM_Base_SetConfig+0xf8>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4a12      	ldr	r2, [pc, #72]	; (80024bc <TIM_Base_SetConfig+0x13c>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d103      	bne.n	8002480 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	691a      	ldr	r2, [r3, #16]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b01      	cmp	r3, #1
 8002490:	d105      	bne.n	800249e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	f023 0201 	bic.w	r2, r3, #1
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	611a      	str	r2, [r3, #16]
  }
}
 800249e:	bf00      	nop
 80024a0:	3714      	adds	r7, #20
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	40010000 	.word	0x40010000
 80024b0:	40000400 	.word	0x40000400
 80024b4:	40000800 	.word	0x40000800
 80024b8:	40000c00 	.word	0x40000c00
 80024bc:	40010400 	.word	0x40010400
 80024c0:	40014000 	.word	0x40014000
 80024c4:	40014400 	.word	0x40014400
 80024c8:	40014800 	.word	0x40014800
 80024cc:	40001800 	.word	0x40001800
 80024d0:	40001c00 	.word	0x40001c00
 80024d4:	40002000 	.word	0x40002000

080024d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80024e0:	bf00      	nop
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d101      	bne.n	8002512 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e042      	b.n	8002598 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b00      	cmp	r3, #0
 800251c:	d106      	bne.n	800252c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f7fe f9e0 	bl	80008ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2224      	movs	r2, #36	; 0x24
 8002530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68da      	ldr	r2, [r3, #12]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002542:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f000 f82b 	bl	80025a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	691a      	ldr	r2, [r3, #16]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002558:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	695a      	ldr	r2, [r3, #20]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002568:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	68da      	ldr	r2, [r3, #12]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002578:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2220      	movs	r2, #32
 8002584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2220      	movs	r2, #32
 800258c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002596:	2300      	movs	r3, #0
}
 8002598:	4618      	mov	r0, r3
 800259a:	3708      	adds	r7, #8
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025a4:	b0c0      	sub	sp, #256	; 0x100
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80025b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025bc:	68d9      	ldr	r1, [r3, #12]
 80025be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	ea40 0301 	orr.w	r3, r0, r1
 80025c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80025ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025ce:	689a      	ldr	r2, [r3, #8]
 80025d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	431a      	orrs	r2, r3
 80025d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025dc:	695b      	ldr	r3, [r3, #20]
 80025de:	431a      	orrs	r2, r3
 80025e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025e4:	69db      	ldr	r3, [r3, #28]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80025ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80025f8:	f021 010c 	bic.w	r1, r1, #12
 80025fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002606:	430b      	orrs	r3, r1
 8002608:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800260a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	695b      	ldr	r3, [r3, #20]
 8002612:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800261a:	6999      	ldr	r1, [r3, #24]
 800261c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	ea40 0301 	orr.w	r3, r0, r1
 8002626:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	4b8f      	ldr	r3, [pc, #572]	; (800286c <UART_SetConfig+0x2cc>)
 8002630:	429a      	cmp	r2, r3
 8002632:	d005      	beq.n	8002640 <UART_SetConfig+0xa0>
 8002634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	4b8d      	ldr	r3, [pc, #564]	; (8002870 <UART_SetConfig+0x2d0>)
 800263c:	429a      	cmp	r2, r3
 800263e:	d104      	bne.n	800264a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002640:	f7ff fc76 	bl	8001f30 <HAL_RCC_GetPCLK2Freq>
 8002644:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002648:	e003      	b.n	8002652 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800264a:	f7ff fc5d 	bl	8001f08 <HAL_RCC_GetPCLK1Freq>
 800264e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002656:	69db      	ldr	r3, [r3, #28]
 8002658:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800265c:	f040 810c 	bne.w	8002878 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002660:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002664:	2200      	movs	r2, #0
 8002666:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800266a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800266e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002672:	4622      	mov	r2, r4
 8002674:	462b      	mov	r3, r5
 8002676:	1891      	adds	r1, r2, r2
 8002678:	65b9      	str	r1, [r7, #88]	; 0x58
 800267a:	415b      	adcs	r3, r3
 800267c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800267e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002682:	4621      	mov	r1, r4
 8002684:	eb12 0801 	adds.w	r8, r2, r1
 8002688:	4629      	mov	r1, r5
 800268a:	eb43 0901 	adc.w	r9, r3, r1
 800268e:	f04f 0200 	mov.w	r2, #0
 8002692:	f04f 0300 	mov.w	r3, #0
 8002696:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800269a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800269e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026a2:	4690      	mov	r8, r2
 80026a4:	4699      	mov	r9, r3
 80026a6:	4623      	mov	r3, r4
 80026a8:	eb18 0303 	adds.w	r3, r8, r3
 80026ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80026b0:	462b      	mov	r3, r5
 80026b2:	eb49 0303 	adc.w	r3, r9, r3
 80026b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80026ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80026c6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80026ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80026ce:	460b      	mov	r3, r1
 80026d0:	18db      	adds	r3, r3, r3
 80026d2:	653b      	str	r3, [r7, #80]	; 0x50
 80026d4:	4613      	mov	r3, r2
 80026d6:	eb42 0303 	adc.w	r3, r2, r3
 80026da:	657b      	str	r3, [r7, #84]	; 0x54
 80026dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80026e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80026e4:	f7fd fd84 	bl	80001f0 <__aeabi_uldivmod>
 80026e8:	4602      	mov	r2, r0
 80026ea:	460b      	mov	r3, r1
 80026ec:	4b61      	ldr	r3, [pc, #388]	; (8002874 <UART_SetConfig+0x2d4>)
 80026ee:	fba3 2302 	umull	r2, r3, r3, r2
 80026f2:	095b      	lsrs	r3, r3, #5
 80026f4:	011c      	lsls	r4, r3, #4
 80026f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026fa:	2200      	movs	r2, #0
 80026fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002700:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002704:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002708:	4642      	mov	r2, r8
 800270a:	464b      	mov	r3, r9
 800270c:	1891      	adds	r1, r2, r2
 800270e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002710:	415b      	adcs	r3, r3
 8002712:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002714:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002718:	4641      	mov	r1, r8
 800271a:	eb12 0a01 	adds.w	sl, r2, r1
 800271e:	4649      	mov	r1, r9
 8002720:	eb43 0b01 	adc.w	fp, r3, r1
 8002724:	f04f 0200 	mov.w	r2, #0
 8002728:	f04f 0300 	mov.w	r3, #0
 800272c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002730:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002734:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002738:	4692      	mov	sl, r2
 800273a:	469b      	mov	fp, r3
 800273c:	4643      	mov	r3, r8
 800273e:	eb1a 0303 	adds.w	r3, sl, r3
 8002742:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002746:	464b      	mov	r3, r9
 8002748:	eb4b 0303 	adc.w	r3, fp, r3
 800274c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800275c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002760:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002764:	460b      	mov	r3, r1
 8002766:	18db      	adds	r3, r3, r3
 8002768:	643b      	str	r3, [r7, #64]	; 0x40
 800276a:	4613      	mov	r3, r2
 800276c:	eb42 0303 	adc.w	r3, r2, r3
 8002770:	647b      	str	r3, [r7, #68]	; 0x44
 8002772:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002776:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800277a:	f7fd fd39 	bl	80001f0 <__aeabi_uldivmod>
 800277e:	4602      	mov	r2, r0
 8002780:	460b      	mov	r3, r1
 8002782:	4611      	mov	r1, r2
 8002784:	4b3b      	ldr	r3, [pc, #236]	; (8002874 <UART_SetConfig+0x2d4>)
 8002786:	fba3 2301 	umull	r2, r3, r3, r1
 800278a:	095b      	lsrs	r3, r3, #5
 800278c:	2264      	movs	r2, #100	; 0x64
 800278e:	fb02 f303 	mul.w	r3, r2, r3
 8002792:	1acb      	subs	r3, r1, r3
 8002794:	00db      	lsls	r3, r3, #3
 8002796:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800279a:	4b36      	ldr	r3, [pc, #216]	; (8002874 <UART_SetConfig+0x2d4>)
 800279c:	fba3 2302 	umull	r2, r3, r3, r2
 80027a0:	095b      	lsrs	r3, r3, #5
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80027a8:	441c      	add	r4, r3
 80027aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027ae:	2200      	movs	r2, #0
 80027b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80027b4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80027b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80027bc:	4642      	mov	r2, r8
 80027be:	464b      	mov	r3, r9
 80027c0:	1891      	adds	r1, r2, r2
 80027c2:	63b9      	str	r1, [r7, #56]	; 0x38
 80027c4:	415b      	adcs	r3, r3
 80027c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80027cc:	4641      	mov	r1, r8
 80027ce:	1851      	adds	r1, r2, r1
 80027d0:	6339      	str	r1, [r7, #48]	; 0x30
 80027d2:	4649      	mov	r1, r9
 80027d4:	414b      	adcs	r3, r1
 80027d6:	637b      	str	r3, [r7, #52]	; 0x34
 80027d8:	f04f 0200 	mov.w	r2, #0
 80027dc:	f04f 0300 	mov.w	r3, #0
 80027e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80027e4:	4659      	mov	r1, fp
 80027e6:	00cb      	lsls	r3, r1, #3
 80027e8:	4651      	mov	r1, sl
 80027ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027ee:	4651      	mov	r1, sl
 80027f0:	00ca      	lsls	r2, r1, #3
 80027f2:	4610      	mov	r0, r2
 80027f4:	4619      	mov	r1, r3
 80027f6:	4603      	mov	r3, r0
 80027f8:	4642      	mov	r2, r8
 80027fa:	189b      	adds	r3, r3, r2
 80027fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002800:	464b      	mov	r3, r9
 8002802:	460a      	mov	r2, r1
 8002804:	eb42 0303 	adc.w	r3, r2, r3
 8002808:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800280c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002818:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800281c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002820:	460b      	mov	r3, r1
 8002822:	18db      	adds	r3, r3, r3
 8002824:	62bb      	str	r3, [r7, #40]	; 0x28
 8002826:	4613      	mov	r3, r2
 8002828:	eb42 0303 	adc.w	r3, r2, r3
 800282c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800282e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002832:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002836:	f7fd fcdb 	bl	80001f0 <__aeabi_uldivmod>
 800283a:	4602      	mov	r2, r0
 800283c:	460b      	mov	r3, r1
 800283e:	4b0d      	ldr	r3, [pc, #52]	; (8002874 <UART_SetConfig+0x2d4>)
 8002840:	fba3 1302 	umull	r1, r3, r3, r2
 8002844:	095b      	lsrs	r3, r3, #5
 8002846:	2164      	movs	r1, #100	; 0x64
 8002848:	fb01 f303 	mul.w	r3, r1, r3
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	00db      	lsls	r3, r3, #3
 8002850:	3332      	adds	r3, #50	; 0x32
 8002852:	4a08      	ldr	r2, [pc, #32]	; (8002874 <UART_SetConfig+0x2d4>)
 8002854:	fba2 2303 	umull	r2, r3, r2, r3
 8002858:	095b      	lsrs	r3, r3, #5
 800285a:	f003 0207 	and.w	r2, r3, #7
 800285e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4422      	add	r2, r4
 8002866:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002868:	e106      	b.n	8002a78 <UART_SetConfig+0x4d8>
 800286a:	bf00      	nop
 800286c:	40011000 	.word	0x40011000
 8002870:	40011400 	.word	0x40011400
 8002874:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002878:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800287c:	2200      	movs	r2, #0
 800287e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002882:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002886:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800288a:	4642      	mov	r2, r8
 800288c:	464b      	mov	r3, r9
 800288e:	1891      	adds	r1, r2, r2
 8002890:	6239      	str	r1, [r7, #32]
 8002892:	415b      	adcs	r3, r3
 8002894:	627b      	str	r3, [r7, #36]	; 0x24
 8002896:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800289a:	4641      	mov	r1, r8
 800289c:	1854      	adds	r4, r2, r1
 800289e:	4649      	mov	r1, r9
 80028a0:	eb43 0501 	adc.w	r5, r3, r1
 80028a4:	f04f 0200 	mov.w	r2, #0
 80028a8:	f04f 0300 	mov.w	r3, #0
 80028ac:	00eb      	lsls	r3, r5, #3
 80028ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028b2:	00e2      	lsls	r2, r4, #3
 80028b4:	4614      	mov	r4, r2
 80028b6:	461d      	mov	r5, r3
 80028b8:	4643      	mov	r3, r8
 80028ba:	18e3      	adds	r3, r4, r3
 80028bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80028c0:	464b      	mov	r3, r9
 80028c2:	eb45 0303 	adc.w	r3, r5, r3
 80028c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80028ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80028d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80028da:	f04f 0200 	mov.w	r2, #0
 80028de:	f04f 0300 	mov.w	r3, #0
 80028e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80028e6:	4629      	mov	r1, r5
 80028e8:	008b      	lsls	r3, r1, #2
 80028ea:	4621      	mov	r1, r4
 80028ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80028f0:	4621      	mov	r1, r4
 80028f2:	008a      	lsls	r2, r1, #2
 80028f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80028f8:	f7fd fc7a 	bl	80001f0 <__aeabi_uldivmod>
 80028fc:	4602      	mov	r2, r0
 80028fe:	460b      	mov	r3, r1
 8002900:	4b60      	ldr	r3, [pc, #384]	; (8002a84 <UART_SetConfig+0x4e4>)
 8002902:	fba3 2302 	umull	r2, r3, r3, r2
 8002906:	095b      	lsrs	r3, r3, #5
 8002908:	011c      	lsls	r4, r3, #4
 800290a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800290e:	2200      	movs	r2, #0
 8002910:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002914:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002918:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800291c:	4642      	mov	r2, r8
 800291e:	464b      	mov	r3, r9
 8002920:	1891      	adds	r1, r2, r2
 8002922:	61b9      	str	r1, [r7, #24]
 8002924:	415b      	adcs	r3, r3
 8002926:	61fb      	str	r3, [r7, #28]
 8002928:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800292c:	4641      	mov	r1, r8
 800292e:	1851      	adds	r1, r2, r1
 8002930:	6139      	str	r1, [r7, #16]
 8002932:	4649      	mov	r1, r9
 8002934:	414b      	adcs	r3, r1
 8002936:	617b      	str	r3, [r7, #20]
 8002938:	f04f 0200 	mov.w	r2, #0
 800293c:	f04f 0300 	mov.w	r3, #0
 8002940:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002944:	4659      	mov	r1, fp
 8002946:	00cb      	lsls	r3, r1, #3
 8002948:	4651      	mov	r1, sl
 800294a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800294e:	4651      	mov	r1, sl
 8002950:	00ca      	lsls	r2, r1, #3
 8002952:	4610      	mov	r0, r2
 8002954:	4619      	mov	r1, r3
 8002956:	4603      	mov	r3, r0
 8002958:	4642      	mov	r2, r8
 800295a:	189b      	adds	r3, r3, r2
 800295c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002960:	464b      	mov	r3, r9
 8002962:	460a      	mov	r2, r1
 8002964:	eb42 0303 	adc.w	r3, r2, r3
 8002968:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800296c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	67bb      	str	r3, [r7, #120]	; 0x78
 8002976:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002978:	f04f 0200 	mov.w	r2, #0
 800297c:	f04f 0300 	mov.w	r3, #0
 8002980:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002984:	4649      	mov	r1, r9
 8002986:	008b      	lsls	r3, r1, #2
 8002988:	4641      	mov	r1, r8
 800298a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800298e:	4641      	mov	r1, r8
 8002990:	008a      	lsls	r2, r1, #2
 8002992:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002996:	f7fd fc2b 	bl	80001f0 <__aeabi_uldivmod>
 800299a:	4602      	mov	r2, r0
 800299c:	460b      	mov	r3, r1
 800299e:	4611      	mov	r1, r2
 80029a0:	4b38      	ldr	r3, [pc, #224]	; (8002a84 <UART_SetConfig+0x4e4>)
 80029a2:	fba3 2301 	umull	r2, r3, r3, r1
 80029a6:	095b      	lsrs	r3, r3, #5
 80029a8:	2264      	movs	r2, #100	; 0x64
 80029aa:	fb02 f303 	mul.w	r3, r2, r3
 80029ae:	1acb      	subs	r3, r1, r3
 80029b0:	011b      	lsls	r3, r3, #4
 80029b2:	3332      	adds	r3, #50	; 0x32
 80029b4:	4a33      	ldr	r2, [pc, #204]	; (8002a84 <UART_SetConfig+0x4e4>)
 80029b6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ba:	095b      	lsrs	r3, r3, #5
 80029bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029c0:	441c      	add	r4, r3
 80029c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029c6:	2200      	movs	r2, #0
 80029c8:	673b      	str	r3, [r7, #112]	; 0x70
 80029ca:	677a      	str	r2, [r7, #116]	; 0x74
 80029cc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80029d0:	4642      	mov	r2, r8
 80029d2:	464b      	mov	r3, r9
 80029d4:	1891      	adds	r1, r2, r2
 80029d6:	60b9      	str	r1, [r7, #8]
 80029d8:	415b      	adcs	r3, r3
 80029da:	60fb      	str	r3, [r7, #12]
 80029dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029e0:	4641      	mov	r1, r8
 80029e2:	1851      	adds	r1, r2, r1
 80029e4:	6039      	str	r1, [r7, #0]
 80029e6:	4649      	mov	r1, r9
 80029e8:	414b      	adcs	r3, r1
 80029ea:	607b      	str	r3, [r7, #4]
 80029ec:	f04f 0200 	mov.w	r2, #0
 80029f0:	f04f 0300 	mov.w	r3, #0
 80029f4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80029f8:	4659      	mov	r1, fp
 80029fa:	00cb      	lsls	r3, r1, #3
 80029fc:	4651      	mov	r1, sl
 80029fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a02:	4651      	mov	r1, sl
 8002a04:	00ca      	lsls	r2, r1, #3
 8002a06:	4610      	mov	r0, r2
 8002a08:	4619      	mov	r1, r3
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	4642      	mov	r2, r8
 8002a0e:	189b      	adds	r3, r3, r2
 8002a10:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a12:	464b      	mov	r3, r9
 8002a14:	460a      	mov	r2, r1
 8002a16:	eb42 0303 	adc.w	r3, r2, r3
 8002a1a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	663b      	str	r3, [r7, #96]	; 0x60
 8002a26:	667a      	str	r2, [r7, #100]	; 0x64
 8002a28:	f04f 0200 	mov.w	r2, #0
 8002a2c:	f04f 0300 	mov.w	r3, #0
 8002a30:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002a34:	4649      	mov	r1, r9
 8002a36:	008b      	lsls	r3, r1, #2
 8002a38:	4641      	mov	r1, r8
 8002a3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a3e:	4641      	mov	r1, r8
 8002a40:	008a      	lsls	r2, r1, #2
 8002a42:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002a46:	f7fd fbd3 	bl	80001f0 <__aeabi_uldivmod>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	4b0d      	ldr	r3, [pc, #52]	; (8002a84 <UART_SetConfig+0x4e4>)
 8002a50:	fba3 1302 	umull	r1, r3, r3, r2
 8002a54:	095b      	lsrs	r3, r3, #5
 8002a56:	2164      	movs	r1, #100	; 0x64
 8002a58:	fb01 f303 	mul.w	r3, r1, r3
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	011b      	lsls	r3, r3, #4
 8002a60:	3332      	adds	r3, #50	; 0x32
 8002a62:	4a08      	ldr	r2, [pc, #32]	; (8002a84 <UART_SetConfig+0x4e4>)
 8002a64:	fba2 2303 	umull	r2, r3, r2, r3
 8002a68:	095b      	lsrs	r3, r3, #5
 8002a6a:	f003 020f 	and.w	r2, r3, #15
 8002a6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4422      	add	r2, r4
 8002a76:	609a      	str	r2, [r3, #8]
}
 8002a78:	bf00      	nop
 8002a7a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a84:	51eb851f 	.word	0x51eb851f

08002a88 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002a88:	b084      	sub	sp, #16
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b084      	sub	sp, #16
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
 8002a92:	f107 001c 	add.w	r0, r7, #28
 8002a96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002a9a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d123      	bne.n	8002aea <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002ab6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002aca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d105      	bne.n	8002ade <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 faa0 	bl	8003024 <USB_CoreReset>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	73fb      	strb	r3, [r7, #15]
 8002ae8:	e01b      	b.n	8002b22 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 fa94 	bl	8003024 <USB_CoreReset>
 8002afc:	4603      	mov	r3, r0
 8002afe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002b00:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d106      	bne.n	8002b16 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b0c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	639a      	str	r2, [r3, #56]	; 0x38
 8002b14:	e005      	b.n	8002b22 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b1a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002b22:	7fbb      	ldrb	r3, [r7, #30]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d10b      	bne.n	8002b40 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f043 0206 	orr.w	r2, r3, #6
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f043 0220 	orr.w	r2, r3, #32
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002b4c:	b004      	add	sp, #16
 8002b4e:	4770      	bx	lr

08002b50 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f023 0201 	bic.w	r2, r3, #1
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr

08002b72 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b084      	sub	sp, #16
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002b8e:	78fb      	ldrb	r3, [r7, #3]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d115      	bne.n	8002bc0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002ba0:	200a      	movs	r0, #10
 8002ba2:	f7fe f869 	bl	8000c78 <HAL_Delay>
      ms += 10U;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	330a      	adds	r3, #10
 8002baa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f000 fa2b 	bl	8003008 <USB_GetMode>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d01e      	beq.n	8002bf6 <USB_SetCurrentMode+0x84>
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2bc7      	cmp	r3, #199	; 0xc7
 8002bbc:	d9f0      	bls.n	8002ba0 <USB_SetCurrentMode+0x2e>
 8002bbe:	e01a      	b.n	8002bf6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002bc0:	78fb      	ldrb	r3, [r7, #3]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d115      	bne.n	8002bf2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002bd2:	200a      	movs	r0, #10
 8002bd4:	f7fe f850 	bl	8000c78 <HAL_Delay>
      ms += 10U;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	330a      	adds	r3, #10
 8002bdc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 fa12 	bl	8003008 <USB_GetMode>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d005      	beq.n	8002bf6 <USB_SetCurrentMode+0x84>
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2bc7      	cmp	r3, #199	; 0xc7
 8002bee:	d9f0      	bls.n	8002bd2 <USB_SetCurrentMode+0x60>
 8002bf0:	e001      	b.n	8002bf6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e005      	b.n	8002c02 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2bc8      	cmp	r3, #200	; 0xc8
 8002bfa:	d101      	bne.n	8002c00 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e000      	b.n	8002c02 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3710      	adds	r7, #16
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
	...

08002c0c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002c0c:	b084      	sub	sp, #16
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b086      	sub	sp, #24
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
 8002c16:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002c1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002c26:	2300      	movs	r3, #0
 8002c28:	613b      	str	r3, [r7, #16]
 8002c2a:	e009      	b.n	8002c40 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	3340      	adds	r3, #64	; 0x40
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4413      	add	r3, r2
 8002c36:	2200      	movs	r2, #0
 8002c38:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	613b      	str	r3, [r7, #16]
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	2b0e      	cmp	r3, #14
 8002c44:	d9f2      	bls.n	8002c2c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002c46:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d11c      	bne.n	8002c88 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c5c:	f043 0302 	orr.w	r3, r3, #2
 8002c60:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c66:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c72:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c7e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	639a      	str	r2, [r3, #56]	; 0x38
 8002c86:	e00b      	b.n	8002ca0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c8c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c98:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	2300      	movs	r3, #0
 8002caa:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002cac:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d10d      	bne.n	8002cd0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002cb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d104      	bne.n	8002cc6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002cbc:	2100      	movs	r1, #0
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 f968 	bl	8002f94 <USB_SetDevSpeed>
 8002cc4:	e008      	b.n	8002cd8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002cc6:	2101      	movs	r1, #1
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f000 f963 	bl	8002f94 <USB_SetDevSpeed>
 8002cce:	e003      	b.n	8002cd8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002cd0:	2103      	movs	r1, #3
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 f95e 	bl	8002f94 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002cd8:	2110      	movs	r1, #16
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 f8fa 	bl	8002ed4 <USB_FlushTxFifo>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 f924 	bl	8002f38 <USB_FlushRxFifo>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d00:	461a      	mov	r2, r3
 8002d02:	2300      	movs	r3, #0
 8002d04:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	2300      	movs	r3, #0
 8002d10:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d18:	461a      	mov	r2, r3
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002d1e:	2300      	movs	r3, #0
 8002d20:	613b      	str	r3, [r7, #16]
 8002d22:	e043      	b.n	8002dac <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	015a      	lsls	r2, r3, #5
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d3a:	d118      	bne.n	8002d6e <USB_DevInit+0x162>
    {
      if (i == 0U)
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d10a      	bne.n	8002d58 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	015a      	lsls	r2, r3, #5
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	4413      	add	r3, r2
 8002d4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d4e:	461a      	mov	r2, r3
 8002d50:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002d54:	6013      	str	r3, [r2, #0]
 8002d56:	e013      	b.n	8002d80 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	015a      	lsls	r2, r3, #5
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	4413      	add	r3, r2
 8002d60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d64:	461a      	mov	r2, r3
 8002d66:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002d6a:	6013      	str	r3, [r2, #0]
 8002d6c:	e008      	b.n	8002d80 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	015a      	lsls	r2, r3, #5
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	4413      	add	r3, r2
 8002d76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	015a      	lsls	r2, r3, #5
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	4413      	add	r3, r2
 8002d88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	2300      	movs	r3, #0
 8002d90:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	015a      	lsls	r2, r3, #5
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	4413      	add	r3, r2
 8002d9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d9e:	461a      	mov	r2, r3
 8002da0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002da4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	3301      	adds	r3, #1
 8002daa:	613b      	str	r3, [r7, #16]
 8002dac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002db0:	461a      	mov	r2, r3
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d3b5      	bcc.n	8002d24 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002db8:	2300      	movs	r3, #0
 8002dba:	613b      	str	r3, [r7, #16]
 8002dbc:	e043      	b.n	8002e46 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	015a      	lsls	r2, r3, #5
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002dd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002dd4:	d118      	bne.n	8002e08 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d10a      	bne.n	8002df2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	015a      	lsls	r2, r3, #5
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	4413      	add	r3, r2
 8002de4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002de8:	461a      	mov	r2, r3
 8002dea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002dee:	6013      	str	r3, [r2, #0]
 8002df0:	e013      	b.n	8002e1a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	015a      	lsls	r2, r3, #5
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	4413      	add	r3, r2
 8002dfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dfe:	461a      	mov	r2, r3
 8002e00:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002e04:	6013      	str	r3, [r2, #0]
 8002e06:	e008      	b.n	8002e1a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	015a      	lsls	r2, r3, #5
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	4413      	add	r3, r2
 8002e10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e14:	461a      	mov	r2, r3
 8002e16:	2300      	movs	r3, #0
 8002e18:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	015a      	lsls	r2, r3, #5
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	4413      	add	r3, r2
 8002e22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e26:	461a      	mov	r2, r3
 8002e28:	2300      	movs	r3, #0
 8002e2a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	015a      	lsls	r2, r3, #5
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	4413      	add	r3, r2
 8002e34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e38:	461a      	mov	r2, r3
 8002e3a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002e3e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	3301      	adds	r3, #1
 8002e44:	613b      	str	r3, [r7, #16]
 8002e46:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d3b5      	bcc.n	8002dbe <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e64:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8002e72:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8002e74:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d105      	bne.n	8002e88 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	f043 0210 	orr.w	r2, r3, #16
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	699a      	ldr	r2, [r3, #24]
 8002e8c:	4b10      	ldr	r3, [pc, #64]	; (8002ed0 <USB_DevInit+0x2c4>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8002e94:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d005      	beq.n	8002ea8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	f043 0208 	orr.w	r2, r3, #8
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8002ea8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d107      	bne.n	8002ec0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002eb8:	f043 0304 	orr.w	r3, r3, #4
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8002ec0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3718      	adds	r7, #24
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002ecc:	b004      	add	sp, #16
 8002ece:	4770      	bx	lr
 8002ed0:	803c3800 	.word	0x803c3800

08002ed4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b085      	sub	sp, #20
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8002eee:	d901      	bls.n	8002ef4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e01b      	b.n	8002f2c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	daf2      	bge.n	8002ee2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8002efc:	2300      	movs	r3, #0
 8002efe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	019b      	lsls	r3, r3, #6
 8002f04:	f043 0220 	orr.w	r2, r3, #32
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	3301      	adds	r3, #1
 8002f10:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8002f18:	d901      	bls.n	8002f1e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e006      	b.n	8002f2c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	f003 0320 	and.w	r3, r3, #32
 8002f26:	2b20      	cmp	r3, #32
 8002f28:	d0f0      	beq.n	8002f0c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3714      	adds	r7, #20
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b085      	sub	sp, #20
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002f40:	2300      	movs	r3, #0
 8002f42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	3301      	adds	r3, #1
 8002f48:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8002f50:	d901      	bls.n	8002f56 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e018      	b.n	8002f88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	daf2      	bge.n	8002f44 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2210      	movs	r2, #16
 8002f66:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8002f74:	d901      	bls.n	8002f7a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e006      	b.n	8002f88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	f003 0310 	and.w	r3, r3, #16
 8002f82:	2b10      	cmp	r3, #16
 8002f84:	d0f0      	beq.n	8002f68 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3714      	adds	r7, #20
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	78fb      	ldrb	r3, [r7, #3]
 8002fae:	68f9      	ldr	r1, [r7, #12]
 8002fb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3714      	adds	r7, #20
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr

08002fc6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	b085      	sub	sp, #20
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8002fe0:	f023 0303 	bic.w	r3, r3, #3
 8002fe4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	68fa      	ldr	r2, [r7, #12]
 8002ff0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ff4:	f043 0302 	orr.w	r3, r3, #2
 8002ff8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3714      	adds	r7, #20
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	695b      	ldr	r3, [r3, #20]
 8003014:	f003 0301 	and.w	r3, r3, #1
}
 8003018:	4618      	mov	r0, r3
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800302c:	2300      	movs	r3, #0
 800302e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	3301      	adds	r3, #1
 8003034:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800303c:	d901      	bls.n	8003042 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e01b      	b.n	800307a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	2b00      	cmp	r3, #0
 8003048:	daf2      	bge.n	8003030 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800304a:	2300      	movs	r3, #0
 800304c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	f043 0201 	orr.w	r2, r3, #1
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	3301      	adds	r3, #1
 800305e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003066:	d901      	bls.n	800306c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e006      	b.n	800307a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	691b      	ldr	r3, [r3, #16]
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	2b01      	cmp	r3, #1
 8003076:	d0f0      	beq.n	800305a <USB_CoreReset+0x36>

  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3714      	adds	r7, #20
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
	...

08003088 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8003090:	4b04      	ldr	r3, [pc, #16]	; (80030a4 <HAL_ETH_RxCpltCallback+0x1c>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4618      	mov	r0, r3
 8003096:	f000 f96b 	bl	8003370 <osSemaphoreRelease>
}
 800309a:	bf00      	nop
 800309c:	3708      	adds	r7, #8
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	200005ac 	.word	0x200005ac

080030a8 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 80030b0:	4b04      	ldr	r3, [pc, #16]	; (80030c4 <HAL_ETH_TxCpltCallback+0x1c>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f000 f95b 	bl	8003370 <osSemaphoreRelease>
}
 80030ba:	bf00      	nop
 80030bc:	3708      	adds	r7, #8
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	200005b0 	.word	0x200005b0

080030c8 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f7fd ffad 	bl	8001030 <HAL_ETH_GetDMAError>
 80030d6:	4603      	mov	r3, r0
 80030d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030dc:	2b80      	cmp	r3, #128	; 0x80
 80030de:	d104      	bne.n	80030ea <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 80030e0:	4b04      	ldr	r3, [pc, #16]	; (80030f4 <HAL_ETH_ErrorCallback+0x2c>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f000 f943 	bl	8003370 <osSemaphoreRelease>
  }
}
 80030ea:	bf00      	nop
 80030ec:	3708      	adds	r7, #8
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	200005ac 	.word	0x200005ac

080030f8 <__NVIC_SetPriority>:
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	4603      	mov	r3, r0
 8003100:	6039      	str	r1, [r7, #0]
 8003102:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003108:	2b00      	cmp	r3, #0
 800310a:	db0a      	blt.n	8003122 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	b2da      	uxtb	r2, r3
 8003110:	490c      	ldr	r1, [pc, #48]	; (8003144 <__NVIC_SetPriority+0x4c>)
 8003112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003116:	0112      	lsls	r2, r2, #4
 8003118:	b2d2      	uxtb	r2, r2
 800311a:	440b      	add	r3, r1
 800311c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003120:	e00a      	b.n	8003138 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	b2da      	uxtb	r2, r3
 8003126:	4908      	ldr	r1, [pc, #32]	; (8003148 <__NVIC_SetPriority+0x50>)
 8003128:	79fb      	ldrb	r3, [r7, #7]
 800312a:	f003 030f 	and.w	r3, r3, #15
 800312e:	3b04      	subs	r3, #4
 8003130:	0112      	lsls	r2, r2, #4
 8003132:	b2d2      	uxtb	r2, r2
 8003134:	440b      	add	r3, r1
 8003136:	761a      	strb	r2, [r3, #24]
}
 8003138:	bf00      	nop
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr
 8003144:	e000e100 	.word	0xe000e100
 8003148:	e000ed00 	.word	0xe000ed00

0800314c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003150:	4b05      	ldr	r3, [pc, #20]	; (8003168 <SysTick_Handler+0x1c>)
 8003152:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003154:	f001 fdce 	bl	8004cf4 <xTaskGetSchedulerState>
 8003158:	4603      	mov	r3, r0
 800315a:	2b01      	cmp	r3, #1
 800315c:	d001      	beq.n	8003162 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800315e:	f002 fbb3 	bl	80058c8 <xPortSysTickHandler>
  }
}
 8003162:	bf00      	nop
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	e000e010 	.word	0xe000e010

0800316c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800316c:	b580      	push	{r7, lr}
 800316e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003170:	2100      	movs	r1, #0
 8003172:	f06f 0004 	mvn.w	r0, #4
 8003176:	f7ff ffbf 	bl	80030f8 <__NVIC_SetPriority>
#endif
}
 800317a:	bf00      	nop
 800317c:	bd80      	pop	{r7, pc}
	...

08003180 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003186:	f3ef 8305 	mrs	r3, IPSR
 800318a:	603b      	str	r3, [r7, #0]
  return(result);
 800318c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800318e:	2b00      	cmp	r3, #0
 8003190:	d003      	beq.n	800319a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003192:	f06f 0305 	mvn.w	r3, #5
 8003196:	607b      	str	r3, [r7, #4]
 8003198:	e00c      	b.n	80031b4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800319a:	4b0a      	ldr	r3, [pc, #40]	; (80031c4 <osKernelInitialize+0x44>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d105      	bne.n	80031ae <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80031a2:	4b08      	ldr	r3, [pc, #32]	; (80031c4 <osKernelInitialize+0x44>)
 80031a4:	2201      	movs	r2, #1
 80031a6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80031a8:	2300      	movs	r3, #0
 80031aa:	607b      	str	r3, [r7, #4]
 80031ac:	e002      	b.n	80031b4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80031ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80031b2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80031b4:	687b      	ldr	r3, [r7, #4]
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	20000664 	.word	0x20000664

080031c8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80031ce:	f3ef 8305 	mrs	r3, IPSR
 80031d2:	603b      	str	r3, [r7, #0]
  return(result);
 80031d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d003      	beq.n	80031e2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80031da:	f06f 0305 	mvn.w	r3, #5
 80031de:	607b      	str	r3, [r7, #4]
 80031e0:	e010      	b.n	8003204 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80031e2:	4b0b      	ldr	r3, [pc, #44]	; (8003210 <osKernelStart+0x48>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d109      	bne.n	80031fe <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80031ea:	f7ff ffbf 	bl	800316c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80031ee:	4b08      	ldr	r3, [pc, #32]	; (8003210 <osKernelStart+0x48>)
 80031f0:	2202      	movs	r2, #2
 80031f2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80031f4:	f001 f936 	bl	8004464 <vTaskStartScheduler>
      stat = osOK;
 80031f8:	2300      	movs	r3, #0
 80031fa:	607b      	str	r3, [r7, #4]
 80031fc:	e002      	b.n	8003204 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80031fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003202:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003204:	687b      	ldr	r3, [r7, #4]
}
 8003206:	4618      	mov	r0, r3
 8003208:	3708      	adds	r7, #8
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	20000664 	.word	0x20000664

08003214 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003214:	b580      	push	{r7, lr}
 8003216:	b08e      	sub	sp, #56	; 0x38
 8003218:	af04      	add	r7, sp, #16
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003220:	2300      	movs	r3, #0
 8003222:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003224:	f3ef 8305 	mrs	r3, IPSR
 8003228:	617b      	str	r3, [r7, #20]
  return(result);
 800322a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800322c:	2b00      	cmp	r3, #0
 800322e:	d17e      	bne.n	800332e <osThreadNew+0x11a>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d07b      	beq.n	800332e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003236:	2380      	movs	r3, #128	; 0x80
 8003238:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800323a:	2318      	movs	r3, #24
 800323c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800323e:	2300      	movs	r3, #0
 8003240:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003242:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003246:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d045      	beq.n	80032da <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d002      	beq.n	800325c <osThreadNew+0x48>
        name = attr->name;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	699b      	ldr	r3, [r3, #24]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d002      	beq.n	800326a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d008      	beq.n	8003282 <osThreadNew+0x6e>
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	2b38      	cmp	r3, #56	; 0x38
 8003274:	d805      	bhi.n	8003282 <osThreadNew+0x6e>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b00      	cmp	r3, #0
 8003280:	d001      	beq.n	8003286 <osThreadNew+0x72>
        return (NULL);
 8003282:	2300      	movs	r3, #0
 8003284:	e054      	b.n	8003330 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d003      	beq.n	8003296 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	695b      	ldr	r3, [r3, #20]
 8003292:	089b      	lsrs	r3, r3, #2
 8003294:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00e      	beq.n	80032bc <osThreadNew+0xa8>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	2b5b      	cmp	r3, #91	; 0x5b
 80032a4:	d90a      	bls.n	80032bc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d006      	beq.n	80032bc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d002      	beq.n	80032bc <osThreadNew+0xa8>
        mem = 1;
 80032b6:	2301      	movs	r3, #1
 80032b8:	61bb      	str	r3, [r7, #24]
 80032ba:	e010      	b.n	80032de <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d10c      	bne.n	80032de <osThreadNew+0xca>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d108      	bne.n	80032de <osThreadNew+0xca>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	691b      	ldr	r3, [r3, #16]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d104      	bne.n	80032de <osThreadNew+0xca>
          mem = 0;
 80032d4:	2300      	movs	r3, #0
 80032d6:	61bb      	str	r3, [r7, #24]
 80032d8:	e001      	b.n	80032de <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80032da:	2300      	movs	r3, #0
 80032dc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d110      	bne.n	8003306 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80032ec:	9202      	str	r2, [sp, #8]
 80032ee:	9301      	str	r3, [sp, #4]
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	9300      	str	r3, [sp, #0]
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	6a3a      	ldr	r2, [r7, #32]
 80032f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032fa:	68f8      	ldr	r0, [r7, #12]
 80032fc:	f000 fedc 	bl	80040b8 <xTaskCreateStatic>
 8003300:	4603      	mov	r3, r0
 8003302:	613b      	str	r3, [r7, #16]
 8003304:	e013      	b.n	800332e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d110      	bne.n	800332e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800330c:	6a3b      	ldr	r3, [r7, #32]
 800330e:	b29a      	uxth	r2, r3
 8003310:	f107 0310 	add.w	r3, r7, #16
 8003314:	9301      	str	r3, [sp, #4]
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	9300      	str	r3, [sp, #0]
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800331e:	68f8      	ldr	r0, [r7, #12]
 8003320:	f000 ff27 	bl	8004172 <xTaskCreate>
 8003324:	4603      	mov	r3, r0
 8003326:	2b01      	cmp	r3, #1
 8003328:	d001      	beq.n	800332e <osThreadNew+0x11a>
            hTask = NULL;
 800332a:	2300      	movs	r3, #0
 800332c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800332e:	693b      	ldr	r3, [r7, #16]
}
 8003330:	4618      	mov	r0, r3
 8003332:	3728      	adds	r7, #40	; 0x28
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003340:	f3ef 8305 	mrs	r3, IPSR
 8003344:	60bb      	str	r3, [r7, #8]
  return(result);
 8003346:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003348:	2b00      	cmp	r3, #0
 800334a:	d003      	beq.n	8003354 <osDelay+0x1c>
    stat = osErrorISR;
 800334c:	f06f 0305 	mvn.w	r3, #5
 8003350:	60fb      	str	r3, [r7, #12]
 8003352:	e007      	b.n	8003364 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003354:	2300      	movs	r3, #0
 8003356:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d002      	beq.n	8003364 <osDelay+0x2c>
      vTaskDelay(ticks);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f001 f84c 	bl	80043fc <vTaskDelay>
    }
  }

  return (stat);
 8003364:	68fb      	ldr	r3, [r7, #12]
}
 8003366:	4618      	mov	r0, r3
 8003368:	3710      	adds	r7, #16
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
	...

08003370 <osSemaphoreRelease>:
  }

  return (stat);
}

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8003370:	b580      	push	{r7, lr}
 8003372:	b086      	sub	sp, #24
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800337c:	2300      	movs	r3, #0
 800337e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d103      	bne.n	800338e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8003386:	f06f 0303 	mvn.w	r3, #3
 800338a:	617b      	str	r3, [r7, #20]
 800338c:	e02c      	b.n	80033e8 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800338e:	f3ef 8305 	mrs	r3, IPSR
 8003392:	60fb      	str	r3, [r7, #12]
  return(result);
 8003394:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8003396:	2b00      	cmp	r3, #0
 8003398:	d01a      	beq.n	80033d0 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800339a:	2300      	movs	r3, #0
 800339c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800339e:	f107 0308 	add.w	r3, r7, #8
 80033a2:	4619      	mov	r1, r3
 80033a4:	6938      	ldr	r0, [r7, #16]
 80033a6:	f000 fbac 	bl	8003b02 <xQueueGiveFromISR>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d003      	beq.n	80033b8 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80033b0:	f06f 0302 	mvn.w	r3, #2
 80033b4:	617b      	str	r3, [r7, #20]
 80033b6:	e017      	b.n	80033e8 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d014      	beq.n	80033e8 <osSemaphoreRelease+0x78>
 80033be:	4b0d      	ldr	r3, [pc, #52]	; (80033f4 <osSemaphoreRelease+0x84>)
 80033c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033c4:	601a      	str	r2, [r3, #0]
 80033c6:	f3bf 8f4f 	dsb	sy
 80033ca:	f3bf 8f6f 	isb	sy
 80033ce:	e00b      	b.n	80033e8 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80033d0:	2300      	movs	r3, #0
 80033d2:	2200      	movs	r2, #0
 80033d4:	2100      	movs	r1, #0
 80033d6:	6938      	ldr	r0, [r7, #16]
 80033d8:	f000 f9fa 	bl	80037d0 <xQueueGenericSend>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d002      	beq.n	80033e8 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80033e2:	f06f 0302 	mvn.w	r3, #2
 80033e6:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80033e8:	697b      	ldr	r3, [r7, #20]
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3718      	adds	r7, #24
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	e000ed04 	.word	0xe000ed04

080033f8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80033f8:	b480      	push	{r7}
 80033fa:	b085      	sub	sp, #20
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	4a07      	ldr	r2, [pc, #28]	; (8003424 <vApplicationGetIdleTaskMemory+0x2c>)
 8003408:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	4a06      	ldr	r2, [pc, #24]	; (8003428 <vApplicationGetIdleTaskMemory+0x30>)
 800340e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2280      	movs	r2, #128	; 0x80
 8003414:	601a      	str	r2, [r3, #0]
}
 8003416:	bf00      	nop
 8003418:	3714      	adds	r7, #20
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	20000668 	.word	0x20000668
 8003428:	200006c4 	.word	0x200006c4

0800342c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800342c:	b480      	push	{r7}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	4a07      	ldr	r2, [pc, #28]	; (8003458 <vApplicationGetTimerTaskMemory+0x2c>)
 800343c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	4a06      	ldr	r2, [pc, #24]	; (800345c <vApplicationGetTimerTaskMemory+0x30>)
 8003442:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f44f 7280 	mov.w	r2, #256	; 0x100
 800344a:	601a      	str	r2, [r3, #0]
}
 800344c:	bf00      	nop
 800344e:	3714      	adds	r7, #20
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr
 8003458:	200008c4 	.word	0x200008c4
 800345c:	20000920 	.word	0x20000920

08003460 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f103 0208 	add.w	r2, r3, #8
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003478:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f103 0208 	add.w	r2, r3, #8
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f103 0208 	add.w	r2, r3, #8
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003494:	bf00      	nop
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80034ae:	bf00      	nop
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr

080034ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80034ba:	b480      	push	{r7}
 80034bc:	b085      	sub	sp, #20
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
 80034c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	68fa      	ldr	r2, [r7, #12]
 80034ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	689a      	ldr	r2, [r3, #8]
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	683a      	ldr	r2, [r7, #0]
 80034de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	683a      	ldr	r2, [r7, #0]
 80034e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	1c5a      	adds	r2, r3, #1
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	601a      	str	r2, [r3, #0]
}
 80034f6:	bf00      	nop
 80034f8:	3714      	adds	r7, #20
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr

08003502 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003502:	b480      	push	{r7}
 8003504:	b085      	sub	sp, #20
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
 800350a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003518:	d103      	bne.n	8003522 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	60fb      	str	r3, [r7, #12]
 8003520:	e00c      	b.n	800353c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	3308      	adds	r3, #8
 8003526:	60fb      	str	r3, [r7, #12]
 8003528:	e002      	b.n	8003530 <vListInsert+0x2e>
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	60fb      	str	r3, [r7, #12]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68ba      	ldr	r2, [r7, #8]
 8003538:	429a      	cmp	r2, r3
 800353a:	d2f6      	bcs.n	800352a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	685a      	ldr	r2, [r3, #4]
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	683a      	ldr	r2, [r7, #0]
 800354a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	68fa      	ldr	r2, [r7, #12]
 8003550:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	683a      	ldr	r2, [r7, #0]
 8003556:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	1c5a      	adds	r2, r3, #1
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	601a      	str	r2, [r3, #0]
}
 8003568:	bf00      	nop
 800356a:	3714      	adds	r7, #20
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003574:	b480      	push	{r7}
 8003576:	b085      	sub	sp, #20
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	691b      	ldr	r3, [r3, #16]
 8003580:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	6892      	ldr	r2, [r2, #8]
 800358a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	6852      	ldr	r2, [r2, #4]
 8003594:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	429a      	cmp	r2, r3
 800359e:	d103      	bne.n	80035a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	689a      	ldr	r2, [r3, #8]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	1e5a      	subs	r2, r3, #1
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3714      	adds	r7, #20
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d10a      	bne.n	80035f2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80035dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e0:	f383 8811 	msr	BASEPRI, r3
 80035e4:	f3bf 8f6f 	isb	sy
 80035e8:	f3bf 8f4f 	dsb	sy
 80035ec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80035ee:	bf00      	nop
 80035f0:	e7fe      	b.n	80035f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80035f2:	f002 f8d7 	bl	80057a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035fe:	68f9      	ldr	r1, [r7, #12]
 8003600:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003602:	fb01 f303 	mul.w	r3, r1, r3
 8003606:	441a      	add	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003622:	3b01      	subs	r3, #1
 8003624:	68f9      	ldr	r1, [r7, #12]
 8003626:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003628:	fb01 f303 	mul.w	r3, r1, r3
 800362c:	441a      	add	r2, r3
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	22ff      	movs	r2, #255	; 0xff
 8003636:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	22ff      	movs	r2, #255	; 0xff
 800363e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d114      	bne.n	8003672 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	691b      	ldr	r3, [r3, #16]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d01a      	beq.n	8003686 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	3310      	adds	r3, #16
 8003654:	4618      	mov	r0, r3
 8003656:	f001 f98f 	bl	8004978 <xTaskRemoveFromEventList>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d012      	beq.n	8003686 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003660:	4b0c      	ldr	r3, [pc, #48]	; (8003694 <xQueueGenericReset+0xcc>)
 8003662:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003666:	601a      	str	r2, [r3, #0]
 8003668:	f3bf 8f4f 	dsb	sy
 800366c:	f3bf 8f6f 	isb	sy
 8003670:	e009      	b.n	8003686 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	3310      	adds	r3, #16
 8003676:	4618      	mov	r0, r3
 8003678:	f7ff fef2 	bl	8003460 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	3324      	adds	r3, #36	; 0x24
 8003680:	4618      	mov	r0, r3
 8003682:	f7ff feed 	bl	8003460 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003686:	f002 f8bd 	bl	8005804 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800368a:	2301      	movs	r3, #1
}
 800368c:	4618      	mov	r0, r3
 800368e:	3710      	adds	r7, #16
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	e000ed04 	.word	0xe000ed04

08003698 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003698:	b580      	push	{r7, lr}
 800369a:	b08e      	sub	sp, #56	; 0x38
 800369c:	af02      	add	r7, sp, #8
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	607a      	str	r2, [r7, #4]
 80036a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d10a      	bne.n	80036c2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80036ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b0:	f383 8811 	msr	BASEPRI, r3
 80036b4:	f3bf 8f6f 	isb	sy
 80036b8:	f3bf 8f4f 	dsb	sy
 80036bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80036be:	bf00      	nop
 80036c0:	e7fe      	b.n	80036c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d10a      	bne.n	80036de <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80036c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036cc:	f383 8811 	msr	BASEPRI, r3
 80036d0:	f3bf 8f6f 	isb	sy
 80036d4:	f3bf 8f4f 	dsb	sy
 80036d8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80036da:	bf00      	nop
 80036dc:	e7fe      	b.n	80036dc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d002      	beq.n	80036ea <xQueueGenericCreateStatic+0x52>
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d001      	beq.n	80036ee <xQueueGenericCreateStatic+0x56>
 80036ea:	2301      	movs	r3, #1
 80036ec:	e000      	b.n	80036f0 <xQueueGenericCreateStatic+0x58>
 80036ee:	2300      	movs	r3, #0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d10a      	bne.n	800370a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80036f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f8:	f383 8811 	msr	BASEPRI, r3
 80036fc:	f3bf 8f6f 	isb	sy
 8003700:	f3bf 8f4f 	dsb	sy
 8003704:	623b      	str	r3, [r7, #32]
}
 8003706:	bf00      	nop
 8003708:	e7fe      	b.n	8003708 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d102      	bne.n	8003716 <xQueueGenericCreateStatic+0x7e>
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d101      	bne.n	800371a <xQueueGenericCreateStatic+0x82>
 8003716:	2301      	movs	r3, #1
 8003718:	e000      	b.n	800371c <xQueueGenericCreateStatic+0x84>
 800371a:	2300      	movs	r3, #0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d10a      	bne.n	8003736 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003724:	f383 8811 	msr	BASEPRI, r3
 8003728:	f3bf 8f6f 	isb	sy
 800372c:	f3bf 8f4f 	dsb	sy
 8003730:	61fb      	str	r3, [r7, #28]
}
 8003732:	bf00      	nop
 8003734:	e7fe      	b.n	8003734 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003736:	2350      	movs	r3, #80	; 0x50
 8003738:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	2b50      	cmp	r3, #80	; 0x50
 800373e:	d00a      	beq.n	8003756 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003744:	f383 8811 	msr	BASEPRI, r3
 8003748:	f3bf 8f6f 	isb	sy
 800374c:	f3bf 8f4f 	dsb	sy
 8003750:	61bb      	str	r3, [r7, #24]
}
 8003752:	bf00      	nop
 8003754:	e7fe      	b.n	8003754 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003756:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800375c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00d      	beq.n	800377e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003764:	2201      	movs	r2, #1
 8003766:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800376a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800376e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003770:	9300      	str	r3, [sp, #0]
 8003772:	4613      	mov	r3, r2
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	68b9      	ldr	r1, [r7, #8]
 8003778:	68f8      	ldr	r0, [r7, #12]
 800377a:	f000 f805 	bl	8003788 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800377e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003780:	4618      	mov	r0, r3
 8003782:	3730      	adds	r7, #48	; 0x30
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	607a      	str	r2, [r7, #4]
 8003794:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d103      	bne.n	80037a4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	69ba      	ldr	r2, [r7, #24]
 80037a0:	601a      	str	r2, [r3, #0]
 80037a2:	e002      	b.n	80037aa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	68ba      	ldr	r2, [r7, #8]
 80037b4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80037b6:	2101      	movs	r1, #1
 80037b8:	69b8      	ldr	r0, [r7, #24]
 80037ba:	f7ff ff05 	bl	80035c8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	78fa      	ldrb	r2, [r7, #3]
 80037c2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80037c6:	bf00      	nop
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
	...

080037d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b08e      	sub	sp, #56	; 0x38
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	60b9      	str	r1, [r7, #8]
 80037da:	607a      	str	r2, [r7, #4]
 80037dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80037de:	2300      	movs	r3, #0
 80037e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80037e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d10a      	bne.n	8003802 <xQueueGenericSend+0x32>
	__asm volatile
 80037ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f0:	f383 8811 	msr	BASEPRI, r3
 80037f4:	f3bf 8f6f 	isb	sy
 80037f8:	f3bf 8f4f 	dsb	sy
 80037fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80037fe:	bf00      	nop
 8003800:	e7fe      	b.n	8003800 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d103      	bne.n	8003810 <xQueueGenericSend+0x40>
 8003808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800380a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380c:	2b00      	cmp	r3, #0
 800380e:	d101      	bne.n	8003814 <xQueueGenericSend+0x44>
 8003810:	2301      	movs	r3, #1
 8003812:	e000      	b.n	8003816 <xQueueGenericSend+0x46>
 8003814:	2300      	movs	r3, #0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d10a      	bne.n	8003830 <xQueueGenericSend+0x60>
	__asm volatile
 800381a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800381e:	f383 8811 	msr	BASEPRI, r3
 8003822:	f3bf 8f6f 	isb	sy
 8003826:	f3bf 8f4f 	dsb	sy
 800382a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800382c:	bf00      	nop
 800382e:	e7fe      	b.n	800382e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	2b02      	cmp	r3, #2
 8003834:	d103      	bne.n	800383e <xQueueGenericSend+0x6e>
 8003836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800383a:	2b01      	cmp	r3, #1
 800383c:	d101      	bne.n	8003842 <xQueueGenericSend+0x72>
 800383e:	2301      	movs	r3, #1
 8003840:	e000      	b.n	8003844 <xQueueGenericSend+0x74>
 8003842:	2300      	movs	r3, #0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d10a      	bne.n	800385e <xQueueGenericSend+0x8e>
	__asm volatile
 8003848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800384c:	f383 8811 	msr	BASEPRI, r3
 8003850:	f3bf 8f6f 	isb	sy
 8003854:	f3bf 8f4f 	dsb	sy
 8003858:	623b      	str	r3, [r7, #32]
}
 800385a:	bf00      	nop
 800385c:	e7fe      	b.n	800385c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800385e:	f001 fa49 	bl	8004cf4 <xTaskGetSchedulerState>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d102      	bne.n	800386e <xQueueGenericSend+0x9e>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <xQueueGenericSend+0xa2>
 800386e:	2301      	movs	r3, #1
 8003870:	e000      	b.n	8003874 <xQueueGenericSend+0xa4>
 8003872:	2300      	movs	r3, #0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d10a      	bne.n	800388e <xQueueGenericSend+0xbe>
	__asm volatile
 8003878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800387c:	f383 8811 	msr	BASEPRI, r3
 8003880:	f3bf 8f6f 	isb	sy
 8003884:	f3bf 8f4f 	dsb	sy
 8003888:	61fb      	str	r3, [r7, #28]
}
 800388a:	bf00      	nop
 800388c:	e7fe      	b.n	800388c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800388e:	f001 ff89 	bl	80057a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003894:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800389a:	429a      	cmp	r2, r3
 800389c:	d302      	bcc.n	80038a4 <xQueueGenericSend+0xd4>
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d129      	bne.n	80038f8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80038a4:	683a      	ldr	r2, [r7, #0]
 80038a6:	68b9      	ldr	r1, [r7, #8]
 80038a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038aa:	f000 fa97 	bl	8003ddc <prvCopyDataToQueue>
 80038ae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80038b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d010      	beq.n	80038da <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80038b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ba:	3324      	adds	r3, #36	; 0x24
 80038bc:	4618      	mov	r0, r3
 80038be:	f001 f85b 	bl	8004978 <xTaskRemoveFromEventList>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d013      	beq.n	80038f0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80038c8:	4b3f      	ldr	r3, [pc, #252]	; (80039c8 <xQueueGenericSend+0x1f8>)
 80038ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038ce:	601a      	str	r2, [r3, #0]
 80038d0:	f3bf 8f4f 	dsb	sy
 80038d4:	f3bf 8f6f 	isb	sy
 80038d8:	e00a      	b.n	80038f0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80038da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d007      	beq.n	80038f0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80038e0:	4b39      	ldr	r3, [pc, #228]	; (80039c8 <xQueueGenericSend+0x1f8>)
 80038e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038e6:	601a      	str	r2, [r3, #0]
 80038e8:	f3bf 8f4f 	dsb	sy
 80038ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80038f0:	f001 ff88 	bl	8005804 <vPortExitCritical>
				return pdPASS;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e063      	b.n	80039c0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d103      	bne.n	8003906 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80038fe:	f001 ff81 	bl	8005804 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003902:	2300      	movs	r3, #0
 8003904:	e05c      	b.n	80039c0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003908:	2b00      	cmp	r3, #0
 800390a:	d106      	bne.n	800391a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800390c:	f107 0314 	add.w	r3, r7, #20
 8003910:	4618      	mov	r0, r3
 8003912:	f001 f895 	bl	8004a40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003916:	2301      	movs	r3, #1
 8003918:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800391a:	f001 ff73 	bl	8005804 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800391e:	f000 fe07 	bl	8004530 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003922:	f001 ff3f 	bl	80057a4 <vPortEnterCritical>
 8003926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003928:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800392c:	b25b      	sxtb	r3, r3
 800392e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003932:	d103      	bne.n	800393c <xQueueGenericSend+0x16c>
 8003934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003936:	2200      	movs	r2, #0
 8003938:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800393c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800393e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003942:	b25b      	sxtb	r3, r3
 8003944:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003948:	d103      	bne.n	8003952 <xQueueGenericSend+0x182>
 800394a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800394c:	2200      	movs	r2, #0
 800394e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003952:	f001 ff57 	bl	8005804 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003956:	1d3a      	adds	r2, r7, #4
 8003958:	f107 0314 	add.w	r3, r7, #20
 800395c:	4611      	mov	r1, r2
 800395e:	4618      	mov	r0, r3
 8003960:	f001 f884 	bl	8004a6c <xTaskCheckForTimeOut>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d124      	bne.n	80039b4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800396a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800396c:	f000 fb2e 	bl	8003fcc <prvIsQueueFull>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d018      	beq.n	80039a8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003978:	3310      	adds	r3, #16
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	4611      	mov	r1, r2
 800397e:	4618      	mov	r0, r3
 8003980:	f000 ffaa 	bl	80048d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003984:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003986:	f000 fab9 	bl	8003efc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800398a:	f000 fddf 	bl	800454c <xTaskResumeAll>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	f47f af7c 	bne.w	800388e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003996:	4b0c      	ldr	r3, [pc, #48]	; (80039c8 <xQueueGenericSend+0x1f8>)
 8003998:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800399c:	601a      	str	r2, [r3, #0]
 800399e:	f3bf 8f4f 	dsb	sy
 80039a2:	f3bf 8f6f 	isb	sy
 80039a6:	e772      	b.n	800388e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80039a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80039aa:	f000 faa7 	bl	8003efc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80039ae:	f000 fdcd 	bl	800454c <xTaskResumeAll>
 80039b2:	e76c      	b.n	800388e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80039b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80039b6:	f000 faa1 	bl	8003efc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80039ba:	f000 fdc7 	bl	800454c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80039be:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3738      	adds	r7, #56	; 0x38
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	e000ed04 	.word	0xe000ed04

080039cc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b090      	sub	sp, #64	; 0x40
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	607a      	str	r2, [r7, #4]
 80039d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80039de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d10a      	bne.n	80039fa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80039e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e8:	f383 8811 	msr	BASEPRI, r3
 80039ec:	f3bf 8f6f 	isb	sy
 80039f0:	f3bf 8f4f 	dsb	sy
 80039f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80039f6:	bf00      	nop
 80039f8:	e7fe      	b.n	80039f8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d103      	bne.n	8003a08 <xQueueGenericSendFromISR+0x3c>
 8003a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d101      	bne.n	8003a0c <xQueueGenericSendFromISR+0x40>
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e000      	b.n	8003a0e <xQueueGenericSendFromISR+0x42>
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d10a      	bne.n	8003a28 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a16:	f383 8811 	msr	BASEPRI, r3
 8003a1a:	f3bf 8f6f 	isb	sy
 8003a1e:	f3bf 8f4f 	dsb	sy
 8003a22:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003a24:	bf00      	nop
 8003a26:	e7fe      	b.n	8003a26 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d103      	bne.n	8003a36 <xQueueGenericSendFromISR+0x6a>
 8003a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d101      	bne.n	8003a3a <xQueueGenericSendFromISR+0x6e>
 8003a36:	2301      	movs	r3, #1
 8003a38:	e000      	b.n	8003a3c <xQueueGenericSendFromISR+0x70>
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d10a      	bne.n	8003a56 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a44:	f383 8811 	msr	BASEPRI, r3
 8003a48:	f3bf 8f6f 	isb	sy
 8003a4c:	f3bf 8f4f 	dsb	sy
 8003a50:	623b      	str	r3, [r7, #32]
}
 8003a52:	bf00      	nop
 8003a54:	e7fe      	b.n	8003a54 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003a56:	f001 ff87 	bl	8005968 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003a5a:	f3ef 8211 	mrs	r2, BASEPRI
 8003a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a62:	f383 8811 	msr	BASEPRI, r3
 8003a66:	f3bf 8f6f 	isb	sy
 8003a6a:	f3bf 8f4f 	dsb	sy
 8003a6e:	61fa      	str	r2, [r7, #28]
 8003a70:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003a72:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003a74:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d302      	bcc.n	8003a88 <xQueueGenericSendFromISR+0xbc>
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d12f      	bne.n	8003ae8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a96:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003a98:	683a      	ldr	r2, [r7, #0]
 8003a9a:	68b9      	ldr	r1, [r7, #8]
 8003a9c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003a9e:	f000 f99d 	bl	8003ddc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003aa2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003aa6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003aaa:	d112      	bne.n	8003ad2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d016      	beq.n	8003ae2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ab6:	3324      	adds	r3, #36	; 0x24
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f000 ff5d 	bl	8004978 <xTaskRemoveFromEventList>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00e      	beq.n	8003ae2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d00b      	beq.n	8003ae2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2201      	movs	r2, #1
 8003ace:	601a      	str	r2, [r3, #0]
 8003ad0:	e007      	b.n	8003ae2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003ad2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	b25a      	sxtb	r2, r3
 8003adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ade:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003ae6:	e001      	b.n	8003aec <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aee:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003af6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003af8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3740      	adds	r7, #64	; 0x40
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}

08003b02 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003b02:	b580      	push	{r7, lr}
 8003b04:	b08e      	sub	sp, #56	; 0x38
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
 8003b0a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d10a      	bne.n	8003b2c <xQueueGiveFromISR+0x2a>
	__asm volatile
 8003b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b1a:	f383 8811 	msr	BASEPRI, r3
 8003b1e:	f3bf 8f6f 	isb	sy
 8003b22:	f3bf 8f4f 	dsb	sy
 8003b26:	623b      	str	r3, [r7, #32]
}
 8003b28:	bf00      	nop
 8003b2a:	e7fe      	b.n	8003b2a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00a      	beq.n	8003b4a <xQueueGiveFromISR+0x48>
	__asm volatile
 8003b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b38:	f383 8811 	msr	BASEPRI, r3
 8003b3c:	f3bf 8f6f 	isb	sy
 8003b40:	f3bf 8f4f 	dsb	sy
 8003b44:	61fb      	str	r3, [r7, #28]
}
 8003b46:	bf00      	nop
 8003b48:	e7fe      	b.n	8003b48 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d103      	bne.n	8003b5a <xQueueGiveFromISR+0x58>
 8003b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d101      	bne.n	8003b5e <xQueueGiveFromISR+0x5c>
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e000      	b.n	8003b60 <xQueueGiveFromISR+0x5e>
 8003b5e:	2300      	movs	r3, #0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d10a      	bne.n	8003b7a <xQueueGiveFromISR+0x78>
	__asm volatile
 8003b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b68:	f383 8811 	msr	BASEPRI, r3
 8003b6c:	f3bf 8f6f 	isb	sy
 8003b70:	f3bf 8f4f 	dsb	sy
 8003b74:	61bb      	str	r3, [r7, #24]
}
 8003b76:	bf00      	nop
 8003b78:	e7fe      	b.n	8003b78 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003b7a:	f001 fef5 	bl	8005968 <vPortValidateInterruptPriority>
	__asm volatile
 8003b7e:	f3ef 8211 	mrs	r2, BASEPRI
 8003b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b86:	f383 8811 	msr	BASEPRI, r3
 8003b8a:	f3bf 8f6f 	isb	sy
 8003b8e:	f3bf 8f4f 	dsb	sy
 8003b92:	617a      	str	r2, [r7, #20]
 8003b94:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8003b96:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003b98:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d22b      	bcs.n	8003c02 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003bb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb6:	1c5a      	adds	r2, r3, #1
 8003bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bba:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003bbc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003bc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bc4:	d112      	bne.n	8003bec <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d016      	beq.n	8003bfc <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd0:	3324      	adds	r3, #36	; 0x24
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f000 fed0 	bl	8004978 <xTaskRemoveFromEventList>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00e      	beq.n	8003bfc <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d00b      	beq.n	8003bfc <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	2201      	movs	r2, #1
 8003be8:	601a      	str	r2, [r3, #0]
 8003bea:	e007      	b.n	8003bfc <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003bec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	b25a      	sxtb	r2, r3
 8003bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	637b      	str	r3, [r7, #52]	; 0x34
 8003c00:	e001      	b.n	8003c06 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003c02:	2300      	movs	r3, #0
 8003c04:	637b      	str	r3, [r7, #52]	; 0x34
 8003c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c08:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f383 8811 	msr	BASEPRI, r3
}
 8003c10:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3738      	adds	r7, #56	; 0x38
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b08c      	sub	sp, #48	; 0x30
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d10a      	bne.n	8003c4c <xQueueReceive+0x30>
	__asm volatile
 8003c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c3a:	f383 8811 	msr	BASEPRI, r3
 8003c3e:	f3bf 8f6f 	isb	sy
 8003c42:	f3bf 8f4f 	dsb	sy
 8003c46:	623b      	str	r3, [r7, #32]
}
 8003c48:	bf00      	nop
 8003c4a:	e7fe      	b.n	8003c4a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d103      	bne.n	8003c5a <xQueueReceive+0x3e>
 8003c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d101      	bne.n	8003c5e <xQueueReceive+0x42>
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e000      	b.n	8003c60 <xQueueReceive+0x44>
 8003c5e:	2300      	movs	r3, #0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d10a      	bne.n	8003c7a <xQueueReceive+0x5e>
	__asm volatile
 8003c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c68:	f383 8811 	msr	BASEPRI, r3
 8003c6c:	f3bf 8f6f 	isb	sy
 8003c70:	f3bf 8f4f 	dsb	sy
 8003c74:	61fb      	str	r3, [r7, #28]
}
 8003c76:	bf00      	nop
 8003c78:	e7fe      	b.n	8003c78 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c7a:	f001 f83b 	bl	8004cf4 <xTaskGetSchedulerState>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d102      	bne.n	8003c8a <xQueueReceive+0x6e>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d101      	bne.n	8003c8e <xQueueReceive+0x72>
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e000      	b.n	8003c90 <xQueueReceive+0x74>
 8003c8e:	2300      	movs	r3, #0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d10a      	bne.n	8003caa <xQueueReceive+0x8e>
	__asm volatile
 8003c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c98:	f383 8811 	msr	BASEPRI, r3
 8003c9c:	f3bf 8f6f 	isb	sy
 8003ca0:	f3bf 8f4f 	dsb	sy
 8003ca4:	61bb      	str	r3, [r7, #24]
}
 8003ca6:	bf00      	nop
 8003ca8:	e7fe      	b.n	8003ca8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003caa:	f001 fd7b 	bl	80057a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d01f      	beq.n	8003cfa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003cba:	68b9      	ldr	r1, [r7, #8]
 8003cbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cbe:	f000 f8f7 	bl	8003eb0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc4:	1e5a      	subs	r2, r3, #1
 8003cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00f      	beq.n	8003cf2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd4:	3310      	adds	r3, #16
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f000 fe4e 	bl	8004978 <xTaskRemoveFromEventList>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d007      	beq.n	8003cf2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003ce2:	4b3d      	ldr	r3, [pc, #244]	; (8003dd8 <xQueueReceive+0x1bc>)
 8003ce4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ce8:	601a      	str	r2, [r3, #0]
 8003cea:	f3bf 8f4f 	dsb	sy
 8003cee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003cf2:	f001 fd87 	bl	8005804 <vPortExitCritical>
				return pdPASS;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e069      	b.n	8003dce <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d103      	bne.n	8003d08 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003d00:	f001 fd80 	bl	8005804 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003d04:	2300      	movs	r3, #0
 8003d06:	e062      	b.n	8003dce <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d106      	bne.n	8003d1c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003d0e:	f107 0310 	add.w	r3, r7, #16
 8003d12:	4618      	mov	r0, r3
 8003d14:	f000 fe94 	bl	8004a40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003d1c:	f001 fd72 	bl	8005804 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003d20:	f000 fc06 	bl	8004530 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003d24:	f001 fd3e 	bl	80057a4 <vPortEnterCritical>
 8003d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d2e:	b25b      	sxtb	r3, r3
 8003d30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d34:	d103      	bne.n	8003d3e <xQueueReceive+0x122>
 8003d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d44:	b25b      	sxtb	r3, r3
 8003d46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d4a:	d103      	bne.n	8003d54 <xQueueReceive+0x138>
 8003d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d54:	f001 fd56 	bl	8005804 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d58:	1d3a      	adds	r2, r7, #4
 8003d5a:	f107 0310 	add.w	r3, r7, #16
 8003d5e:	4611      	mov	r1, r2
 8003d60:	4618      	mov	r0, r3
 8003d62:	f000 fe83 	bl	8004a6c <xTaskCheckForTimeOut>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d123      	bne.n	8003db4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d6e:	f000 f917 	bl	8003fa0 <prvIsQueueEmpty>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d017      	beq.n	8003da8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d7a:	3324      	adds	r3, #36	; 0x24
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	4611      	mov	r1, r2
 8003d80:	4618      	mov	r0, r3
 8003d82:	f000 fda9 	bl	80048d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003d86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d88:	f000 f8b8 	bl	8003efc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003d8c:	f000 fbde 	bl	800454c <xTaskResumeAll>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d189      	bne.n	8003caa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003d96:	4b10      	ldr	r3, [pc, #64]	; (8003dd8 <xQueueReceive+0x1bc>)
 8003d98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d9c:	601a      	str	r2, [r3, #0]
 8003d9e:	f3bf 8f4f 	dsb	sy
 8003da2:	f3bf 8f6f 	isb	sy
 8003da6:	e780      	b.n	8003caa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003da8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003daa:	f000 f8a7 	bl	8003efc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003dae:	f000 fbcd 	bl	800454c <xTaskResumeAll>
 8003db2:	e77a      	b.n	8003caa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003db4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003db6:	f000 f8a1 	bl	8003efc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003dba:	f000 fbc7 	bl	800454c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003dbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003dc0:	f000 f8ee 	bl	8003fa0 <prvIsQueueEmpty>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	f43f af6f 	beq.w	8003caa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003dcc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3730      	adds	r7, #48	; 0x30
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	e000ed04 	.word	0xe000ed04

08003ddc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b086      	sub	sp, #24
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003de8:	2300      	movs	r3, #0
 8003dea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d10d      	bne.n	8003e16 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d14d      	bne.n	8003e9e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	4618      	mov	r0, r3
 8003e08:	f000 ff92 	bl	8004d30 <xTaskPriorityDisinherit>
 8003e0c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	609a      	str	r2, [r3, #8]
 8003e14:	e043      	b.n	8003e9e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d119      	bne.n	8003e50 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6858      	ldr	r0, [r3, #4]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e24:	461a      	mov	r2, r3
 8003e26:	68b9      	ldr	r1, [r7, #8]
 8003e28:	f001 fff4 	bl	8005e14 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	685a      	ldr	r2, [r3, #4]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e34:	441a      	add	r2, r3
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	685a      	ldr	r2, [r3, #4]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d32b      	bcc.n	8003e9e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	605a      	str	r2, [r3, #4]
 8003e4e:	e026      	b.n	8003e9e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	68d8      	ldr	r0, [r3, #12]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e58:	461a      	mov	r2, r3
 8003e5a:	68b9      	ldr	r1, [r7, #8]
 8003e5c:	f001 ffda 	bl	8005e14 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	68da      	ldr	r2, [r3, #12]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e68:	425b      	negs	r3, r3
 8003e6a:	441a      	add	r2, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	68da      	ldr	r2, [r3, #12]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d207      	bcs.n	8003e8c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	689a      	ldr	r2, [r3, #8]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e84:	425b      	negs	r3, r3
 8003e86:	441a      	add	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d105      	bne.n	8003e9e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d002      	beq.n	8003e9e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	1c5a      	adds	r2, r3, #1
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003ea6:	697b      	ldr	r3, [r7, #20]
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3718      	adds	r7, #24
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d018      	beq.n	8003ef4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	68da      	ldr	r2, [r3, #12]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eca:	441a      	add	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	68da      	ldr	r2, [r3, #12]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d303      	bcc.n	8003ee4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	68d9      	ldr	r1, [r3, #12]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eec:	461a      	mov	r2, r3
 8003eee:	6838      	ldr	r0, [r7, #0]
 8003ef0:	f001 ff90 	bl	8005e14 <memcpy>
	}
}
 8003ef4:	bf00      	nop
 8003ef6:	3708      	adds	r7, #8
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003f04:	f001 fc4e 	bl	80057a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f0e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f10:	e011      	b.n	8003f36 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d012      	beq.n	8003f40 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	3324      	adds	r3, #36	; 0x24
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f000 fd2a 	bl	8004978 <xTaskRemoveFromEventList>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d001      	beq.n	8003f2e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003f2a:	f000 fe01 	bl	8004b30 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003f2e:	7bfb      	ldrb	r3, [r7, #15]
 8003f30:	3b01      	subs	r3, #1
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	dce9      	bgt.n	8003f12 <prvUnlockQueue+0x16>
 8003f3e:	e000      	b.n	8003f42 <prvUnlockQueue+0x46>
					break;
 8003f40:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	22ff      	movs	r2, #255	; 0xff
 8003f46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003f4a:	f001 fc5b 	bl	8005804 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003f4e:	f001 fc29 	bl	80057a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f58:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f5a:	e011      	b.n	8003f80 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d012      	beq.n	8003f8a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	3310      	adds	r3, #16
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f000 fd05 	bl	8004978 <xTaskRemoveFromEventList>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d001      	beq.n	8003f78 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003f74:	f000 fddc 	bl	8004b30 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003f78:	7bbb      	ldrb	r3, [r7, #14]
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	dce9      	bgt.n	8003f5c <prvUnlockQueue+0x60>
 8003f88:	e000      	b.n	8003f8c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003f8a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	22ff      	movs	r2, #255	; 0xff
 8003f90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003f94:	f001 fc36 	bl	8005804 <vPortExitCritical>
}
 8003f98:	bf00      	nop
 8003f9a:	3710      	adds	r7, #16
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003fa8:	f001 fbfc 	bl	80057a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d102      	bne.n	8003fba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	60fb      	str	r3, [r7, #12]
 8003fb8:	e001      	b.n	8003fbe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003fbe:	f001 fc21 	bl	8005804 <vPortExitCritical>

	return xReturn;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3710      	adds	r7, #16
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003fd4:	f001 fbe6 	bl	80057a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d102      	bne.n	8003fea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	60fb      	str	r3, [r7, #12]
 8003fe8:	e001      	b.n	8003fee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003fea:	2300      	movs	r3, #0
 8003fec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003fee:	f001 fc09 	bl	8005804 <vPortExitCritical>

	return xReturn;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3710      	adds	r7, #16
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004006:	2300      	movs	r3, #0
 8004008:	60fb      	str	r3, [r7, #12]
 800400a:	e014      	b.n	8004036 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800400c:	4a0f      	ldr	r2, [pc, #60]	; (800404c <vQueueAddToRegistry+0x50>)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d10b      	bne.n	8004030 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004018:	490c      	ldr	r1, [pc, #48]	; (800404c <vQueueAddToRegistry+0x50>)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	683a      	ldr	r2, [r7, #0]
 800401e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004022:	4a0a      	ldr	r2, [pc, #40]	; (800404c <vQueueAddToRegistry+0x50>)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	00db      	lsls	r3, r3, #3
 8004028:	4413      	add	r3, r2
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800402e:	e006      	b.n	800403e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	3301      	adds	r3, #1
 8004034:	60fb      	str	r3, [r7, #12]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2b07      	cmp	r3, #7
 800403a:	d9e7      	bls.n	800400c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800403c:	bf00      	nop
 800403e:	bf00      	nop
 8004040:	3714      	adds	r7, #20
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	20000d20 	.word	0x20000d20

08004050 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004050:	b580      	push	{r7, lr}
 8004052:	b086      	sub	sp, #24
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004060:	f001 fba0 	bl	80057a4 <vPortEnterCritical>
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800406a:	b25b      	sxtb	r3, r3
 800406c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004070:	d103      	bne.n	800407a <vQueueWaitForMessageRestricted+0x2a>
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004080:	b25b      	sxtb	r3, r3
 8004082:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004086:	d103      	bne.n	8004090 <vQueueWaitForMessageRestricted+0x40>
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	2200      	movs	r2, #0
 800408c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004090:	f001 fbb8 	bl	8005804 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004098:	2b00      	cmp	r3, #0
 800409a:	d106      	bne.n	80040aa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	3324      	adds	r3, #36	; 0x24
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	68b9      	ldr	r1, [r7, #8]
 80040a4:	4618      	mov	r0, r3
 80040a6:	f000 fc3b 	bl	8004920 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80040aa:	6978      	ldr	r0, [r7, #20]
 80040ac:	f7ff ff26 	bl	8003efc <prvUnlockQueue>
	}
 80040b0:	bf00      	nop
 80040b2:	3718      	adds	r7, #24
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b08e      	sub	sp, #56	; 0x38
 80040bc:	af04      	add	r7, sp, #16
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	607a      	str	r2, [r7, #4]
 80040c4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80040c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d10a      	bne.n	80040e2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80040cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d0:	f383 8811 	msr	BASEPRI, r3
 80040d4:	f3bf 8f6f 	isb	sy
 80040d8:	f3bf 8f4f 	dsb	sy
 80040dc:	623b      	str	r3, [r7, #32]
}
 80040de:	bf00      	nop
 80040e0:	e7fe      	b.n	80040e0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80040e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d10a      	bne.n	80040fe <xTaskCreateStatic+0x46>
	__asm volatile
 80040e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ec:	f383 8811 	msr	BASEPRI, r3
 80040f0:	f3bf 8f6f 	isb	sy
 80040f4:	f3bf 8f4f 	dsb	sy
 80040f8:	61fb      	str	r3, [r7, #28]
}
 80040fa:	bf00      	nop
 80040fc:	e7fe      	b.n	80040fc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80040fe:	235c      	movs	r3, #92	; 0x5c
 8004100:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	2b5c      	cmp	r3, #92	; 0x5c
 8004106:	d00a      	beq.n	800411e <xTaskCreateStatic+0x66>
	__asm volatile
 8004108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800410c:	f383 8811 	msr	BASEPRI, r3
 8004110:	f3bf 8f6f 	isb	sy
 8004114:	f3bf 8f4f 	dsb	sy
 8004118:	61bb      	str	r3, [r7, #24]
}
 800411a:	bf00      	nop
 800411c:	e7fe      	b.n	800411c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800411e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004122:	2b00      	cmp	r3, #0
 8004124:	d01e      	beq.n	8004164 <xTaskCreateStatic+0xac>
 8004126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004128:	2b00      	cmp	r3, #0
 800412a:	d01b      	beq.n	8004164 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800412c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800412e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004132:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004134:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004138:	2202      	movs	r2, #2
 800413a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800413e:	2300      	movs	r3, #0
 8004140:	9303      	str	r3, [sp, #12]
 8004142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004144:	9302      	str	r3, [sp, #8]
 8004146:	f107 0314 	add.w	r3, r7, #20
 800414a:	9301      	str	r3, [sp, #4]
 800414c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800414e:	9300      	str	r3, [sp, #0]
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	68b9      	ldr	r1, [r7, #8]
 8004156:	68f8      	ldr	r0, [r7, #12]
 8004158:	f000 f850 	bl	80041fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800415c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800415e:	f000 f8dd 	bl	800431c <prvAddNewTaskToReadyList>
 8004162:	e001      	b.n	8004168 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004164:	2300      	movs	r3, #0
 8004166:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004168:	697b      	ldr	r3, [r7, #20]
	}
 800416a:	4618      	mov	r0, r3
 800416c:	3728      	adds	r7, #40	; 0x28
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}

08004172 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004172:	b580      	push	{r7, lr}
 8004174:	b08c      	sub	sp, #48	; 0x30
 8004176:	af04      	add	r7, sp, #16
 8004178:	60f8      	str	r0, [r7, #12]
 800417a:	60b9      	str	r1, [r7, #8]
 800417c:	603b      	str	r3, [r7, #0]
 800417e:	4613      	mov	r3, r2
 8004180:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004182:	88fb      	ldrh	r3, [r7, #6]
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	4618      	mov	r0, r3
 8004188:	f001 fc2e 	bl	80059e8 <pvPortMalloc>
 800418c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d00e      	beq.n	80041b2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004194:	205c      	movs	r0, #92	; 0x5c
 8004196:	f001 fc27 	bl	80059e8 <pvPortMalloc>
 800419a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d003      	beq.n	80041aa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	697a      	ldr	r2, [r7, #20]
 80041a6:	631a      	str	r2, [r3, #48]	; 0x30
 80041a8:	e005      	b.n	80041b6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80041aa:	6978      	ldr	r0, [r7, #20]
 80041ac:	f001 fce8 	bl	8005b80 <vPortFree>
 80041b0:	e001      	b.n	80041b6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80041b2:	2300      	movs	r3, #0
 80041b4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d017      	beq.n	80041ec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80041c4:	88fa      	ldrh	r2, [r7, #6]
 80041c6:	2300      	movs	r3, #0
 80041c8:	9303      	str	r3, [sp, #12]
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	9302      	str	r3, [sp, #8]
 80041ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041d0:	9301      	str	r3, [sp, #4]
 80041d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d4:	9300      	str	r3, [sp, #0]
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	68b9      	ldr	r1, [r7, #8]
 80041da:	68f8      	ldr	r0, [r7, #12]
 80041dc:	f000 f80e 	bl	80041fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80041e0:	69f8      	ldr	r0, [r7, #28]
 80041e2:	f000 f89b 	bl	800431c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80041e6:	2301      	movs	r3, #1
 80041e8:	61bb      	str	r3, [r7, #24]
 80041ea:	e002      	b.n	80041f2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80041ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80041f0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80041f2:	69bb      	ldr	r3, [r7, #24]
	}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3720      	adds	r7, #32
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b088      	sub	sp, #32
 8004200:	af00      	add	r7, sp, #0
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	60b9      	str	r1, [r7, #8]
 8004206:	607a      	str	r2, [r7, #4]
 8004208:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800420a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800420c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	461a      	mov	r2, r3
 8004214:	21a5      	movs	r1, #165	; 0xa5
 8004216:	f001 fdd1 	bl	8005dbc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800421a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800421c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004224:	3b01      	subs	r3, #1
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	4413      	add	r3, r2
 800422a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	f023 0307 	bic.w	r3, r3, #7
 8004232:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	f003 0307 	and.w	r3, r3, #7
 800423a:	2b00      	cmp	r3, #0
 800423c:	d00a      	beq.n	8004254 <prvInitialiseNewTask+0x58>
	__asm volatile
 800423e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004242:	f383 8811 	msr	BASEPRI, r3
 8004246:	f3bf 8f6f 	isb	sy
 800424a:	f3bf 8f4f 	dsb	sy
 800424e:	617b      	str	r3, [r7, #20]
}
 8004250:	bf00      	nop
 8004252:	e7fe      	b.n	8004252 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d01f      	beq.n	800429a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800425a:	2300      	movs	r3, #0
 800425c:	61fb      	str	r3, [r7, #28]
 800425e:	e012      	b.n	8004286 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004260:	68ba      	ldr	r2, [r7, #8]
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	4413      	add	r3, r2
 8004266:	7819      	ldrb	r1, [r3, #0]
 8004268:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	4413      	add	r3, r2
 800426e:	3334      	adds	r3, #52	; 0x34
 8004270:	460a      	mov	r2, r1
 8004272:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004274:	68ba      	ldr	r2, [r7, #8]
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	4413      	add	r3, r2
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d006      	beq.n	800428e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	3301      	adds	r3, #1
 8004284:	61fb      	str	r3, [r7, #28]
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	2b0f      	cmp	r3, #15
 800428a:	d9e9      	bls.n	8004260 <prvInitialiseNewTask+0x64>
 800428c:	e000      	b.n	8004290 <prvInitialiseNewTask+0x94>
			{
				break;
 800428e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004292:	2200      	movs	r2, #0
 8004294:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004298:	e003      	b.n	80042a2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800429a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800429c:	2200      	movs	r2, #0
 800429e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80042a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a4:	2b37      	cmp	r3, #55	; 0x37
 80042a6:	d901      	bls.n	80042ac <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80042a8:	2337      	movs	r3, #55	; 0x37
 80042aa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80042ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042b0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80042b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042b6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80042b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ba:	2200      	movs	r2, #0
 80042bc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80042be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c0:	3304      	adds	r3, #4
 80042c2:	4618      	mov	r0, r3
 80042c4:	f7ff f8ec 	bl	80034a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80042c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ca:	3318      	adds	r3, #24
 80042cc:	4618      	mov	r0, r3
 80042ce:	f7ff f8e7 	bl	80034a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80042d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042d6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042da:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80042de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80042e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042e6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80042e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ea:	2200      	movs	r2, #0
 80042ec:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80042ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80042f6:	683a      	ldr	r2, [r7, #0]
 80042f8:	68f9      	ldr	r1, [r7, #12]
 80042fa:	69b8      	ldr	r0, [r7, #24]
 80042fc:	f001 f928 	bl	8005550 <pxPortInitialiseStack>
 8004300:	4602      	mov	r2, r0
 8004302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004304:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004308:	2b00      	cmp	r3, #0
 800430a:	d002      	beq.n	8004312 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800430c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800430e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004310:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004312:	bf00      	nop
 8004314:	3720      	adds	r7, #32
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
	...

0800431c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004324:	f001 fa3e 	bl	80057a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004328:	4b2d      	ldr	r3, [pc, #180]	; (80043e0 <prvAddNewTaskToReadyList+0xc4>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	3301      	adds	r3, #1
 800432e:	4a2c      	ldr	r2, [pc, #176]	; (80043e0 <prvAddNewTaskToReadyList+0xc4>)
 8004330:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004332:	4b2c      	ldr	r3, [pc, #176]	; (80043e4 <prvAddNewTaskToReadyList+0xc8>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d109      	bne.n	800434e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800433a:	4a2a      	ldr	r2, [pc, #168]	; (80043e4 <prvAddNewTaskToReadyList+0xc8>)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004340:	4b27      	ldr	r3, [pc, #156]	; (80043e0 <prvAddNewTaskToReadyList+0xc4>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2b01      	cmp	r3, #1
 8004346:	d110      	bne.n	800436a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004348:	f000 fc16 	bl	8004b78 <prvInitialiseTaskLists>
 800434c:	e00d      	b.n	800436a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800434e:	4b26      	ldr	r3, [pc, #152]	; (80043e8 <prvAddNewTaskToReadyList+0xcc>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d109      	bne.n	800436a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004356:	4b23      	ldr	r3, [pc, #140]	; (80043e4 <prvAddNewTaskToReadyList+0xc8>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004360:	429a      	cmp	r2, r3
 8004362:	d802      	bhi.n	800436a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004364:	4a1f      	ldr	r2, [pc, #124]	; (80043e4 <prvAddNewTaskToReadyList+0xc8>)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800436a:	4b20      	ldr	r3, [pc, #128]	; (80043ec <prvAddNewTaskToReadyList+0xd0>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	3301      	adds	r3, #1
 8004370:	4a1e      	ldr	r2, [pc, #120]	; (80043ec <prvAddNewTaskToReadyList+0xd0>)
 8004372:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004374:	4b1d      	ldr	r3, [pc, #116]	; (80043ec <prvAddNewTaskToReadyList+0xd0>)
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004380:	4b1b      	ldr	r3, [pc, #108]	; (80043f0 <prvAddNewTaskToReadyList+0xd4>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	429a      	cmp	r2, r3
 8004386:	d903      	bls.n	8004390 <prvAddNewTaskToReadyList+0x74>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800438c:	4a18      	ldr	r2, [pc, #96]	; (80043f0 <prvAddNewTaskToReadyList+0xd4>)
 800438e:	6013      	str	r3, [r2, #0]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004394:	4613      	mov	r3, r2
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	4413      	add	r3, r2
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	4a15      	ldr	r2, [pc, #84]	; (80043f4 <prvAddNewTaskToReadyList+0xd8>)
 800439e:	441a      	add	r2, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	3304      	adds	r3, #4
 80043a4:	4619      	mov	r1, r3
 80043a6:	4610      	mov	r0, r2
 80043a8:	f7ff f887 	bl	80034ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80043ac:	f001 fa2a 	bl	8005804 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80043b0:	4b0d      	ldr	r3, [pc, #52]	; (80043e8 <prvAddNewTaskToReadyList+0xcc>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d00e      	beq.n	80043d6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80043b8:	4b0a      	ldr	r3, [pc, #40]	; (80043e4 <prvAddNewTaskToReadyList+0xc8>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d207      	bcs.n	80043d6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80043c6:	4b0c      	ldr	r3, [pc, #48]	; (80043f8 <prvAddNewTaskToReadyList+0xdc>)
 80043c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043cc:	601a      	str	r2, [r3, #0]
 80043ce:	f3bf 8f4f 	dsb	sy
 80043d2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80043d6:	bf00      	nop
 80043d8:	3708      	adds	r7, #8
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	20001234 	.word	0x20001234
 80043e4:	20000d60 	.word	0x20000d60
 80043e8:	20001240 	.word	0x20001240
 80043ec:	20001250 	.word	0x20001250
 80043f0:	2000123c 	.word	0x2000123c
 80043f4:	20000d64 	.word	0x20000d64
 80043f8:	e000ed04 	.word	0xe000ed04

080043fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004404:	2300      	movs	r3, #0
 8004406:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d017      	beq.n	800443e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800440e:	4b13      	ldr	r3, [pc, #76]	; (800445c <vTaskDelay+0x60>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00a      	beq.n	800442c <vTaskDelay+0x30>
	__asm volatile
 8004416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800441a:	f383 8811 	msr	BASEPRI, r3
 800441e:	f3bf 8f6f 	isb	sy
 8004422:	f3bf 8f4f 	dsb	sy
 8004426:	60bb      	str	r3, [r7, #8]
}
 8004428:	bf00      	nop
 800442a:	e7fe      	b.n	800442a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800442c:	f000 f880 	bl	8004530 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004430:	2100      	movs	r1, #0
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 fcea 	bl	8004e0c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004438:	f000 f888 	bl	800454c <xTaskResumeAll>
 800443c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d107      	bne.n	8004454 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004444:	4b06      	ldr	r3, [pc, #24]	; (8004460 <vTaskDelay+0x64>)
 8004446:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800444a:	601a      	str	r2, [r3, #0]
 800444c:	f3bf 8f4f 	dsb	sy
 8004450:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004454:	bf00      	nop
 8004456:	3710      	adds	r7, #16
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	2000125c 	.word	0x2000125c
 8004460:	e000ed04 	.word	0xe000ed04

08004464 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b08a      	sub	sp, #40	; 0x28
 8004468:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800446a:	2300      	movs	r3, #0
 800446c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800446e:	2300      	movs	r3, #0
 8004470:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004472:	463a      	mov	r2, r7
 8004474:	1d39      	adds	r1, r7, #4
 8004476:	f107 0308 	add.w	r3, r7, #8
 800447a:	4618      	mov	r0, r3
 800447c:	f7fe ffbc 	bl	80033f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004480:	6839      	ldr	r1, [r7, #0]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	68ba      	ldr	r2, [r7, #8]
 8004486:	9202      	str	r2, [sp, #8]
 8004488:	9301      	str	r3, [sp, #4]
 800448a:	2300      	movs	r3, #0
 800448c:	9300      	str	r3, [sp, #0]
 800448e:	2300      	movs	r3, #0
 8004490:	460a      	mov	r2, r1
 8004492:	4921      	ldr	r1, [pc, #132]	; (8004518 <vTaskStartScheduler+0xb4>)
 8004494:	4821      	ldr	r0, [pc, #132]	; (800451c <vTaskStartScheduler+0xb8>)
 8004496:	f7ff fe0f 	bl	80040b8 <xTaskCreateStatic>
 800449a:	4603      	mov	r3, r0
 800449c:	4a20      	ldr	r2, [pc, #128]	; (8004520 <vTaskStartScheduler+0xbc>)
 800449e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80044a0:	4b1f      	ldr	r3, [pc, #124]	; (8004520 <vTaskStartScheduler+0xbc>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d002      	beq.n	80044ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80044a8:	2301      	movs	r3, #1
 80044aa:	617b      	str	r3, [r7, #20]
 80044ac:	e001      	b.n	80044b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80044ae:	2300      	movs	r3, #0
 80044b0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d102      	bne.n	80044be <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80044b8:	f000 fcfc 	bl	8004eb4 <xTimerCreateTimerTask>
 80044bc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d116      	bne.n	80044f2 <vTaskStartScheduler+0x8e>
	__asm volatile
 80044c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c8:	f383 8811 	msr	BASEPRI, r3
 80044cc:	f3bf 8f6f 	isb	sy
 80044d0:	f3bf 8f4f 	dsb	sy
 80044d4:	613b      	str	r3, [r7, #16]
}
 80044d6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80044d8:	4b12      	ldr	r3, [pc, #72]	; (8004524 <vTaskStartScheduler+0xc0>)
 80044da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80044de:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80044e0:	4b11      	ldr	r3, [pc, #68]	; (8004528 <vTaskStartScheduler+0xc4>)
 80044e2:	2201      	movs	r2, #1
 80044e4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80044e6:	4b11      	ldr	r3, [pc, #68]	; (800452c <vTaskStartScheduler+0xc8>)
 80044e8:	2200      	movs	r2, #0
 80044ea:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80044ec:	f001 f8b8 	bl	8005660 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80044f0:	e00e      	b.n	8004510 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044f8:	d10a      	bne.n	8004510 <vTaskStartScheduler+0xac>
	__asm volatile
 80044fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044fe:	f383 8811 	msr	BASEPRI, r3
 8004502:	f3bf 8f6f 	isb	sy
 8004506:	f3bf 8f4f 	dsb	sy
 800450a:	60fb      	str	r3, [r7, #12]
}
 800450c:	bf00      	nop
 800450e:	e7fe      	b.n	800450e <vTaskStartScheduler+0xaa>
}
 8004510:	bf00      	nop
 8004512:	3718      	adds	r7, #24
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}
 8004518:	08005e58 	.word	0x08005e58
 800451c:	08004b49 	.word	0x08004b49
 8004520:	20001258 	.word	0x20001258
 8004524:	20001254 	.word	0x20001254
 8004528:	20001240 	.word	0x20001240
 800452c:	20001238 	.word	0x20001238

08004530 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004530:	b480      	push	{r7}
 8004532:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004534:	4b04      	ldr	r3, [pc, #16]	; (8004548 <vTaskSuspendAll+0x18>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	3301      	adds	r3, #1
 800453a:	4a03      	ldr	r2, [pc, #12]	; (8004548 <vTaskSuspendAll+0x18>)
 800453c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800453e:	bf00      	nop
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr
 8004548:	2000125c 	.word	0x2000125c

0800454c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004552:	2300      	movs	r3, #0
 8004554:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004556:	2300      	movs	r3, #0
 8004558:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800455a:	4b42      	ldr	r3, [pc, #264]	; (8004664 <xTaskResumeAll+0x118>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10a      	bne.n	8004578 <xTaskResumeAll+0x2c>
	__asm volatile
 8004562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004566:	f383 8811 	msr	BASEPRI, r3
 800456a:	f3bf 8f6f 	isb	sy
 800456e:	f3bf 8f4f 	dsb	sy
 8004572:	603b      	str	r3, [r7, #0]
}
 8004574:	bf00      	nop
 8004576:	e7fe      	b.n	8004576 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004578:	f001 f914 	bl	80057a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800457c:	4b39      	ldr	r3, [pc, #228]	; (8004664 <xTaskResumeAll+0x118>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	3b01      	subs	r3, #1
 8004582:	4a38      	ldr	r2, [pc, #224]	; (8004664 <xTaskResumeAll+0x118>)
 8004584:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004586:	4b37      	ldr	r3, [pc, #220]	; (8004664 <xTaskResumeAll+0x118>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d162      	bne.n	8004654 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800458e:	4b36      	ldr	r3, [pc, #216]	; (8004668 <xTaskResumeAll+0x11c>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d05e      	beq.n	8004654 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004596:	e02f      	b.n	80045f8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004598:	4b34      	ldr	r3, [pc, #208]	; (800466c <xTaskResumeAll+0x120>)
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	3318      	adds	r3, #24
 80045a4:	4618      	mov	r0, r3
 80045a6:	f7fe ffe5 	bl	8003574 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	3304      	adds	r3, #4
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7fe ffe0 	bl	8003574 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045b8:	4b2d      	ldr	r3, [pc, #180]	; (8004670 <xTaskResumeAll+0x124>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	429a      	cmp	r2, r3
 80045be:	d903      	bls.n	80045c8 <xTaskResumeAll+0x7c>
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c4:	4a2a      	ldr	r2, [pc, #168]	; (8004670 <xTaskResumeAll+0x124>)
 80045c6:	6013      	str	r3, [r2, #0]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045cc:	4613      	mov	r3, r2
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	4413      	add	r3, r2
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	4a27      	ldr	r2, [pc, #156]	; (8004674 <xTaskResumeAll+0x128>)
 80045d6:	441a      	add	r2, r3
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	3304      	adds	r3, #4
 80045dc:	4619      	mov	r1, r3
 80045de:	4610      	mov	r0, r2
 80045e0:	f7fe ff6b 	bl	80034ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045e8:	4b23      	ldr	r3, [pc, #140]	; (8004678 <xTaskResumeAll+0x12c>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d302      	bcc.n	80045f8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80045f2:	4b22      	ldr	r3, [pc, #136]	; (800467c <xTaskResumeAll+0x130>)
 80045f4:	2201      	movs	r2, #1
 80045f6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045f8:	4b1c      	ldr	r3, [pc, #112]	; (800466c <xTaskResumeAll+0x120>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d1cb      	bne.n	8004598 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d001      	beq.n	800460a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004606:	f000 fb55 	bl	8004cb4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800460a:	4b1d      	ldr	r3, [pc, #116]	; (8004680 <xTaskResumeAll+0x134>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d010      	beq.n	8004638 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004616:	f000 f847 	bl	80046a8 <xTaskIncrementTick>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d002      	beq.n	8004626 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004620:	4b16      	ldr	r3, [pc, #88]	; (800467c <xTaskResumeAll+0x130>)
 8004622:	2201      	movs	r2, #1
 8004624:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	3b01      	subs	r3, #1
 800462a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d1f1      	bne.n	8004616 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004632:	4b13      	ldr	r3, [pc, #76]	; (8004680 <xTaskResumeAll+0x134>)
 8004634:	2200      	movs	r2, #0
 8004636:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004638:	4b10      	ldr	r3, [pc, #64]	; (800467c <xTaskResumeAll+0x130>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d009      	beq.n	8004654 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004640:	2301      	movs	r3, #1
 8004642:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004644:	4b0f      	ldr	r3, [pc, #60]	; (8004684 <xTaskResumeAll+0x138>)
 8004646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800464a:	601a      	str	r2, [r3, #0]
 800464c:	f3bf 8f4f 	dsb	sy
 8004650:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004654:	f001 f8d6 	bl	8005804 <vPortExitCritical>

	return xAlreadyYielded;
 8004658:	68bb      	ldr	r3, [r7, #8]
}
 800465a:	4618      	mov	r0, r3
 800465c:	3710      	adds	r7, #16
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	2000125c 	.word	0x2000125c
 8004668:	20001234 	.word	0x20001234
 800466c:	200011f4 	.word	0x200011f4
 8004670:	2000123c 	.word	0x2000123c
 8004674:	20000d64 	.word	0x20000d64
 8004678:	20000d60 	.word	0x20000d60
 800467c:	20001248 	.word	0x20001248
 8004680:	20001244 	.word	0x20001244
 8004684:	e000ed04 	.word	0xe000ed04

08004688 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800468e:	4b05      	ldr	r3, [pc, #20]	; (80046a4 <xTaskGetTickCount+0x1c>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004694:	687b      	ldr	r3, [r7, #4]
}
 8004696:	4618      	mov	r0, r3
 8004698:	370c      	adds	r7, #12
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
 80046a2:	bf00      	nop
 80046a4:	20001238 	.word	0x20001238

080046a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b086      	sub	sp, #24
 80046ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80046ae:	2300      	movs	r3, #0
 80046b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046b2:	4b4f      	ldr	r3, [pc, #316]	; (80047f0 <xTaskIncrementTick+0x148>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	f040 808f 	bne.w	80047da <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80046bc:	4b4d      	ldr	r3, [pc, #308]	; (80047f4 <xTaskIncrementTick+0x14c>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	3301      	adds	r3, #1
 80046c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80046c4:	4a4b      	ldr	r2, [pc, #300]	; (80047f4 <xTaskIncrementTick+0x14c>)
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d120      	bne.n	8004712 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80046d0:	4b49      	ldr	r3, [pc, #292]	; (80047f8 <xTaskIncrementTick+0x150>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00a      	beq.n	80046f0 <xTaskIncrementTick+0x48>
	__asm volatile
 80046da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046de:	f383 8811 	msr	BASEPRI, r3
 80046e2:	f3bf 8f6f 	isb	sy
 80046e6:	f3bf 8f4f 	dsb	sy
 80046ea:	603b      	str	r3, [r7, #0]
}
 80046ec:	bf00      	nop
 80046ee:	e7fe      	b.n	80046ee <xTaskIncrementTick+0x46>
 80046f0:	4b41      	ldr	r3, [pc, #260]	; (80047f8 <xTaskIncrementTick+0x150>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	60fb      	str	r3, [r7, #12]
 80046f6:	4b41      	ldr	r3, [pc, #260]	; (80047fc <xTaskIncrementTick+0x154>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a3f      	ldr	r2, [pc, #252]	; (80047f8 <xTaskIncrementTick+0x150>)
 80046fc:	6013      	str	r3, [r2, #0]
 80046fe:	4a3f      	ldr	r2, [pc, #252]	; (80047fc <xTaskIncrementTick+0x154>)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6013      	str	r3, [r2, #0]
 8004704:	4b3e      	ldr	r3, [pc, #248]	; (8004800 <xTaskIncrementTick+0x158>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	3301      	adds	r3, #1
 800470a:	4a3d      	ldr	r2, [pc, #244]	; (8004800 <xTaskIncrementTick+0x158>)
 800470c:	6013      	str	r3, [r2, #0]
 800470e:	f000 fad1 	bl	8004cb4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004712:	4b3c      	ldr	r3, [pc, #240]	; (8004804 <xTaskIncrementTick+0x15c>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	693a      	ldr	r2, [r7, #16]
 8004718:	429a      	cmp	r2, r3
 800471a:	d349      	bcc.n	80047b0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800471c:	4b36      	ldr	r3, [pc, #216]	; (80047f8 <xTaskIncrementTick+0x150>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d104      	bne.n	8004730 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004726:	4b37      	ldr	r3, [pc, #220]	; (8004804 <xTaskIncrementTick+0x15c>)
 8004728:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800472c:	601a      	str	r2, [r3, #0]
					break;
 800472e:	e03f      	b.n	80047b0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004730:	4b31      	ldr	r3, [pc, #196]	; (80047f8 <xTaskIncrementTick+0x150>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004740:	693a      	ldr	r2, [r7, #16]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	429a      	cmp	r2, r3
 8004746:	d203      	bcs.n	8004750 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004748:	4a2e      	ldr	r2, [pc, #184]	; (8004804 <xTaskIncrementTick+0x15c>)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800474e:	e02f      	b.n	80047b0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	3304      	adds	r3, #4
 8004754:	4618      	mov	r0, r3
 8004756:	f7fe ff0d 	bl	8003574 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800475e:	2b00      	cmp	r3, #0
 8004760:	d004      	beq.n	800476c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	3318      	adds	r3, #24
 8004766:	4618      	mov	r0, r3
 8004768:	f7fe ff04 	bl	8003574 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004770:	4b25      	ldr	r3, [pc, #148]	; (8004808 <xTaskIncrementTick+0x160>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	429a      	cmp	r2, r3
 8004776:	d903      	bls.n	8004780 <xTaskIncrementTick+0xd8>
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477c:	4a22      	ldr	r2, [pc, #136]	; (8004808 <xTaskIncrementTick+0x160>)
 800477e:	6013      	str	r3, [r2, #0]
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004784:	4613      	mov	r3, r2
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	4413      	add	r3, r2
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	4a1f      	ldr	r2, [pc, #124]	; (800480c <xTaskIncrementTick+0x164>)
 800478e:	441a      	add	r2, r3
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	3304      	adds	r3, #4
 8004794:	4619      	mov	r1, r3
 8004796:	4610      	mov	r0, r2
 8004798:	f7fe fe8f 	bl	80034ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047a0:	4b1b      	ldr	r3, [pc, #108]	; (8004810 <xTaskIncrementTick+0x168>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d3b8      	bcc.n	800471c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80047aa:	2301      	movs	r3, #1
 80047ac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047ae:	e7b5      	b.n	800471c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80047b0:	4b17      	ldr	r3, [pc, #92]	; (8004810 <xTaskIncrementTick+0x168>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047b6:	4915      	ldr	r1, [pc, #84]	; (800480c <xTaskIncrementTick+0x164>)
 80047b8:	4613      	mov	r3, r2
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	4413      	add	r3, r2
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	440b      	add	r3, r1
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d901      	bls.n	80047cc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80047c8:	2301      	movs	r3, #1
 80047ca:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80047cc:	4b11      	ldr	r3, [pc, #68]	; (8004814 <xTaskIncrementTick+0x16c>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d007      	beq.n	80047e4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80047d4:	2301      	movs	r3, #1
 80047d6:	617b      	str	r3, [r7, #20]
 80047d8:	e004      	b.n	80047e4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80047da:	4b0f      	ldr	r3, [pc, #60]	; (8004818 <xTaskIncrementTick+0x170>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	3301      	adds	r3, #1
 80047e0:	4a0d      	ldr	r2, [pc, #52]	; (8004818 <xTaskIncrementTick+0x170>)
 80047e2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80047e4:	697b      	ldr	r3, [r7, #20]
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3718      	adds	r7, #24
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	2000125c 	.word	0x2000125c
 80047f4:	20001238 	.word	0x20001238
 80047f8:	200011ec 	.word	0x200011ec
 80047fc:	200011f0 	.word	0x200011f0
 8004800:	2000124c 	.word	0x2000124c
 8004804:	20001254 	.word	0x20001254
 8004808:	2000123c 	.word	0x2000123c
 800480c:	20000d64 	.word	0x20000d64
 8004810:	20000d60 	.word	0x20000d60
 8004814:	20001248 	.word	0x20001248
 8004818:	20001244 	.word	0x20001244

0800481c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800481c:	b480      	push	{r7}
 800481e:	b085      	sub	sp, #20
 8004820:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004822:	4b28      	ldr	r3, [pc, #160]	; (80048c4 <vTaskSwitchContext+0xa8>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d003      	beq.n	8004832 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800482a:	4b27      	ldr	r3, [pc, #156]	; (80048c8 <vTaskSwitchContext+0xac>)
 800482c:	2201      	movs	r2, #1
 800482e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004830:	e041      	b.n	80048b6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8004832:	4b25      	ldr	r3, [pc, #148]	; (80048c8 <vTaskSwitchContext+0xac>)
 8004834:	2200      	movs	r2, #0
 8004836:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004838:	4b24      	ldr	r3, [pc, #144]	; (80048cc <vTaskSwitchContext+0xb0>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	60fb      	str	r3, [r7, #12]
 800483e:	e010      	b.n	8004862 <vTaskSwitchContext+0x46>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d10a      	bne.n	800485c <vTaskSwitchContext+0x40>
	__asm volatile
 8004846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800484a:	f383 8811 	msr	BASEPRI, r3
 800484e:	f3bf 8f6f 	isb	sy
 8004852:	f3bf 8f4f 	dsb	sy
 8004856:	607b      	str	r3, [r7, #4]
}
 8004858:	bf00      	nop
 800485a:	e7fe      	b.n	800485a <vTaskSwitchContext+0x3e>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	3b01      	subs	r3, #1
 8004860:	60fb      	str	r3, [r7, #12]
 8004862:	491b      	ldr	r1, [pc, #108]	; (80048d0 <vTaskSwitchContext+0xb4>)
 8004864:	68fa      	ldr	r2, [r7, #12]
 8004866:	4613      	mov	r3, r2
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	4413      	add	r3, r2
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	440b      	add	r3, r1
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d0e4      	beq.n	8004840 <vTaskSwitchContext+0x24>
 8004876:	68fa      	ldr	r2, [r7, #12]
 8004878:	4613      	mov	r3, r2
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	4413      	add	r3, r2
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	4a13      	ldr	r2, [pc, #76]	; (80048d0 <vTaskSwitchContext+0xb4>)
 8004882:	4413      	add	r3, r2
 8004884:	60bb      	str	r3, [r7, #8]
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	685a      	ldr	r2, [r3, #4]
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	605a      	str	r2, [r3, #4]
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	685a      	ldr	r2, [r3, #4]
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	3308      	adds	r3, #8
 8004898:	429a      	cmp	r2, r3
 800489a:	d104      	bne.n	80048a6 <vTaskSwitchContext+0x8a>
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	685a      	ldr	r2, [r3, #4]
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	605a      	str	r2, [r3, #4]
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	4a09      	ldr	r2, [pc, #36]	; (80048d4 <vTaskSwitchContext+0xb8>)
 80048ae:	6013      	str	r3, [r2, #0]
 80048b0:	4a06      	ldr	r2, [pc, #24]	; (80048cc <vTaskSwitchContext+0xb0>)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6013      	str	r3, [r2, #0]
}
 80048b6:	bf00      	nop
 80048b8:	3714      	adds	r7, #20
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	2000125c 	.word	0x2000125c
 80048c8:	20001248 	.word	0x20001248
 80048cc:	2000123c 	.word	0x2000123c
 80048d0:	20000d64 	.word	0x20000d64
 80048d4:	20000d60 	.word	0x20000d60

080048d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d10a      	bne.n	80048fe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80048e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ec:	f383 8811 	msr	BASEPRI, r3
 80048f0:	f3bf 8f6f 	isb	sy
 80048f4:	f3bf 8f4f 	dsb	sy
 80048f8:	60fb      	str	r3, [r7, #12]
}
 80048fa:	bf00      	nop
 80048fc:	e7fe      	b.n	80048fc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80048fe:	4b07      	ldr	r3, [pc, #28]	; (800491c <vTaskPlaceOnEventList+0x44>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	3318      	adds	r3, #24
 8004904:	4619      	mov	r1, r3
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f7fe fdfb 	bl	8003502 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800490c:	2101      	movs	r1, #1
 800490e:	6838      	ldr	r0, [r7, #0]
 8004910:	f000 fa7c 	bl	8004e0c <prvAddCurrentTaskToDelayedList>
}
 8004914:	bf00      	nop
 8004916:	3710      	adds	r7, #16
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}
 800491c:	20000d60 	.word	0x20000d60

08004920 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004920:	b580      	push	{r7, lr}
 8004922:	b086      	sub	sp, #24
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d10a      	bne.n	8004948 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004936:	f383 8811 	msr	BASEPRI, r3
 800493a:	f3bf 8f6f 	isb	sy
 800493e:	f3bf 8f4f 	dsb	sy
 8004942:	617b      	str	r3, [r7, #20]
}
 8004944:	bf00      	nop
 8004946:	e7fe      	b.n	8004946 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004948:	4b0a      	ldr	r3, [pc, #40]	; (8004974 <vTaskPlaceOnEventListRestricted+0x54>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	3318      	adds	r3, #24
 800494e:	4619      	mov	r1, r3
 8004950:	68f8      	ldr	r0, [r7, #12]
 8004952:	f7fe fdb2 	bl	80034ba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d002      	beq.n	8004962 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800495c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004960:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004962:	6879      	ldr	r1, [r7, #4]
 8004964:	68b8      	ldr	r0, [r7, #8]
 8004966:	f000 fa51 	bl	8004e0c <prvAddCurrentTaskToDelayedList>
	}
 800496a:	bf00      	nop
 800496c:	3718      	adds	r7, #24
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	20000d60 	.word	0x20000d60

08004978 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b086      	sub	sp, #24
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d10a      	bne.n	80049a4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800498e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004992:	f383 8811 	msr	BASEPRI, r3
 8004996:	f3bf 8f6f 	isb	sy
 800499a:	f3bf 8f4f 	dsb	sy
 800499e:	60fb      	str	r3, [r7, #12]
}
 80049a0:	bf00      	nop
 80049a2:	e7fe      	b.n	80049a2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	3318      	adds	r3, #24
 80049a8:	4618      	mov	r0, r3
 80049aa:	f7fe fde3 	bl	8003574 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049ae:	4b1e      	ldr	r3, [pc, #120]	; (8004a28 <xTaskRemoveFromEventList+0xb0>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d11d      	bne.n	80049f2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	3304      	adds	r3, #4
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7fe fdda 	bl	8003574 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049c4:	4b19      	ldr	r3, [pc, #100]	; (8004a2c <xTaskRemoveFromEventList+0xb4>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d903      	bls.n	80049d4 <xTaskRemoveFromEventList+0x5c>
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d0:	4a16      	ldr	r2, [pc, #88]	; (8004a2c <xTaskRemoveFromEventList+0xb4>)
 80049d2:	6013      	str	r3, [r2, #0]
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049d8:	4613      	mov	r3, r2
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	4413      	add	r3, r2
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	4a13      	ldr	r2, [pc, #76]	; (8004a30 <xTaskRemoveFromEventList+0xb8>)
 80049e2:	441a      	add	r2, r3
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	3304      	adds	r3, #4
 80049e8:	4619      	mov	r1, r3
 80049ea:	4610      	mov	r0, r2
 80049ec:	f7fe fd65 	bl	80034ba <vListInsertEnd>
 80049f0:	e005      	b.n	80049fe <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	3318      	adds	r3, #24
 80049f6:	4619      	mov	r1, r3
 80049f8:	480e      	ldr	r0, [pc, #56]	; (8004a34 <xTaskRemoveFromEventList+0xbc>)
 80049fa:	f7fe fd5e 	bl	80034ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a02:	4b0d      	ldr	r3, [pc, #52]	; (8004a38 <xTaskRemoveFromEventList+0xc0>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d905      	bls.n	8004a18 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004a10:	4b0a      	ldr	r3, [pc, #40]	; (8004a3c <xTaskRemoveFromEventList+0xc4>)
 8004a12:	2201      	movs	r2, #1
 8004a14:	601a      	str	r2, [r3, #0]
 8004a16:	e001      	b.n	8004a1c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004a1c:	697b      	ldr	r3, [r7, #20]
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3718      	adds	r7, #24
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	2000125c 	.word	0x2000125c
 8004a2c:	2000123c 	.word	0x2000123c
 8004a30:	20000d64 	.word	0x20000d64
 8004a34:	200011f4 	.word	0x200011f4
 8004a38:	20000d60 	.word	0x20000d60
 8004a3c:	20001248 	.word	0x20001248

08004a40 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004a48:	4b06      	ldr	r3, [pc, #24]	; (8004a64 <vTaskInternalSetTimeOutState+0x24>)
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004a50:	4b05      	ldr	r3, [pc, #20]	; (8004a68 <vTaskInternalSetTimeOutState+0x28>)
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	605a      	str	r2, [r3, #4]
}
 8004a58:	bf00      	nop
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr
 8004a64:	2000124c 	.word	0x2000124c
 8004a68:	20001238 	.word	0x20001238

08004a6c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b088      	sub	sp, #32
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d10a      	bne.n	8004a92 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a80:	f383 8811 	msr	BASEPRI, r3
 8004a84:	f3bf 8f6f 	isb	sy
 8004a88:	f3bf 8f4f 	dsb	sy
 8004a8c:	613b      	str	r3, [r7, #16]
}
 8004a8e:	bf00      	nop
 8004a90:	e7fe      	b.n	8004a90 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d10a      	bne.n	8004aae <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a9c:	f383 8811 	msr	BASEPRI, r3
 8004aa0:	f3bf 8f6f 	isb	sy
 8004aa4:	f3bf 8f4f 	dsb	sy
 8004aa8:	60fb      	str	r3, [r7, #12]
}
 8004aaa:	bf00      	nop
 8004aac:	e7fe      	b.n	8004aac <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004aae:	f000 fe79 	bl	80057a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004ab2:	4b1d      	ldr	r3, [pc, #116]	; (8004b28 <xTaskCheckForTimeOut+0xbc>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	69ba      	ldr	r2, [r7, #24]
 8004abe:	1ad3      	subs	r3, r2, r3
 8004ac0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004aca:	d102      	bne.n	8004ad2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004acc:	2300      	movs	r3, #0
 8004ace:	61fb      	str	r3, [r7, #28]
 8004ad0:	e023      	b.n	8004b1a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	4b15      	ldr	r3, [pc, #84]	; (8004b2c <xTaskCheckForTimeOut+0xc0>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d007      	beq.n	8004aee <xTaskCheckForTimeOut+0x82>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	69ba      	ldr	r2, [r7, #24]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d302      	bcc.n	8004aee <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	61fb      	str	r3, [r7, #28]
 8004aec:	e015      	b.n	8004b1a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	697a      	ldr	r2, [r7, #20]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d20b      	bcs.n	8004b10 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	1ad2      	subs	r2, r2, r3
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f7ff ff9b 	bl	8004a40 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	61fb      	str	r3, [r7, #28]
 8004b0e:	e004      	b.n	8004b1a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	2200      	movs	r2, #0
 8004b14:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004b16:	2301      	movs	r3, #1
 8004b18:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004b1a:	f000 fe73 	bl	8005804 <vPortExitCritical>

	return xReturn;
 8004b1e:	69fb      	ldr	r3, [r7, #28]
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3720      	adds	r7, #32
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	20001238 	.word	0x20001238
 8004b2c:	2000124c 	.word	0x2000124c

08004b30 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004b30:	b480      	push	{r7}
 8004b32:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004b34:	4b03      	ldr	r3, [pc, #12]	; (8004b44 <vTaskMissedYield+0x14>)
 8004b36:	2201      	movs	r2, #1
 8004b38:	601a      	str	r2, [r3, #0]
}
 8004b3a:	bf00      	nop
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr
 8004b44:	20001248 	.word	0x20001248

08004b48 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004b50:	f000 f852 	bl	8004bf8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004b54:	4b06      	ldr	r3, [pc, #24]	; (8004b70 <prvIdleTask+0x28>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d9f9      	bls.n	8004b50 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004b5c:	4b05      	ldr	r3, [pc, #20]	; (8004b74 <prvIdleTask+0x2c>)
 8004b5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b62:	601a      	str	r2, [r3, #0]
 8004b64:	f3bf 8f4f 	dsb	sy
 8004b68:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004b6c:	e7f0      	b.n	8004b50 <prvIdleTask+0x8>
 8004b6e:	bf00      	nop
 8004b70:	20000d64 	.word	0x20000d64
 8004b74:	e000ed04 	.word	0xe000ed04

08004b78 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b7e:	2300      	movs	r3, #0
 8004b80:	607b      	str	r3, [r7, #4]
 8004b82:	e00c      	b.n	8004b9e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	4613      	mov	r3, r2
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	4413      	add	r3, r2
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	4a12      	ldr	r2, [pc, #72]	; (8004bd8 <prvInitialiseTaskLists+0x60>)
 8004b90:	4413      	add	r3, r2
 8004b92:	4618      	mov	r0, r3
 8004b94:	f7fe fc64 	bl	8003460 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	607b      	str	r3, [r7, #4]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2b37      	cmp	r3, #55	; 0x37
 8004ba2:	d9ef      	bls.n	8004b84 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004ba4:	480d      	ldr	r0, [pc, #52]	; (8004bdc <prvInitialiseTaskLists+0x64>)
 8004ba6:	f7fe fc5b 	bl	8003460 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004baa:	480d      	ldr	r0, [pc, #52]	; (8004be0 <prvInitialiseTaskLists+0x68>)
 8004bac:	f7fe fc58 	bl	8003460 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004bb0:	480c      	ldr	r0, [pc, #48]	; (8004be4 <prvInitialiseTaskLists+0x6c>)
 8004bb2:	f7fe fc55 	bl	8003460 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004bb6:	480c      	ldr	r0, [pc, #48]	; (8004be8 <prvInitialiseTaskLists+0x70>)
 8004bb8:	f7fe fc52 	bl	8003460 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004bbc:	480b      	ldr	r0, [pc, #44]	; (8004bec <prvInitialiseTaskLists+0x74>)
 8004bbe:	f7fe fc4f 	bl	8003460 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004bc2:	4b0b      	ldr	r3, [pc, #44]	; (8004bf0 <prvInitialiseTaskLists+0x78>)
 8004bc4:	4a05      	ldr	r2, [pc, #20]	; (8004bdc <prvInitialiseTaskLists+0x64>)
 8004bc6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004bc8:	4b0a      	ldr	r3, [pc, #40]	; (8004bf4 <prvInitialiseTaskLists+0x7c>)
 8004bca:	4a05      	ldr	r2, [pc, #20]	; (8004be0 <prvInitialiseTaskLists+0x68>)
 8004bcc:	601a      	str	r2, [r3, #0]
}
 8004bce:	bf00      	nop
 8004bd0:	3708      	adds	r7, #8
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	20000d64 	.word	0x20000d64
 8004bdc:	200011c4 	.word	0x200011c4
 8004be0:	200011d8 	.word	0x200011d8
 8004be4:	200011f4 	.word	0x200011f4
 8004be8:	20001208 	.word	0x20001208
 8004bec:	20001220 	.word	0x20001220
 8004bf0:	200011ec 	.word	0x200011ec
 8004bf4:	200011f0 	.word	0x200011f0

08004bf8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004bfe:	e019      	b.n	8004c34 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004c00:	f000 fdd0 	bl	80057a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c04:	4b10      	ldr	r3, [pc, #64]	; (8004c48 <prvCheckTasksWaitingTermination+0x50>)
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	3304      	adds	r3, #4
 8004c10:	4618      	mov	r0, r3
 8004c12:	f7fe fcaf 	bl	8003574 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004c16:	4b0d      	ldr	r3, [pc, #52]	; (8004c4c <prvCheckTasksWaitingTermination+0x54>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	4a0b      	ldr	r2, [pc, #44]	; (8004c4c <prvCheckTasksWaitingTermination+0x54>)
 8004c1e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004c20:	4b0b      	ldr	r3, [pc, #44]	; (8004c50 <prvCheckTasksWaitingTermination+0x58>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	3b01      	subs	r3, #1
 8004c26:	4a0a      	ldr	r2, [pc, #40]	; (8004c50 <prvCheckTasksWaitingTermination+0x58>)
 8004c28:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004c2a:	f000 fdeb 	bl	8005804 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 f810 	bl	8004c54 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c34:	4b06      	ldr	r3, [pc, #24]	; (8004c50 <prvCheckTasksWaitingTermination+0x58>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d1e1      	bne.n	8004c00 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004c3c:	bf00      	nop
 8004c3e:	bf00      	nop
 8004c40:	3708      	adds	r7, #8
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	20001208 	.word	0x20001208
 8004c4c:	20001234 	.word	0x20001234
 8004c50:	2000121c 	.word	0x2000121c

08004c54 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b084      	sub	sp, #16
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d108      	bne.n	8004c78 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f000 ff88 	bl	8005b80 <vPortFree>
				vPortFree( pxTCB );
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f000 ff85 	bl	8005b80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004c76:	e018      	b.n	8004caa <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d103      	bne.n	8004c8a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 ff7c 	bl	8005b80 <vPortFree>
	}
 8004c88:	e00f      	b.n	8004caa <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d00a      	beq.n	8004caa <prvDeleteTCB+0x56>
	__asm volatile
 8004c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c98:	f383 8811 	msr	BASEPRI, r3
 8004c9c:	f3bf 8f6f 	isb	sy
 8004ca0:	f3bf 8f4f 	dsb	sy
 8004ca4:	60fb      	str	r3, [r7, #12]
}
 8004ca6:	bf00      	nop
 8004ca8:	e7fe      	b.n	8004ca8 <prvDeleteTCB+0x54>
	}
 8004caa:	bf00      	nop
 8004cac:	3710      	adds	r7, #16
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
	...

08004cb4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004cba:	4b0c      	ldr	r3, [pc, #48]	; (8004cec <prvResetNextTaskUnblockTime+0x38>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d104      	bne.n	8004cce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004cc4:	4b0a      	ldr	r3, [pc, #40]	; (8004cf0 <prvResetNextTaskUnblockTime+0x3c>)
 8004cc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004cca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004ccc:	e008      	b.n	8004ce0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cce:	4b07      	ldr	r3, [pc, #28]	; (8004cec <prvResetNextTaskUnblockTime+0x38>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	4a04      	ldr	r2, [pc, #16]	; (8004cf0 <prvResetNextTaskUnblockTime+0x3c>)
 8004cde:	6013      	str	r3, [r2, #0]
}
 8004ce0:	bf00      	nop
 8004ce2:	370c      	adds	r7, #12
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr
 8004cec:	200011ec 	.word	0x200011ec
 8004cf0:	20001254 	.word	0x20001254

08004cf4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004cfa:	4b0b      	ldr	r3, [pc, #44]	; (8004d28 <xTaskGetSchedulerState+0x34>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d102      	bne.n	8004d08 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004d02:	2301      	movs	r3, #1
 8004d04:	607b      	str	r3, [r7, #4]
 8004d06:	e008      	b.n	8004d1a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d08:	4b08      	ldr	r3, [pc, #32]	; (8004d2c <xTaskGetSchedulerState+0x38>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d102      	bne.n	8004d16 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004d10:	2302      	movs	r3, #2
 8004d12:	607b      	str	r3, [r7, #4]
 8004d14:	e001      	b.n	8004d1a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004d16:	2300      	movs	r3, #0
 8004d18:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004d1a:	687b      	ldr	r3, [r7, #4]
	}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	370c      	adds	r7, #12
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr
 8004d28:	20001240 	.word	0x20001240
 8004d2c:	2000125c 	.word	0x2000125c

08004d30 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b086      	sub	sp, #24
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d056      	beq.n	8004df4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004d46:	4b2e      	ldr	r3, [pc, #184]	; (8004e00 <xTaskPriorityDisinherit+0xd0>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	693a      	ldr	r2, [r7, #16]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d00a      	beq.n	8004d66 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d54:	f383 8811 	msr	BASEPRI, r3
 8004d58:	f3bf 8f6f 	isb	sy
 8004d5c:	f3bf 8f4f 	dsb	sy
 8004d60:	60fb      	str	r3, [r7, #12]
}
 8004d62:	bf00      	nop
 8004d64:	e7fe      	b.n	8004d64 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d10a      	bne.n	8004d84 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d72:	f383 8811 	msr	BASEPRI, r3
 8004d76:	f3bf 8f6f 	isb	sy
 8004d7a:	f3bf 8f4f 	dsb	sy
 8004d7e:	60bb      	str	r3, [r7, #8]
}
 8004d80:	bf00      	nop
 8004d82:	e7fe      	b.n	8004d82 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d88:	1e5a      	subs	r2, r3, #1
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d02c      	beq.n	8004df4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d128      	bne.n	8004df4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	3304      	adds	r3, #4
 8004da6:	4618      	mov	r0, r3
 8004da8:	f7fe fbe4 	bl	8003574 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dc4:	4b0f      	ldr	r3, [pc, #60]	; (8004e04 <xTaskPriorityDisinherit+0xd4>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d903      	bls.n	8004dd4 <xTaskPriorityDisinherit+0xa4>
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd0:	4a0c      	ldr	r2, [pc, #48]	; (8004e04 <xTaskPriorityDisinherit+0xd4>)
 8004dd2:	6013      	str	r3, [r2, #0]
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dd8:	4613      	mov	r3, r2
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	4413      	add	r3, r2
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	4a09      	ldr	r2, [pc, #36]	; (8004e08 <xTaskPriorityDisinherit+0xd8>)
 8004de2:	441a      	add	r2, r3
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	3304      	adds	r3, #4
 8004de8:	4619      	mov	r1, r3
 8004dea:	4610      	mov	r0, r2
 8004dec:	f7fe fb65 	bl	80034ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004df0:	2301      	movs	r3, #1
 8004df2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004df4:	697b      	ldr	r3, [r7, #20]
	}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3718      	adds	r7, #24
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	20000d60 	.word	0x20000d60
 8004e04:	2000123c 	.word	0x2000123c
 8004e08:	20000d64 	.word	0x20000d64

08004e0c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004e16:	4b21      	ldr	r3, [pc, #132]	; (8004e9c <prvAddCurrentTaskToDelayedList+0x90>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e1c:	4b20      	ldr	r3, [pc, #128]	; (8004ea0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	3304      	adds	r3, #4
 8004e22:	4618      	mov	r0, r3
 8004e24:	f7fe fba6 	bl	8003574 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e2e:	d10a      	bne.n	8004e46 <prvAddCurrentTaskToDelayedList+0x3a>
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d007      	beq.n	8004e46 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e36:	4b1a      	ldr	r3, [pc, #104]	; (8004ea0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	3304      	adds	r3, #4
 8004e3c:	4619      	mov	r1, r3
 8004e3e:	4819      	ldr	r0, [pc, #100]	; (8004ea4 <prvAddCurrentTaskToDelayedList+0x98>)
 8004e40:	f7fe fb3b 	bl	80034ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004e44:	e026      	b.n	8004e94 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004e46:	68fa      	ldr	r2, [r7, #12]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4413      	add	r3, r2
 8004e4c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004e4e:	4b14      	ldr	r3, [pc, #80]	; (8004ea0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	68ba      	ldr	r2, [r7, #8]
 8004e54:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004e56:	68ba      	ldr	r2, [r7, #8]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d209      	bcs.n	8004e72 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e5e:	4b12      	ldr	r3, [pc, #72]	; (8004ea8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	4b0f      	ldr	r3, [pc, #60]	; (8004ea0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	3304      	adds	r3, #4
 8004e68:	4619      	mov	r1, r3
 8004e6a:	4610      	mov	r0, r2
 8004e6c:	f7fe fb49 	bl	8003502 <vListInsert>
}
 8004e70:	e010      	b.n	8004e94 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e72:	4b0e      	ldr	r3, [pc, #56]	; (8004eac <prvAddCurrentTaskToDelayedList+0xa0>)
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	4b0a      	ldr	r3, [pc, #40]	; (8004ea0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	3304      	adds	r3, #4
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	4610      	mov	r0, r2
 8004e80:	f7fe fb3f 	bl	8003502 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004e84:	4b0a      	ldr	r3, [pc, #40]	; (8004eb0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	68ba      	ldr	r2, [r7, #8]
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d202      	bcs.n	8004e94 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004e8e:	4a08      	ldr	r2, [pc, #32]	; (8004eb0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	6013      	str	r3, [r2, #0]
}
 8004e94:	bf00      	nop
 8004e96:	3710      	adds	r7, #16
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	20001238 	.word	0x20001238
 8004ea0:	20000d60 	.word	0x20000d60
 8004ea4:	20001220 	.word	0x20001220
 8004ea8:	200011f0 	.word	0x200011f0
 8004eac:	200011ec 	.word	0x200011ec
 8004eb0:	20001254 	.word	0x20001254

08004eb4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b08a      	sub	sp, #40	; 0x28
 8004eb8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004ebe:	f000 fb07 	bl	80054d0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004ec2:	4b1c      	ldr	r3, [pc, #112]	; (8004f34 <xTimerCreateTimerTask+0x80>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d021      	beq.n	8004f0e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004ed2:	1d3a      	adds	r2, r7, #4
 8004ed4:	f107 0108 	add.w	r1, r7, #8
 8004ed8:	f107 030c 	add.w	r3, r7, #12
 8004edc:	4618      	mov	r0, r3
 8004ede:	f7fe faa5 	bl	800342c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004ee2:	6879      	ldr	r1, [r7, #4]
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	9202      	str	r2, [sp, #8]
 8004eea:	9301      	str	r3, [sp, #4]
 8004eec:	2302      	movs	r3, #2
 8004eee:	9300      	str	r3, [sp, #0]
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	460a      	mov	r2, r1
 8004ef4:	4910      	ldr	r1, [pc, #64]	; (8004f38 <xTimerCreateTimerTask+0x84>)
 8004ef6:	4811      	ldr	r0, [pc, #68]	; (8004f3c <xTimerCreateTimerTask+0x88>)
 8004ef8:	f7ff f8de 	bl	80040b8 <xTaskCreateStatic>
 8004efc:	4603      	mov	r3, r0
 8004efe:	4a10      	ldr	r2, [pc, #64]	; (8004f40 <xTimerCreateTimerTask+0x8c>)
 8004f00:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004f02:	4b0f      	ldr	r3, [pc, #60]	; (8004f40 <xTimerCreateTimerTask+0x8c>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d001      	beq.n	8004f0e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d10a      	bne.n	8004f2a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f18:	f383 8811 	msr	BASEPRI, r3
 8004f1c:	f3bf 8f6f 	isb	sy
 8004f20:	f3bf 8f4f 	dsb	sy
 8004f24:	613b      	str	r3, [r7, #16]
}
 8004f26:	bf00      	nop
 8004f28:	e7fe      	b.n	8004f28 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004f2a:	697b      	ldr	r3, [r7, #20]
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3718      	adds	r7, #24
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}
 8004f34:	20001290 	.word	0x20001290
 8004f38:	08005e60 	.word	0x08005e60
 8004f3c:	08005079 	.word	0x08005079
 8004f40:	20001294 	.word	0x20001294

08004f44 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b08a      	sub	sp, #40	; 0x28
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	60f8      	str	r0, [r7, #12]
 8004f4c:	60b9      	str	r1, [r7, #8]
 8004f4e:	607a      	str	r2, [r7, #4]
 8004f50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004f52:	2300      	movs	r3, #0
 8004f54:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d10a      	bne.n	8004f72 <xTimerGenericCommand+0x2e>
	__asm volatile
 8004f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f60:	f383 8811 	msr	BASEPRI, r3
 8004f64:	f3bf 8f6f 	isb	sy
 8004f68:	f3bf 8f4f 	dsb	sy
 8004f6c:	623b      	str	r3, [r7, #32]
}
 8004f6e:	bf00      	nop
 8004f70:	e7fe      	b.n	8004f70 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004f72:	4b1a      	ldr	r3, [pc, #104]	; (8004fdc <xTimerGenericCommand+0x98>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d02a      	beq.n	8004fd0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	2b05      	cmp	r3, #5
 8004f8a:	dc18      	bgt.n	8004fbe <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004f8c:	f7ff feb2 	bl	8004cf4 <xTaskGetSchedulerState>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	d109      	bne.n	8004faa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004f96:	4b11      	ldr	r3, [pc, #68]	; (8004fdc <xTimerGenericCommand+0x98>)
 8004f98:	6818      	ldr	r0, [r3, #0]
 8004f9a:	f107 0110 	add.w	r1, r7, #16
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fa2:	f7fe fc15 	bl	80037d0 <xQueueGenericSend>
 8004fa6:	6278      	str	r0, [r7, #36]	; 0x24
 8004fa8:	e012      	b.n	8004fd0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004faa:	4b0c      	ldr	r3, [pc, #48]	; (8004fdc <xTimerGenericCommand+0x98>)
 8004fac:	6818      	ldr	r0, [r3, #0]
 8004fae:	f107 0110 	add.w	r1, r7, #16
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f7fe fc0b 	bl	80037d0 <xQueueGenericSend>
 8004fba:	6278      	str	r0, [r7, #36]	; 0x24
 8004fbc:	e008      	b.n	8004fd0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004fbe:	4b07      	ldr	r3, [pc, #28]	; (8004fdc <xTimerGenericCommand+0x98>)
 8004fc0:	6818      	ldr	r0, [r3, #0]
 8004fc2:	f107 0110 	add.w	r1, r7, #16
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	683a      	ldr	r2, [r7, #0]
 8004fca:	f7fe fcff 	bl	80039cc <xQueueGenericSendFromISR>
 8004fce:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3728      	adds	r7, #40	; 0x28
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	20001290 	.word	0x20001290

08004fe0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b088      	sub	sp, #32
 8004fe4:	af02      	add	r7, sp, #8
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fea:	4b22      	ldr	r3, [pc, #136]	; (8005074 <prvProcessExpiredTimer+0x94>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	3304      	adds	r3, #4
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f7fe fabb 	bl	8003574 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005004:	f003 0304 	and.w	r3, r3, #4
 8005008:	2b00      	cmp	r3, #0
 800500a:	d022      	beq.n	8005052 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	699a      	ldr	r2, [r3, #24]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	18d1      	adds	r1, r2, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	683a      	ldr	r2, [r7, #0]
 8005018:	6978      	ldr	r0, [r7, #20]
 800501a:	f000 f8d1 	bl	80051c0 <prvInsertTimerInActiveList>
 800501e:	4603      	mov	r3, r0
 8005020:	2b00      	cmp	r3, #0
 8005022:	d01f      	beq.n	8005064 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005024:	2300      	movs	r3, #0
 8005026:	9300      	str	r3, [sp, #0]
 8005028:	2300      	movs	r3, #0
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	2100      	movs	r1, #0
 800502e:	6978      	ldr	r0, [r7, #20]
 8005030:	f7ff ff88 	bl	8004f44 <xTimerGenericCommand>
 8005034:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d113      	bne.n	8005064 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800503c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005040:	f383 8811 	msr	BASEPRI, r3
 8005044:	f3bf 8f6f 	isb	sy
 8005048:	f3bf 8f4f 	dsb	sy
 800504c:	60fb      	str	r3, [r7, #12]
}
 800504e:	bf00      	nop
 8005050:	e7fe      	b.n	8005050 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005058:	f023 0301 	bic.w	r3, r3, #1
 800505c:	b2da      	uxtb	r2, r3
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	6a1b      	ldr	r3, [r3, #32]
 8005068:	6978      	ldr	r0, [r7, #20]
 800506a:	4798      	blx	r3
}
 800506c:	bf00      	nop
 800506e:	3718      	adds	r7, #24
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}
 8005074:	20001288 	.word	0x20001288

08005078 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005080:	f107 0308 	add.w	r3, r7, #8
 8005084:	4618      	mov	r0, r3
 8005086:	f000 f857 	bl	8005138 <prvGetNextExpireTime>
 800508a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	4619      	mov	r1, r3
 8005090:	68f8      	ldr	r0, [r7, #12]
 8005092:	f000 f803 	bl	800509c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005096:	f000 f8d5 	bl	8005244 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800509a:	e7f1      	b.n	8005080 <prvTimerTask+0x8>

0800509c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80050a6:	f7ff fa43 	bl	8004530 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80050aa:	f107 0308 	add.w	r3, r7, #8
 80050ae:	4618      	mov	r0, r3
 80050b0:	f000 f866 	bl	8005180 <prvSampleTimeNow>
 80050b4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d130      	bne.n	800511e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d10a      	bne.n	80050d8 <prvProcessTimerOrBlockTask+0x3c>
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d806      	bhi.n	80050d8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80050ca:	f7ff fa3f 	bl	800454c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80050ce:	68f9      	ldr	r1, [r7, #12]
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f7ff ff85 	bl	8004fe0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80050d6:	e024      	b.n	8005122 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d008      	beq.n	80050f0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80050de:	4b13      	ldr	r3, [pc, #76]	; (800512c <prvProcessTimerOrBlockTask+0x90>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d101      	bne.n	80050ec <prvProcessTimerOrBlockTask+0x50>
 80050e8:	2301      	movs	r3, #1
 80050ea:	e000      	b.n	80050ee <prvProcessTimerOrBlockTask+0x52>
 80050ec:	2300      	movs	r3, #0
 80050ee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80050f0:	4b0f      	ldr	r3, [pc, #60]	; (8005130 <prvProcessTimerOrBlockTask+0x94>)
 80050f2:	6818      	ldr	r0, [r3, #0]
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	683a      	ldr	r2, [r7, #0]
 80050fc:	4619      	mov	r1, r3
 80050fe:	f7fe ffa7 	bl	8004050 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005102:	f7ff fa23 	bl	800454c <xTaskResumeAll>
 8005106:	4603      	mov	r3, r0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d10a      	bne.n	8005122 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800510c:	4b09      	ldr	r3, [pc, #36]	; (8005134 <prvProcessTimerOrBlockTask+0x98>)
 800510e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005112:	601a      	str	r2, [r3, #0]
 8005114:	f3bf 8f4f 	dsb	sy
 8005118:	f3bf 8f6f 	isb	sy
}
 800511c:	e001      	b.n	8005122 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800511e:	f7ff fa15 	bl	800454c <xTaskResumeAll>
}
 8005122:	bf00      	nop
 8005124:	3710      	adds	r7, #16
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	2000128c 	.word	0x2000128c
 8005130:	20001290 	.word	0x20001290
 8005134:	e000ed04 	.word	0xe000ed04

08005138 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005138:	b480      	push	{r7}
 800513a:	b085      	sub	sp, #20
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005140:	4b0e      	ldr	r3, [pc, #56]	; (800517c <prvGetNextExpireTime+0x44>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d101      	bne.n	800514e <prvGetNextExpireTime+0x16>
 800514a:	2201      	movs	r2, #1
 800514c:	e000      	b.n	8005150 <prvGetNextExpireTime+0x18>
 800514e:	2200      	movs	r2, #0
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d105      	bne.n	8005168 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800515c:	4b07      	ldr	r3, [pc, #28]	; (800517c <prvGetNextExpireTime+0x44>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	60fb      	str	r3, [r7, #12]
 8005166:	e001      	b.n	800516c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005168:	2300      	movs	r3, #0
 800516a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800516c:	68fb      	ldr	r3, [r7, #12]
}
 800516e:	4618      	mov	r0, r3
 8005170:	3714      	adds	r7, #20
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	20001288 	.word	0x20001288

08005180 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005188:	f7ff fa7e 	bl	8004688 <xTaskGetTickCount>
 800518c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800518e:	4b0b      	ldr	r3, [pc, #44]	; (80051bc <prvSampleTimeNow+0x3c>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68fa      	ldr	r2, [r7, #12]
 8005194:	429a      	cmp	r2, r3
 8005196:	d205      	bcs.n	80051a4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005198:	f000 f936 	bl	8005408 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	601a      	str	r2, [r3, #0]
 80051a2:	e002      	b.n	80051aa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80051aa:	4a04      	ldr	r2, [pc, #16]	; (80051bc <prvSampleTimeNow+0x3c>)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80051b0:	68fb      	ldr	r3, [r7, #12]
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3710      	adds	r7, #16
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	20001298 	.word	0x20001298

080051c0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b086      	sub	sp, #24
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	607a      	str	r2, [r7, #4]
 80051cc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80051ce:	2300      	movs	r3, #0
 80051d0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	68ba      	ldr	r2, [r7, #8]
 80051d6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80051de:	68ba      	ldr	r2, [r7, #8]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d812      	bhi.n	800520c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	1ad2      	subs	r2, r2, r3
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	699b      	ldr	r3, [r3, #24]
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d302      	bcc.n	80051fa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80051f4:	2301      	movs	r3, #1
 80051f6:	617b      	str	r3, [r7, #20]
 80051f8:	e01b      	b.n	8005232 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80051fa:	4b10      	ldr	r3, [pc, #64]	; (800523c <prvInsertTimerInActiveList+0x7c>)
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	3304      	adds	r3, #4
 8005202:	4619      	mov	r1, r3
 8005204:	4610      	mov	r0, r2
 8005206:	f7fe f97c 	bl	8003502 <vListInsert>
 800520a:	e012      	b.n	8005232 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	429a      	cmp	r2, r3
 8005212:	d206      	bcs.n	8005222 <prvInsertTimerInActiveList+0x62>
 8005214:	68ba      	ldr	r2, [r7, #8]
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	429a      	cmp	r2, r3
 800521a:	d302      	bcc.n	8005222 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800521c:	2301      	movs	r3, #1
 800521e:	617b      	str	r3, [r7, #20]
 8005220:	e007      	b.n	8005232 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005222:	4b07      	ldr	r3, [pc, #28]	; (8005240 <prvInsertTimerInActiveList+0x80>)
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	3304      	adds	r3, #4
 800522a:	4619      	mov	r1, r3
 800522c:	4610      	mov	r0, r2
 800522e:	f7fe f968 	bl	8003502 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005232:	697b      	ldr	r3, [r7, #20]
}
 8005234:	4618      	mov	r0, r3
 8005236:	3718      	adds	r7, #24
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}
 800523c:	2000128c 	.word	0x2000128c
 8005240:	20001288 	.word	0x20001288

08005244 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b08e      	sub	sp, #56	; 0x38
 8005248:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800524a:	e0ca      	b.n	80053e2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2b00      	cmp	r3, #0
 8005250:	da18      	bge.n	8005284 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005252:	1d3b      	adds	r3, r7, #4
 8005254:	3304      	adds	r3, #4
 8005256:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800525a:	2b00      	cmp	r3, #0
 800525c:	d10a      	bne.n	8005274 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800525e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005262:	f383 8811 	msr	BASEPRI, r3
 8005266:	f3bf 8f6f 	isb	sy
 800526a:	f3bf 8f4f 	dsb	sy
 800526e:	61fb      	str	r3, [r7, #28]
}
 8005270:	bf00      	nop
 8005272:	e7fe      	b.n	8005272 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800527a:	6850      	ldr	r0, [r2, #4]
 800527c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800527e:	6892      	ldr	r2, [r2, #8]
 8005280:	4611      	mov	r1, r2
 8005282:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2b00      	cmp	r3, #0
 8005288:	f2c0 80ab 	blt.w	80053e2 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005292:	695b      	ldr	r3, [r3, #20]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d004      	beq.n	80052a2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800529a:	3304      	adds	r3, #4
 800529c:	4618      	mov	r0, r3
 800529e:	f7fe f969 	bl	8003574 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80052a2:	463b      	mov	r3, r7
 80052a4:	4618      	mov	r0, r3
 80052a6:	f7ff ff6b 	bl	8005180 <prvSampleTimeNow>
 80052aa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2b09      	cmp	r3, #9
 80052b0:	f200 8096 	bhi.w	80053e0 <prvProcessReceivedCommands+0x19c>
 80052b4:	a201      	add	r2, pc, #4	; (adr r2, 80052bc <prvProcessReceivedCommands+0x78>)
 80052b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ba:	bf00      	nop
 80052bc:	080052e5 	.word	0x080052e5
 80052c0:	080052e5 	.word	0x080052e5
 80052c4:	080052e5 	.word	0x080052e5
 80052c8:	08005359 	.word	0x08005359
 80052cc:	0800536d 	.word	0x0800536d
 80052d0:	080053b7 	.word	0x080053b7
 80052d4:	080052e5 	.word	0x080052e5
 80052d8:	080052e5 	.word	0x080052e5
 80052dc:	08005359 	.word	0x08005359
 80052e0:	0800536d 	.word	0x0800536d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80052e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052ea:	f043 0301 	orr.w	r3, r3, #1
 80052ee:	b2da      	uxtb	r2, r3
 80052f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80052f6:	68ba      	ldr	r2, [r7, #8]
 80052f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052fa:	699b      	ldr	r3, [r3, #24]
 80052fc:	18d1      	adds	r1, r2, r3
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005302:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005304:	f7ff ff5c 	bl	80051c0 <prvInsertTimerInActiveList>
 8005308:	4603      	mov	r3, r0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d069      	beq.n	80053e2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800530e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005310:	6a1b      	ldr	r3, [r3, #32]
 8005312:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005314:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005318:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800531c:	f003 0304 	and.w	r3, r3, #4
 8005320:	2b00      	cmp	r3, #0
 8005322:	d05e      	beq.n	80053e2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005324:	68ba      	ldr	r2, [r7, #8]
 8005326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005328:	699b      	ldr	r3, [r3, #24]
 800532a:	441a      	add	r2, r3
 800532c:	2300      	movs	r3, #0
 800532e:	9300      	str	r3, [sp, #0]
 8005330:	2300      	movs	r3, #0
 8005332:	2100      	movs	r1, #0
 8005334:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005336:	f7ff fe05 	bl	8004f44 <xTimerGenericCommand>
 800533a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800533c:	6a3b      	ldr	r3, [r7, #32]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d14f      	bne.n	80053e2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005346:	f383 8811 	msr	BASEPRI, r3
 800534a:	f3bf 8f6f 	isb	sy
 800534e:	f3bf 8f4f 	dsb	sy
 8005352:	61bb      	str	r3, [r7, #24]
}
 8005354:	bf00      	nop
 8005356:	e7fe      	b.n	8005356 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800535a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800535e:	f023 0301 	bic.w	r3, r3, #1
 8005362:	b2da      	uxtb	r2, r3
 8005364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005366:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800536a:	e03a      	b.n	80053e2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800536c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800536e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005372:	f043 0301 	orr.w	r3, r3, #1
 8005376:	b2da      	uxtb	r2, r3
 8005378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800537a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800537e:	68ba      	ldr	r2, [r7, #8]
 8005380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005382:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005386:	699b      	ldr	r3, [r3, #24]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d10a      	bne.n	80053a2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800538c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005390:	f383 8811 	msr	BASEPRI, r3
 8005394:	f3bf 8f6f 	isb	sy
 8005398:	f3bf 8f4f 	dsb	sy
 800539c:	617b      	str	r3, [r7, #20]
}
 800539e:	bf00      	nop
 80053a0:	e7fe      	b.n	80053a0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80053a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a4:	699a      	ldr	r2, [r3, #24]
 80053a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a8:	18d1      	adds	r1, r2, r3
 80053aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053b0:	f7ff ff06 	bl	80051c0 <prvInsertTimerInActiveList>
					break;
 80053b4:	e015      	b.n	80053e2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80053b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80053bc:	f003 0302 	and.w	r3, r3, #2
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d103      	bne.n	80053cc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80053c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053c6:	f000 fbdb 	bl	8005b80 <vPortFree>
 80053ca:	e00a      	b.n	80053e2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80053cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80053d2:	f023 0301 	bic.w	r3, r3, #1
 80053d6:	b2da      	uxtb	r2, r3
 80053d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80053de:	e000      	b.n	80053e2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80053e0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80053e2:	4b08      	ldr	r3, [pc, #32]	; (8005404 <prvProcessReceivedCommands+0x1c0>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	1d39      	adds	r1, r7, #4
 80053e8:	2200      	movs	r2, #0
 80053ea:	4618      	mov	r0, r3
 80053ec:	f7fe fc16 	bl	8003c1c <xQueueReceive>
 80053f0:	4603      	mov	r3, r0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	f47f af2a 	bne.w	800524c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80053f8:	bf00      	nop
 80053fa:	bf00      	nop
 80053fc:	3730      	adds	r7, #48	; 0x30
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	20001290 	.word	0x20001290

08005408 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b088      	sub	sp, #32
 800540c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800540e:	e048      	b.n	80054a2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005410:	4b2d      	ldr	r3, [pc, #180]	; (80054c8 <prvSwitchTimerLists+0xc0>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800541a:	4b2b      	ldr	r3, [pc, #172]	; (80054c8 <prvSwitchTimerLists+0xc0>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	3304      	adds	r3, #4
 8005428:	4618      	mov	r0, r3
 800542a:	f7fe f8a3 	bl	8003574 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6a1b      	ldr	r3, [r3, #32]
 8005432:	68f8      	ldr	r0, [r7, #12]
 8005434:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800543c:	f003 0304 	and.w	r3, r3, #4
 8005440:	2b00      	cmp	r3, #0
 8005442:	d02e      	beq.n	80054a2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	699b      	ldr	r3, [r3, #24]
 8005448:	693a      	ldr	r2, [r7, #16]
 800544a:	4413      	add	r3, r2
 800544c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800544e:	68ba      	ldr	r2, [r7, #8]
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	429a      	cmp	r2, r3
 8005454:	d90e      	bls.n	8005474 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	68ba      	ldr	r2, [r7, #8]
 800545a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	68fa      	ldr	r2, [r7, #12]
 8005460:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005462:	4b19      	ldr	r3, [pc, #100]	; (80054c8 <prvSwitchTimerLists+0xc0>)
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	3304      	adds	r3, #4
 800546a:	4619      	mov	r1, r3
 800546c:	4610      	mov	r0, r2
 800546e:	f7fe f848 	bl	8003502 <vListInsert>
 8005472:	e016      	b.n	80054a2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005474:	2300      	movs	r3, #0
 8005476:	9300      	str	r3, [sp, #0]
 8005478:	2300      	movs	r3, #0
 800547a:	693a      	ldr	r2, [r7, #16]
 800547c:	2100      	movs	r1, #0
 800547e:	68f8      	ldr	r0, [r7, #12]
 8005480:	f7ff fd60 	bl	8004f44 <xTimerGenericCommand>
 8005484:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d10a      	bne.n	80054a2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800548c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005490:	f383 8811 	msr	BASEPRI, r3
 8005494:	f3bf 8f6f 	isb	sy
 8005498:	f3bf 8f4f 	dsb	sy
 800549c:	603b      	str	r3, [r7, #0]
}
 800549e:	bf00      	nop
 80054a0:	e7fe      	b.n	80054a0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80054a2:	4b09      	ldr	r3, [pc, #36]	; (80054c8 <prvSwitchTimerLists+0xc0>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d1b1      	bne.n	8005410 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80054ac:	4b06      	ldr	r3, [pc, #24]	; (80054c8 <prvSwitchTimerLists+0xc0>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80054b2:	4b06      	ldr	r3, [pc, #24]	; (80054cc <prvSwitchTimerLists+0xc4>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a04      	ldr	r2, [pc, #16]	; (80054c8 <prvSwitchTimerLists+0xc0>)
 80054b8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80054ba:	4a04      	ldr	r2, [pc, #16]	; (80054cc <prvSwitchTimerLists+0xc4>)
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	6013      	str	r3, [r2, #0]
}
 80054c0:	bf00      	nop
 80054c2:	3718      	adds	r7, #24
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}
 80054c8:	20001288 	.word	0x20001288
 80054cc:	2000128c 	.word	0x2000128c

080054d0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b082      	sub	sp, #8
 80054d4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80054d6:	f000 f965 	bl	80057a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80054da:	4b15      	ldr	r3, [pc, #84]	; (8005530 <prvCheckForValidListAndQueue+0x60>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d120      	bne.n	8005524 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80054e2:	4814      	ldr	r0, [pc, #80]	; (8005534 <prvCheckForValidListAndQueue+0x64>)
 80054e4:	f7fd ffbc 	bl	8003460 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80054e8:	4813      	ldr	r0, [pc, #76]	; (8005538 <prvCheckForValidListAndQueue+0x68>)
 80054ea:	f7fd ffb9 	bl	8003460 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80054ee:	4b13      	ldr	r3, [pc, #76]	; (800553c <prvCheckForValidListAndQueue+0x6c>)
 80054f0:	4a10      	ldr	r2, [pc, #64]	; (8005534 <prvCheckForValidListAndQueue+0x64>)
 80054f2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80054f4:	4b12      	ldr	r3, [pc, #72]	; (8005540 <prvCheckForValidListAndQueue+0x70>)
 80054f6:	4a10      	ldr	r2, [pc, #64]	; (8005538 <prvCheckForValidListAndQueue+0x68>)
 80054f8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80054fa:	2300      	movs	r3, #0
 80054fc:	9300      	str	r3, [sp, #0]
 80054fe:	4b11      	ldr	r3, [pc, #68]	; (8005544 <prvCheckForValidListAndQueue+0x74>)
 8005500:	4a11      	ldr	r2, [pc, #68]	; (8005548 <prvCheckForValidListAndQueue+0x78>)
 8005502:	2110      	movs	r1, #16
 8005504:	200a      	movs	r0, #10
 8005506:	f7fe f8c7 	bl	8003698 <xQueueGenericCreateStatic>
 800550a:	4603      	mov	r3, r0
 800550c:	4a08      	ldr	r2, [pc, #32]	; (8005530 <prvCheckForValidListAndQueue+0x60>)
 800550e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005510:	4b07      	ldr	r3, [pc, #28]	; (8005530 <prvCheckForValidListAndQueue+0x60>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d005      	beq.n	8005524 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005518:	4b05      	ldr	r3, [pc, #20]	; (8005530 <prvCheckForValidListAndQueue+0x60>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	490b      	ldr	r1, [pc, #44]	; (800554c <prvCheckForValidListAndQueue+0x7c>)
 800551e:	4618      	mov	r0, r3
 8005520:	f7fe fd6c 	bl	8003ffc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005524:	f000 f96e 	bl	8005804 <vPortExitCritical>
}
 8005528:	bf00      	nop
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	20001290 	.word	0x20001290
 8005534:	20001260 	.word	0x20001260
 8005538:	20001274 	.word	0x20001274
 800553c:	20001288 	.word	0x20001288
 8005540:	2000128c 	.word	0x2000128c
 8005544:	2000133c 	.word	0x2000133c
 8005548:	2000129c 	.word	0x2000129c
 800554c:	08005e68 	.word	0x08005e68

08005550 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005550:	b480      	push	{r7}
 8005552:	b085      	sub	sp, #20
 8005554:	af00      	add	r7, sp, #0
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	3b04      	subs	r3, #4
 8005560:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005568:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	3b04      	subs	r3, #4
 800556e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	f023 0201 	bic.w	r2, r3, #1
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	3b04      	subs	r3, #4
 800557e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005580:	4a0c      	ldr	r2, [pc, #48]	; (80055b4 <pxPortInitialiseStack+0x64>)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	3b14      	subs	r3, #20
 800558a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	3b04      	subs	r3, #4
 8005596:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f06f 0202 	mvn.w	r2, #2
 800559e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	3b20      	subs	r3, #32
 80055a4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80055a6:	68fb      	ldr	r3, [r7, #12]
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3714      	adds	r7, #20
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr
 80055b4:	080055b9 	.word	0x080055b9

080055b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80055b8:	b480      	push	{r7}
 80055ba:	b085      	sub	sp, #20
 80055bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80055be:	2300      	movs	r3, #0
 80055c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80055c2:	4b12      	ldr	r3, [pc, #72]	; (800560c <prvTaskExitError+0x54>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055ca:	d00a      	beq.n	80055e2 <prvTaskExitError+0x2a>
	__asm volatile
 80055cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d0:	f383 8811 	msr	BASEPRI, r3
 80055d4:	f3bf 8f6f 	isb	sy
 80055d8:	f3bf 8f4f 	dsb	sy
 80055dc:	60fb      	str	r3, [r7, #12]
}
 80055de:	bf00      	nop
 80055e0:	e7fe      	b.n	80055e0 <prvTaskExitError+0x28>
	__asm volatile
 80055e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e6:	f383 8811 	msr	BASEPRI, r3
 80055ea:	f3bf 8f6f 	isb	sy
 80055ee:	f3bf 8f4f 	dsb	sy
 80055f2:	60bb      	str	r3, [r7, #8]
}
 80055f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80055f6:	bf00      	nop
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d0fc      	beq.n	80055f8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80055fe:	bf00      	nop
 8005600:	bf00      	nop
 8005602:	3714      	adds	r7, #20
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr
 800560c:	2000000c 	.word	0x2000000c

08005610 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005610:	4b07      	ldr	r3, [pc, #28]	; (8005630 <pxCurrentTCBConst2>)
 8005612:	6819      	ldr	r1, [r3, #0]
 8005614:	6808      	ldr	r0, [r1, #0]
 8005616:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800561a:	f380 8809 	msr	PSP, r0
 800561e:	f3bf 8f6f 	isb	sy
 8005622:	f04f 0000 	mov.w	r0, #0
 8005626:	f380 8811 	msr	BASEPRI, r0
 800562a:	4770      	bx	lr
 800562c:	f3af 8000 	nop.w

08005630 <pxCurrentTCBConst2>:
 8005630:	20000d60 	.word	0x20000d60
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005634:	bf00      	nop
 8005636:	bf00      	nop

08005638 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005638:	4808      	ldr	r0, [pc, #32]	; (800565c <prvPortStartFirstTask+0x24>)
 800563a:	6800      	ldr	r0, [r0, #0]
 800563c:	6800      	ldr	r0, [r0, #0]
 800563e:	f380 8808 	msr	MSP, r0
 8005642:	f04f 0000 	mov.w	r0, #0
 8005646:	f380 8814 	msr	CONTROL, r0
 800564a:	b662      	cpsie	i
 800564c:	b661      	cpsie	f
 800564e:	f3bf 8f4f 	dsb	sy
 8005652:	f3bf 8f6f 	isb	sy
 8005656:	df00      	svc	0
 8005658:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800565a:	bf00      	nop
 800565c:	e000ed08 	.word	0xe000ed08

08005660 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b086      	sub	sp, #24
 8005664:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005666:	4b46      	ldr	r3, [pc, #280]	; (8005780 <xPortStartScheduler+0x120>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a46      	ldr	r2, [pc, #280]	; (8005784 <xPortStartScheduler+0x124>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d10a      	bne.n	8005686 <xPortStartScheduler+0x26>
	__asm volatile
 8005670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005674:	f383 8811 	msr	BASEPRI, r3
 8005678:	f3bf 8f6f 	isb	sy
 800567c:	f3bf 8f4f 	dsb	sy
 8005680:	613b      	str	r3, [r7, #16]
}
 8005682:	bf00      	nop
 8005684:	e7fe      	b.n	8005684 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005686:	4b3e      	ldr	r3, [pc, #248]	; (8005780 <xPortStartScheduler+0x120>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a3f      	ldr	r2, [pc, #252]	; (8005788 <xPortStartScheduler+0x128>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d10a      	bne.n	80056a6 <xPortStartScheduler+0x46>
	__asm volatile
 8005690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005694:	f383 8811 	msr	BASEPRI, r3
 8005698:	f3bf 8f6f 	isb	sy
 800569c:	f3bf 8f4f 	dsb	sy
 80056a0:	60fb      	str	r3, [r7, #12]
}
 80056a2:	bf00      	nop
 80056a4:	e7fe      	b.n	80056a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80056a6:	4b39      	ldr	r3, [pc, #228]	; (800578c <xPortStartScheduler+0x12c>)
 80056a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	22ff      	movs	r2, #255	; 0xff
 80056b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80056c0:	78fb      	ldrb	r3, [r7, #3]
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80056c8:	b2da      	uxtb	r2, r3
 80056ca:	4b31      	ldr	r3, [pc, #196]	; (8005790 <xPortStartScheduler+0x130>)
 80056cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80056ce:	4b31      	ldr	r3, [pc, #196]	; (8005794 <xPortStartScheduler+0x134>)
 80056d0:	2207      	movs	r2, #7
 80056d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80056d4:	e009      	b.n	80056ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80056d6:	4b2f      	ldr	r3, [pc, #188]	; (8005794 <xPortStartScheduler+0x134>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	3b01      	subs	r3, #1
 80056dc:	4a2d      	ldr	r2, [pc, #180]	; (8005794 <xPortStartScheduler+0x134>)
 80056de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80056e0:	78fb      	ldrb	r3, [r7, #3]
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	005b      	lsls	r3, r3, #1
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80056ea:	78fb      	ldrb	r3, [r7, #3]
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056f2:	2b80      	cmp	r3, #128	; 0x80
 80056f4:	d0ef      	beq.n	80056d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80056f6:	4b27      	ldr	r3, [pc, #156]	; (8005794 <xPortStartScheduler+0x134>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f1c3 0307 	rsb	r3, r3, #7
 80056fe:	2b04      	cmp	r3, #4
 8005700:	d00a      	beq.n	8005718 <xPortStartScheduler+0xb8>
	__asm volatile
 8005702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005706:	f383 8811 	msr	BASEPRI, r3
 800570a:	f3bf 8f6f 	isb	sy
 800570e:	f3bf 8f4f 	dsb	sy
 8005712:	60bb      	str	r3, [r7, #8]
}
 8005714:	bf00      	nop
 8005716:	e7fe      	b.n	8005716 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005718:	4b1e      	ldr	r3, [pc, #120]	; (8005794 <xPortStartScheduler+0x134>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	021b      	lsls	r3, r3, #8
 800571e:	4a1d      	ldr	r2, [pc, #116]	; (8005794 <xPortStartScheduler+0x134>)
 8005720:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005722:	4b1c      	ldr	r3, [pc, #112]	; (8005794 <xPortStartScheduler+0x134>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800572a:	4a1a      	ldr	r2, [pc, #104]	; (8005794 <xPortStartScheduler+0x134>)
 800572c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	b2da      	uxtb	r2, r3
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005736:	4b18      	ldr	r3, [pc, #96]	; (8005798 <xPortStartScheduler+0x138>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a17      	ldr	r2, [pc, #92]	; (8005798 <xPortStartScheduler+0x138>)
 800573c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005740:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005742:	4b15      	ldr	r3, [pc, #84]	; (8005798 <xPortStartScheduler+0x138>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a14      	ldr	r2, [pc, #80]	; (8005798 <xPortStartScheduler+0x138>)
 8005748:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800574c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800574e:	f000 f8dd 	bl	800590c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005752:	4b12      	ldr	r3, [pc, #72]	; (800579c <xPortStartScheduler+0x13c>)
 8005754:	2200      	movs	r2, #0
 8005756:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005758:	f000 f8fc 	bl	8005954 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800575c:	4b10      	ldr	r3, [pc, #64]	; (80057a0 <xPortStartScheduler+0x140>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a0f      	ldr	r2, [pc, #60]	; (80057a0 <xPortStartScheduler+0x140>)
 8005762:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005766:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005768:	f7ff ff66 	bl	8005638 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800576c:	f7ff f856 	bl	800481c <vTaskSwitchContext>
	prvTaskExitError();
 8005770:	f7ff ff22 	bl	80055b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005774:	2300      	movs	r3, #0
}
 8005776:	4618      	mov	r0, r3
 8005778:	3718      	adds	r7, #24
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
 800577e:	bf00      	nop
 8005780:	e000ed00 	.word	0xe000ed00
 8005784:	410fc271 	.word	0x410fc271
 8005788:	410fc270 	.word	0x410fc270
 800578c:	e000e400 	.word	0xe000e400
 8005790:	2000138c 	.word	0x2000138c
 8005794:	20001390 	.word	0x20001390
 8005798:	e000ed20 	.word	0xe000ed20
 800579c:	2000000c 	.word	0x2000000c
 80057a0:	e000ef34 	.word	0xe000ef34

080057a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
	__asm volatile
 80057aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ae:	f383 8811 	msr	BASEPRI, r3
 80057b2:	f3bf 8f6f 	isb	sy
 80057b6:	f3bf 8f4f 	dsb	sy
 80057ba:	607b      	str	r3, [r7, #4]
}
 80057bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80057be:	4b0f      	ldr	r3, [pc, #60]	; (80057fc <vPortEnterCritical+0x58>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	3301      	adds	r3, #1
 80057c4:	4a0d      	ldr	r2, [pc, #52]	; (80057fc <vPortEnterCritical+0x58>)
 80057c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80057c8:	4b0c      	ldr	r3, [pc, #48]	; (80057fc <vPortEnterCritical+0x58>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d10f      	bne.n	80057f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80057d0:	4b0b      	ldr	r3, [pc, #44]	; (8005800 <vPortEnterCritical+0x5c>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00a      	beq.n	80057f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80057da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057de:	f383 8811 	msr	BASEPRI, r3
 80057e2:	f3bf 8f6f 	isb	sy
 80057e6:	f3bf 8f4f 	dsb	sy
 80057ea:	603b      	str	r3, [r7, #0]
}
 80057ec:	bf00      	nop
 80057ee:	e7fe      	b.n	80057ee <vPortEnterCritical+0x4a>
	}
}
 80057f0:	bf00      	nop
 80057f2:	370c      	adds	r7, #12
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr
 80057fc:	2000000c 	.word	0x2000000c
 8005800:	e000ed04 	.word	0xe000ed04

08005804 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005804:	b480      	push	{r7}
 8005806:	b083      	sub	sp, #12
 8005808:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800580a:	4b12      	ldr	r3, [pc, #72]	; (8005854 <vPortExitCritical+0x50>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d10a      	bne.n	8005828 <vPortExitCritical+0x24>
	__asm volatile
 8005812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005816:	f383 8811 	msr	BASEPRI, r3
 800581a:	f3bf 8f6f 	isb	sy
 800581e:	f3bf 8f4f 	dsb	sy
 8005822:	607b      	str	r3, [r7, #4]
}
 8005824:	bf00      	nop
 8005826:	e7fe      	b.n	8005826 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005828:	4b0a      	ldr	r3, [pc, #40]	; (8005854 <vPortExitCritical+0x50>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	3b01      	subs	r3, #1
 800582e:	4a09      	ldr	r2, [pc, #36]	; (8005854 <vPortExitCritical+0x50>)
 8005830:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005832:	4b08      	ldr	r3, [pc, #32]	; (8005854 <vPortExitCritical+0x50>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d105      	bne.n	8005846 <vPortExitCritical+0x42>
 800583a:	2300      	movs	r3, #0
 800583c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	f383 8811 	msr	BASEPRI, r3
}
 8005844:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005846:	bf00      	nop
 8005848:	370c      	adds	r7, #12
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	2000000c 	.word	0x2000000c
	...

08005860 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005860:	f3ef 8009 	mrs	r0, PSP
 8005864:	f3bf 8f6f 	isb	sy
 8005868:	4b15      	ldr	r3, [pc, #84]	; (80058c0 <pxCurrentTCBConst>)
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	f01e 0f10 	tst.w	lr, #16
 8005870:	bf08      	it	eq
 8005872:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005876:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800587a:	6010      	str	r0, [r2, #0]
 800587c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005880:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005884:	f380 8811 	msr	BASEPRI, r0
 8005888:	f3bf 8f4f 	dsb	sy
 800588c:	f3bf 8f6f 	isb	sy
 8005890:	f7fe ffc4 	bl	800481c <vTaskSwitchContext>
 8005894:	f04f 0000 	mov.w	r0, #0
 8005898:	f380 8811 	msr	BASEPRI, r0
 800589c:	bc09      	pop	{r0, r3}
 800589e:	6819      	ldr	r1, [r3, #0]
 80058a0:	6808      	ldr	r0, [r1, #0]
 80058a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058a6:	f01e 0f10 	tst.w	lr, #16
 80058aa:	bf08      	it	eq
 80058ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80058b0:	f380 8809 	msr	PSP, r0
 80058b4:	f3bf 8f6f 	isb	sy
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop
 80058bc:	f3af 8000 	nop.w

080058c0 <pxCurrentTCBConst>:
 80058c0:	20000d60 	.word	0x20000d60
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80058c4:	bf00      	nop
 80058c6:	bf00      	nop

080058c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
	__asm volatile
 80058ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d2:	f383 8811 	msr	BASEPRI, r3
 80058d6:	f3bf 8f6f 	isb	sy
 80058da:	f3bf 8f4f 	dsb	sy
 80058de:	607b      	str	r3, [r7, #4]
}
 80058e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80058e2:	f7fe fee1 	bl	80046a8 <xTaskIncrementTick>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d003      	beq.n	80058f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80058ec:	4b06      	ldr	r3, [pc, #24]	; (8005908 <xPortSysTickHandler+0x40>)
 80058ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058f2:	601a      	str	r2, [r3, #0]
 80058f4:	2300      	movs	r3, #0
 80058f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	f383 8811 	msr	BASEPRI, r3
}
 80058fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005900:	bf00      	nop
 8005902:	3708      	adds	r7, #8
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}
 8005908:	e000ed04 	.word	0xe000ed04

0800590c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800590c:	b480      	push	{r7}
 800590e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005910:	4b0b      	ldr	r3, [pc, #44]	; (8005940 <vPortSetupTimerInterrupt+0x34>)
 8005912:	2200      	movs	r2, #0
 8005914:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005916:	4b0b      	ldr	r3, [pc, #44]	; (8005944 <vPortSetupTimerInterrupt+0x38>)
 8005918:	2200      	movs	r2, #0
 800591a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800591c:	4b0a      	ldr	r3, [pc, #40]	; (8005948 <vPortSetupTimerInterrupt+0x3c>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a0a      	ldr	r2, [pc, #40]	; (800594c <vPortSetupTimerInterrupt+0x40>)
 8005922:	fba2 2303 	umull	r2, r3, r2, r3
 8005926:	099b      	lsrs	r3, r3, #6
 8005928:	4a09      	ldr	r2, [pc, #36]	; (8005950 <vPortSetupTimerInterrupt+0x44>)
 800592a:	3b01      	subs	r3, #1
 800592c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800592e:	4b04      	ldr	r3, [pc, #16]	; (8005940 <vPortSetupTimerInterrupt+0x34>)
 8005930:	2207      	movs	r2, #7
 8005932:	601a      	str	r2, [r3, #0]
}
 8005934:	bf00      	nop
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr
 800593e:	bf00      	nop
 8005940:	e000e010 	.word	0xe000e010
 8005944:	e000e018 	.word	0xe000e018
 8005948:	20000000 	.word	0x20000000
 800594c:	10624dd3 	.word	0x10624dd3
 8005950:	e000e014 	.word	0xe000e014

08005954 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005954:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005964 <vPortEnableVFP+0x10>
 8005958:	6801      	ldr	r1, [r0, #0]
 800595a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800595e:	6001      	str	r1, [r0, #0]
 8005960:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005962:	bf00      	nop
 8005964:	e000ed88 	.word	0xe000ed88

08005968 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005968:	b480      	push	{r7}
 800596a:	b085      	sub	sp, #20
 800596c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800596e:	f3ef 8305 	mrs	r3, IPSR
 8005972:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2b0f      	cmp	r3, #15
 8005978:	d914      	bls.n	80059a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800597a:	4a17      	ldr	r2, [pc, #92]	; (80059d8 <vPortValidateInterruptPriority+0x70>)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	4413      	add	r3, r2
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005984:	4b15      	ldr	r3, [pc, #84]	; (80059dc <vPortValidateInterruptPriority+0x74>)
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	7afa      	ldrb	r2, [r7, #11]
 800598a:	429a      	cmp	r2, r3
 800598c:	d20a      	bcs.n	80059a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800598e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005992:	f383 8811 	msr	BASEPRI, r3
 8005996:	f3bf 8f6f 	isb	sy
 800599a:	f3bf 8f4f 	dsb	sy
 800599e:	607b      	str	r3, [r7, #4]
}
 80059a0:	bf00      	nop
 80059a2:	e7fe      	b.n	80059a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80059a4:	4b0e      	ldr	r3, [pc, #56]	; (80059e0 <vPortValidateInterruptPriority+0x78>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80059ac:	4b0d      	ldr	r3, [pc, #52]	; (80059e4 <vPortValidateInterruptPriority+0x7c>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d90a      	bls.n	80059ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80059b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b8:	f383 8811 	msr	BASEPRI, r3
 80059bc:	f3bf 8f6f 	isb	sy
 80059c0:	f3bf 8f4f 	dsb	sy
 80059c4:	603b      	str	r3, [r7, #0]
}
 80059c6:	bf00      	nop
 80059c8:	e7fe      	b.n	80059c8 <vPortValidateInterruptPriority+0x60>
	}
 80059ca:	bf00      	nop
 80059cc:	3714      	adds	r7, #20
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr
 80059d6:	bf00      	nop
 80059d8:	e000e3f0 	.word	0xe000e3f0
 80059dc:	2000138c 	.word	0x2000138c
 80059e0:	e000ed0c 	.word	0xe000ed0c
 80059e4:	20001390 	.word	0x20001390

080059e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b08a      	sub	sp, #40	; 0x28
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80059f0:	2300      	movs	r3, #0
 80059f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80059f4:	f7fe fd9c 	bl	8004530 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80059f8:	4b5b      	ldr	r3, [pc, #364]	; (8005b68 <pvPortMalloc+0x180>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d101      	bne.n	8005a04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005a00:	f000 f920 	bl	8005c44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005a04:	4b59      	ldr	r3, [pc, #356]	; (8005b6c <pvPortMalloc+0x184>)
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	f040 8093 	bne.w	8005b38 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d01d      	beq.n	8005a54 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005a18:	2208      	movs	r2, #8
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f003 0307 	and.w	r3, r3, #7
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d014      	beq.n	8005a54 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f023 0307 	bic.w	r3, r3, #7
 8005a30:	3308      	adds	r3, #8
 8005a32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f003 0307 	and.w	r3, r3, #7
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d00a      	beq.n	8005a54 <pvPortMalloc+0x6c>
	__asm volatile
 8005a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a42:	f383 8811 	msr	BASEPRI, r3
 8005a46:	f3bf 8f6f 	isb	sy
 8005a4a:	f3bf 8f4f 	dsb	sy
 8005a4e:	617b      	str	r3, [r7, #20]
}
 8005a50:	bf00      	nop
 8005a52:	e7fe      	b.n	8005a52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d06e      	beq.n	8005b38 <pvPortMalloc+0x150>
 8005a5a:	4b45      	ldr	r3, [pc, #276]	; (8005b70 <pvPortMalloc+0x188>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d869      	bhi.n	8005b38 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005a64:	4b43      	ldr	r3, [pc, #268]	; (8005b74 <pvPortMalloc+0x18c>)
 8005a66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005a68:	4b42      	ldr	r3, [pc, #264]	; (8005b74 <pvPortMalloc+0x18c>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005a6e:	e004      	b.n	8005a7a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d903      	bls.n	8005a8c <pvPortMalloc+0xa4>
 8005a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d1f1      	bne.n	8005a70 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005a8c:	4b36      	ldr	r3, [pc, #216]	; (8005b68 <pvPortMalloc+0x180>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d050      	beq.n	8005b38 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005a96:	6a3b      	ldr	r3, [r7, #32]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2208      	movs	r2, #8
 8005a9c:	4413      	add	r3, r2
 8005a9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	6a3b      	ldr	r3, [r7, #32]
 8005aa6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aaa:	685a      	ldr	r2, [r3, #4]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	1ad2      	subs	r2, r2, r3
 8005ab0:	2308      	movs	r3, #8
 8005ab2:	005b      	lsls	r3, r3, #1
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d91f      	bls.n	8005af8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005ab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4413      	add	r3, r2
 8005abe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ac0:	69bb      	ldr	r3, [r7, #24]
 8005ac2:	f003 0307 	and.w	r3, r3, #7
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d00a      	beq.n	8005ae0 <pvPortMalloc+0xf8>
	__asm volatile
 8005aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ace:	f383 8811 	msr	BASEPRI, r3
 8005ad2:	f3bf 8f6f 	isb	sy
 8005ad6:	f3bf 8f4f 	dsb	sy
 8005ada:	613b      	str	r3, [r7, #16]
}
 8005adc:	bf00      	nop
 8005ade:	e7fe      	b.n	8005ade <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae2:	685a      	ldr	r2, [r3, #4]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	1ad2      	subs	r2, r2, r3
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005af2:	69b8      	ldr	r0, [r7, #24]
 8005af4:	f000 f908 	bl	8005d08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005af8:	4b1d      	ldr	r3, [pc, #116]	; (8005b70 <pvPortMalloc+0x188>)
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	1ad3      	subs	r3, r2, r3
 8005b02:	4a1b      	ldr	r2, [pc, #108]	; (8005b70 <pvPortMalloc+0x188>)
 8005b04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005b06:	4b1a      	ldr	r3, [pc, #104]	; (8005b70 <pvPortMalloc+0x188>)
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	4b1b      	ldr	r3, [pc, #108]	; (8005b78 <pvPortMalloc+0x190>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d203      	bcs.n	8005b1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005b12:	4b17      	ldr	r3, [pc, #92]	; (8005b70 <pvPortMalloc+0x188>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a18      	ldr	r2, [pc, #96]	; (8005b78 <pvPortMalloc+0x190>)
 8005b18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1c:	685a      	ldr	r2, [r3, #4]
 8005b1e:	4b13      	ldr	r3, [pc, #76]	; (8005b6c <pvPortMalloc+0x184>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	431a      	orrs	r2, r3
 8005b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005b2e:	4b13      	ldr	r3, [pc, #76]	; (8005b7c <pvPortMalloc+0x194>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	3301      	adds	r3, #1
 8005b34:	4a11      	ldr	r2, [pc, #68]	; (8005b7c <pvPortMalloc+0x194>)
 8005b36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005b38:	f7fe fd08 	bl	800454c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	f003 0307 	and.w	r3, r3, #7
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d00a      	beq.n	8005b5c <pvPortMalloc+0x174>
	__asm volatile
 8005b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b4a:	f383 8811 	msr	BASEPRI, r3
 8005b4e:	f3bf 8f6f 	isb	sy
 8005b52:	f3bf 8f4f 	dsb	sy
 8005b56:	60fb      	str	r3, [r7, #12]
}
 8005b58:	bf00      	nop
 8005b5a:	e7fe      	b.n	8005b5a <pvPortMalloc+0x172>
	return pvReturn;
 8005b5c:	69fb      	ldr	r3, [r7, #28]
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3728      	adds	r7, #40	; 0x28
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	20004f9c 	.word	0x20004f9c
 8005b6c:	20004fb0 	.word	0x20004fb0
 8005b70:	20004fa0 	.word	0x20004fa0
 8005b74:	20004f94 	.word	0x20004f94
 8005b78:	20004fa4 	.word	0x20004fa4
 8005b7c:	20004fa8 	.word	0x20004fa8

08005b80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b086      	sub	sp, #24
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d04d      	beq.n	8005c2e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005b92:	2308      	movs	r3, #8
 8005b94:	425b      	negs	r3, r3
 8005b96:	697a      	ldr	r2, [r7, #20]
 8005b98:	4413      	add	r3, r2
 8005b9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	685a      	ldr	r2, [r3, #4]
 8005ba4:	4b24      	ldr	r3, [pc, #144]	; (8005c38 <vPortFree+0xb8>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4013      	ands	r3, r2
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d10a      	bne.n	8005bc4 <vPortFree+0x44>
	__asm volatile
 8005bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb2:	f383 8811 	msr	BASEPRI, r3
 8005bb6:	f3bf 8f6f 	isb	sy
 8005bba:	f3bf 8f4f 	dsb	sy
 8005bbe:	60fb      	str	r3, [r7, #12]
}
 8005bc0:	bf00      	nop
 8005bc2:	e7fe      	b.n	8005bc2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d00a      	beq.n	8005be2 <vPortFree+0x62>
	__asm volatile
 8005bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd0:	f383 8811 	msr	BASEPRI, r3
 8005bd4:	f3bf 8f6f 	isb	sy
 8005bd8:	f3bf 8f4f 	dsb	sy
 8005bdc:	60bb      	str	r3, [r7, #8]
}
 8005bde:	bf00      	nop
 8005be0:	e7fe      	b.n	8005be0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	685a      	ldr	r2, [r3, #4]
 8005be6:	4b14      	ldr	r3, [pc, #80]	; (8005c38 <vPortFree+0xb8>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4013      	ands	r3, r2
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d01e      	beq.n	8005c2e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d11a      	bne.n	8005c2e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	685a      	ldr	r2, [r3, #4]
 8005bfc:	4b0e      	ldr	r3, [pc, #56]	; (8005c38 <vPortFree+0xb8>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	43db      	mvns	r3, r3
 8005c02:	401a      	ands	r2, r3
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005c08:	f7fe fc92 	bl	8004530 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	685a      	ldr	r2, [r3, #4]
 8005c10:	4b0a      	ldr	r3, [pc, #40]	; (8005c3c <vPortFree+0xbc>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4413      	add	r3, r2
 8005c16:	4a09      	ldr	r2, [pc, #36]	; (8005c3c <vPortFree+0xbc>)
 8005c18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005c1a:	6938      	ldr	r0, [r7, #16]
 8005c1c:	f000 f874 	bl	8005d08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005c20:	4b07      	ldr	r3, [pc, #28]	; (8005c40 <vPortFree+0xc0>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	3301      	adds	r3, #1
 8005c26:	4a06      	ldr	r2, [pc, #24]	; (8005c40 <vPortFree+0xc0>)
 8005c28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005c2a:	f7fe fc8f 	bl	800454c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005c2e:	bf00      	nop
 8005c30:	3718      	adds	r7, #24
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	bf00      	nop
 8005c38:	20004fb0 	.word	0x20004fb0
 8005c3c:	20004fa0 	.word	0x20004fa0
 8005c40:	20004fac 	.word	0x20004fac

08005c44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005c44:	b480      	push	{r7}
 8005c46:	b085      	sub	sp, #20
 8005c48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005c4a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005c4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005c50:	4b27      	ldr	r3, [pc, #156]	; (8005cf0 <prvHeapInit+0xac>)
 8005c52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f003 0307 	and.w	r3, r3, #7
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d00c      	beq.n	8005c78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	3307      	adds	r3, #7
 8005c62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f023 0307 	bic.w	r3, r3, #7
 8005c6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005c6c:	68ba      	ldr	r2, [r7, #8]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	1ad3      	subs	r3, r2, r3
 8005c72:	4a1f      	ldr	r2, [pc, #124]	; (8005cf0 <prvHeapInit+0xac>)
 8005c74:	4413      	add	r3, r2
 8005c76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005c7c:	4a1d      	ldr	r2, [pc, #116]	; (8005cf4 <prvHeapInit+0xb0>)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005c82:	4b1c      	ldr	r3, [pc, #112]	; (8005cf4 <prvHeapInit+0xb0>)
 8005c84:	2200      	movs	r2, #0
 8005c86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	68ba      	ldr	r2, [r7, #8]
 8005c8c:	4413      	add	r3, r2
 8005c8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005c90:	2208      	movs	r2, #8
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	1a9b      	subs	r3, r3, r2
 8005c96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f023 0307 	bic.w	r3, r3, #7
 8005c9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	4a15      	ldr	r2, [pc, #84]	; (8005cf8 <prvHeapInit+0xb4>)
 8005ca4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005ca6:	4b14      	ldr	r3, [pc, #80]	; (8005cf8 <prvHeapInit+0xb4>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	2200      	movs	r2, #0
 8005cac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005cae:	4b12      	ldr	r3, [pc, #72]	; (8005cf8 <prvHeapInit+0xb4>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	1ad2      	subs	r2, r2, r3
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005cc4:	4b0c      	ldr	r3, [pc, #48]	; (8005cf8 <prvHeapInit+0xb4>)
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	4a0a      	ldr	r2, [pc, #40]	; (8005cfc <prvHeapInit+0xb8>)
 8005cd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	4a09      	ldr	r2, [pc, #36]	; (8005d00 <prvHeapInit+0xbc>)
 8005cda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005cdc:	4b09      	ldr	r3, [pc, #36]	; (8005d04 <prvHeapInit+0xc0>)
 8005cde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005ce2:	601a      	str	r2, [r3, #0]
}
 8005ce4:	bf00      	nop
 8005ce6:	3714      	adds	r7, #20
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr
 8005cf0:	20001394 	.word	0x20001394
 8005cf4:	20004f94 	.word	0x20004f94
 8005cf8:	20004f9c 	.word	0x20004f9c
 8005cfc:	20004fa4 	.word	0x20004fa4
 8005d00:	20004fa0 	.word	0x20004fa0
 8005d04:	20004fb0 	.word	0x20004fb0

08005d08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b085      	sub	sp, #20
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005d10:	4b28      	ldr	r3, [pc, #160]	; (8005db4 <prvInsertBlockIntoFreeList+0xac>)
 8005d12:	60fb      	str	r3, [r7, #12]
 8005d14:	e002      	b.n	8005d1c <prvInsertBlockIntoFreeList+0x14>
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	60fb      	str	r3, [r7, #12]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d8f7      	bhi.n	8005d16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	68ba      	ldr	r2, [r7, #8]
 8005d30:	4413      	add	r3, r2
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d108      	bne.n	8005d4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	685a      	ldr	r2, [r3, #4]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	441a      	add	r2, r3
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	68ba      	ldr	r2, [r7, #8]
 8005d54:	441a      	add	r2, r3
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d118      	bne.n	8005d90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	4b15      	ldr	r3, [pc, #84]	; (8005db8 <prvInsertBlockIntoFreeList+0xb0>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d00d      	beq.n	8005d86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	685a      	ldr	r2, [r3, #4]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	441a      	add	r2, r3
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	601a      	str	r2, [r3, #0]
 8005d84:	e008      	b.n	8005d98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005d86:	4b0c      	ldr	r3, [pc, #48]	; (8005db8 <prvInsertBlockIntoFreeList+0xb0>)
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	601a      	str	r2, [r3, #0]
 8005d8e:	e003      	b.n	8005d98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d002      	beq.n	8005da6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005da6:	bf00      	nop
 8005da8:	3714      	adds	r7, #20
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr
 8005db2:	bf00      	nop
 8005db4:	20004f94 	.word	0x20004f94
 8005db8:	20004f9c 	.word	0x20004f9c

08005dbc <memset>:
 8005dbc:	4402      	add	r2, r0
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d100      	bne.n	8005dc6 <memset+0xa>
 8005dc4:	4770      	bx	lr
 8005dc6:	f803 1b01 	strb.w	r1, [r3], #1
 8005dca:	e7f9      	b.n	8005dc0 <memset+0x4>

08005dcc <__libc_init_array>:
 8005dcc:	b570      	push	{r4, r5, r6, lr}
 8005dce:	4d0d      	ldr	r5, [pc, #52]	; (8005e04 <__libc_init_array+0x38>)
 8005dd0:	4c0d      	ldr	r4, [pc, #52]	; (8005e08 <__libc_init_array+0x3c>)
 8005dd2:	1b64      	subs	r4, r4, r5
 8005dd4:	10a4      	asrs	r4, r4, #2
 8005dd6:	2600      	movs	r6, #0
 8005dd8:	42a6      	cmp	r6, r4
 8005dda:	d109      	bne.n	8005df0 <__libc_init_array+0x24>
 8005ddc:	4d0b      	ldr	r5, [pc, #44]	; (8005e0c <__libc_init_array+0x40>)
 8005dde:	4c0c      	ldr	r4, [pc, #48]	; (8005e10 <__libc_init_array+0x44>)
 8005de0:	f000 f826 	bl	8005e30 <_init>
 8005de4:	1b64      	subs	r4, r4, r5
 8005de6:	10a4      	asrs	r4, r4, #2
 8005de8:	2600      	movs	r6, #0
 8005dea:	42a6      	cmp	r6, r4
 8005dec:	d105      	bne.n	8005dfa <__libc_init_array+0x2e>
 8005dee:	bd70      	pop	{r4, r5, r6, pc}
 8005df0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005df4:	4798      	blx	r3
 8005df6:	3601      	adds	r6, #1
 8005df8:	e7ee      	b.n	8005dd8 <__libc_init_array+0xc>
 8005dfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dfe:	4798      	blx	r3
 8005e00:	3601      	adds	r6, #1
 8005e02:	e7f2      	b.n	8005dea <__libc_init_array+0x1e>
 8005e04:	08005ed8 	.word	0x08005ed8
 8005e08:	08005ed8 	.word	0x08005ed8
 8005e0c:	08005ed8 	.word	0x08005ed8
 8005e10:	08005edc 	.word	0x08005edc

08005e14 <memcpy>:
 8005e14:	440a      	add	r2, r1
 8005e16:	4291      	cmp	r1, r2
 8005e18:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005e1c:	d100      	bne.n	8005e20 <memcpy+0xc>
 8005e1e:	4770      	bx	lr
 8005e20:	b510      	push	{r4, lr}
 8005e22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e2a:	4291      	cmp	r1, r2
 8005e2c:	d1f9      	bne.n	8005e22 <memcpy+0xe>
 8005e2e:	bd10      	pop	{r4, pc}

08005e30 <_init>:
 8005e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e32:	bf00      	nop
 8005e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e36:	bc08      	pop	{r3}
 8005e38:	469e      	mov	lr, r3
 8005e3a:	4770      	bx	lr

08005e3c <_fini>:
 8005e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e3e:	bf00      	nop
 8005e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e42:	bc08      	pop	{r3}
 8005e44:	469e      	mov	lr, r3
 8005e46:	4770      	bx	lr
